{
  
    
        "post0": {
            "title": "Big Idea 2 - Data Related to User Guide",
            "content": "Introduction . When building an application that requires users to create accounts or sign in, handling data related to users is crucial. This data can include things like user profiles, preferences, and activity logs, which can be used to improve the user experience and personalize the application&#39;s performance. . By learning how to handle data related to users effectively and efficiently, you&#39;ll be equipped with the skills and knowledge needed to build helpful applications that meet the needs of your users. . PLEASE DON&#39;T OPEN THE POPCORN HACKS, WE WILL OPEN THEM DURING THE PRESENTATION . Basics of Class and User Data . Establishing Class/User Data and making a new user . Because Python is an object-oriented programming (OOP) language, everything in it represents an object. Lists, dictionaries, functions, etc. are all examples of Python objects. Generally speaking, a Python object is an entity of data items and methods describing the behavior of those items. . A Python class is a template used to create Python objects. We can think of it as a cooking recipe, where all the ingredients and their quantities are listed, and the whole process of cooking is described step-by-step. . In this case, we can compare a cake recipe to a class, and a cake cooked following that recipe to an object (i.e., an instance of that class). Using the same recipe (class), we can create many cakes (objects). This is the essence of creating a class in Python: to define data elements and the rules establishing how these elements can interact and change their state — and then use this framework to build various objects in a set way, instead of creating them from scratch every time. . Let&#39;s look at a few examples: . class Bikes: name = &quot;&quot; gear = 0 # create objects of class bike1 = Bikes() # objectName = ClassName() bike2 = Bikes() . Now that we have our class and object defined, we can now run code to modify certain attributes of our objects. . bike1.gear = 11 bike1.name = &quot;Mountain Bike&quot; bike2.gear = 13 bike2.name = &quot;Road Bike&quot; print(f&quot;Name: {bike1.name}, Gears: {bike1.gear} &quot;) . Name: Mountain Bike, Gears: 11 . Popcorn Hacks #1: Add another print command to display the attributes of Bike #2. What output will this code segment produce? print(f&quot;Name: {bike2.name}, Gears: {bike2.gear}&quot;) . Name: Road Bike, Gears: 13 . Example: Defining a User Class . Now we will look into Classes for users of a program or website. . class User: def __init__(self, username, email): self.username = username self.email = email def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . For this cell, we define a User class with a constructor method &quot;init&quot; that takes username and email as parameters. The display_info method is used to print the user information. . For backend functionality, this class can be used to create, manipulate, and manage user data. For example, when a new user signs up for an account, you could create a new User object with their username and email. This object can then be used to perform various operations, such as validating the user&#39;s input, storing the user&#39;s data in a database, or processing user-related requests. . Now let&#39;s make a new User: . new_user = User(&quot;jeffrey&quot;, &quot;leejeffreysc@gmail.com&quot;) new_user.display_info() . Username: jeffrey, Email: leejeffreysc@gmail.com . Here&#39;s a step-by-step breakdown of how the code relates to backend functionality: . new_user = User(&quot;jeffrey&quot;, &quot;leejeffreysc@gmail.com&quot;): This line creates a new User object, initializing it with the username &quot;jeffrey&quot; and the email &quot;leejeffreysc@gmail.com&quot;. This could represent a user who has just signed up for an account, and the input values would typically come from user input, such as a frontend signup form. . new_user.display_info(): This line calls the display_info method on the new_user object, which prints the user&#39;s information (username and email) to the console. In a real-world backend application, you might use this method or a similar one to display user information in logs, send a welcome email, or create an API response with the user&#39;s data. . User/Class @ Decorators: . A Python Class allows for the use of @ decorators, these allow access to attribute data without the use of functions. . @property decorator (aka getter). This enables developers to &quot;GET&quot; attribute data in a clean method (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to &quot;UPDATE&quot;/set attribute data in a clean method (object.name = &quot;Jeffrey&quot; versus object.set_name(&quot;Jeffrey&quot;)) | . The getter and setter methods provide a clean and controlled way to access and modify the attributes of an object. This can be particularly useful when interacting with databases, APIs, or other parts of a web application that require the management and manipulation of object attributes. . class Student: def __init__(self, student, name): self._student = student self._name = name @property def name(self): return self._name @name.setter def name(self, new_name): self._name = new_name . In this example, the Student class has a name attribute, which is accessed and modified through the name property getter and setter methods. The _name attribute uses an underscore prefix, which is a convention to indicate it should not be accessed directly. . Usage of the getter and setter methods are below: . student = Student(1001, &quot;Derek Sol&quot;) print(student.name) # Get the name using the getter method student.name = &quot;Jagger Klein&quot; # Set the name using the setter method print(student.name) . Derek Sol Jagger Klein . Popcorn Hacks #2: The following code segment for computers does not have getter and setter methods called. Using the missing attributes &quot;model&quot; and &quot;year&quot;, add example getter and setters methods for this class. Show us an example output that this code segment might produce. class Computer: def __init__(self, model, year): self._model = model self._year = year @property def model(self): return self._model @model.setter def model(self, new_model): self._model = new_model @property def year(self): return self._year @year.setter def year(self, new_year): self._year = new_year . a = Computer(&quot;Thinkpad&quot;, 2019) print(&quot;The model is&quot;, a.model) print(&quot;The year is&quot;, a.year) a.model = &quot;Windows XP&quot; print(&quot;The model is&quot;, a.model) . The model is Thinkpad The year is 2019 The model is Windows XP . Databases and SQLite . A database is a structured collection of data that is organized and stored in a way that allows for efficient retrieval, manipulation, and management of that data. In other words, a database is a software application that allows you to store and manage large amounts of data in an organized manner. . Some Examples of Databases: . Storing and managing customer data, such as contact information, order history, and customer preferences. | Keeping track of inventory levels and stock movements in a warehouse or retail store. | Managing financial transactions, such as payments, invoices, and receipts. | . SQLite is a software library that provides a user-friendly database management system. Unlike other databases, such as MySQL or PostgreSQL, SQLite is programmed within an application, which means it does not require a separate server process to operate. This makes SQLite great for web applications or for use in situations where you don&#39;t need a full database server. . In this lesson, we will be demonstrating how to set up a SQLite database in Flask, a Python web framework. Flask allows programmers to easily interact with SQLite databases, and we&#39;ll walk through the process of setting up a new database, creating tables, and adding data. We&#39;ll also cover some basic SQL commands that you can use to interact with your database, including CREATE TABLE, INSERT, SELECT, UPDATE, and DELETE. . Setting up a SQLite database in Flask . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE students (id INTEGER PRIMARY KEY, name TEXT, grade INTEGER)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Note: This will create a new file &#39;database.db&#39; in the _notebooks folder if one doesn&#39;t exist. . Breaking down this code segment: . We imported the necessary libraries and tools | We created a Flask application | We connected to the SQLite database using SQLite3 | We created a cursor object to execute SQL commands | We created tables in the database using SQL commands | . Flask provides several extensions and tools for working with SQLite databases, including Flask-SQLAlchemy, Flask-SQLite3, and Flask-Admin. These tools provide a high-level interface for interacting with the database, making it easy to perform common operations such as adding, updating, and deleting records. . CRUD Commands with SQLite . CRUD stands for Create, Read, Update, and Delete, which are the basic operations you can perform on data. SQL is useful library because it allows programmers to create new tables to organize data, add new data to a table, update data that&#39;s already there, or delete data that&#39;s no longer needed. . C: To create a new record in a database, you must first define the table structure that will store the data. This can be accomplished using SQL commands such as CREATE. Once the table is created, data can be added to it using the INSERT INTO command. . | R: To retrieve data from the database, you can use the READ command. You can specify which fields you want to retrieve and the conditions you want to apply using the WHERE clause. There are also several functions available to aggregate and manipulate data. . | U: To modify existing data in the database, you can use the UPDATE command. You will need to specify which table and fields you want to update, and the conditions you want to apply using the WHERE clause. . | D: To remove data from the database, you can use the DELETE command. . | . Example of CRUD within an SQLite Database . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE basketball (_player TEXT PRIMARY KEY, _team TEXT, _position TEXT, _opinion TEXT)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Hypothetically, our programmer wanted to create an application about basketball players, and created a new table in SQL to store and interact with user-submitted data. Using the same method as the previous table, a new table &#39;basketball&#39; is created by the cursor and added to the &#39;database.db&#39; file. . Create Function: . def create(): database = &#39;database.db&#39; player = input(&quot;Enter the player name&quot;) team = input(&quot;Enter team name&quot;) position = input(&quot;Enter player position&quot;) opinion = input(&quot;Enter your opinion &quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record in to db cursor.execute(&quot;INSERT INTO basketball (_player, _team, _position, _opinion) VALUES (?, ?, ?, ?)&quot;, (player, team, position, opinion)) # Commit the changes connection.commit() print(f&quot;New basketball with {player} is added.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Closing cursor and connection cursor.close() connection.close() create() . New basketball with Jaso is added. . The create() feature allows users to input information about a basketball player and store it in a SQLite table &#39;basketball&#39; inside the database file we already created &#39;database.db&#39;. The code prompts the user for the player&#39;s name, team name, position, and their opinion about the player, then establishes a connection to the SQLite database and creates a cursor object for executing SQL commands. . The cursor.execute() method is called with an SQL INSERT command to insert a new entry into the &#39;basketball&#39; table. The connection.commit() method saves the changes to the database, and if the record is inserted successfully, a confirmation message is printed. In case of errors, the except block catches the sqlite3.Error exception and prints an error message. Finally, the cursor and the connection to the database are closed, and the create() function is called to execute the code. . Read Function: . def read(): database = &#39;basketball.db&#39; # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() # Fetch all the records from basketball table results = cursor.execute(&#39;SELECT * FROM basketball&#39;).fetchall() if len(results) != 0: for row in results: print(row) else: print(&quot;No player found.&quot;) # Closing cursor and connection cursor.close() connection.close() read() . The read() feature retrieves and prints all entries from the &#39;basketball&#39; table in the specified SQLite database. The script establishes a connection to the SQLite database, creates a cursor object for executing SQL commands, and calls the cursor.execute() method with an SQL SELECT command to fetch all the entires from the &#39;basketball&#39; table. The fetchall() method retrieves all the rows returned by the SELECT command and stores them in the results variable. . The code then checks if there are any records in the table and, if so, iterates through each row in the results using a &#39;for loop&#39; and prints the row. If there are no records, the program prints &quot;No player found&quot;. Finally, the cursor and the connection to the database are closed, and the read() function is called to execute the code. . Update Function: . import sqlite3 def update(): database = &#39;database.db&#39; player = input(&quot;Enter a basketball player to update the opinion for:&quot;) opinion = input(&quot;Enter new opinion:&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Updating review for the basketball cursor.execute(&quot;UPDATE basketball SET _opinion = ? WHERE _player = ?&quot;, (opinion, player)) if cursor.rowcount != 0: print(f&quot;Review for the basketball is updated to {opinion}&quot;) connection.commit() else: print(f&quot;Player not found.&quot;) except sqlite3.Error as error: print(&quot;Error occurred&quot;, error) # Closing cursor and connection cursor.close() connection.close() update() . Review for the basketball is updated to not nice . This update feature updates the opinion for a specific basketball player in an SQLite database. The code defines an update() function, which prompts the user to input the basketball player they want to update and the new opinion for that player. The script connects to the SQLite database, creates a cursor object, and handles any potential errors while executing the SQL command. The cursor.execute() method updates the review in the database for the specified basketball item. . If at least one value is changed, a success message is printed and the changes are committed to the database. Otherwise, a &quot;Player not found.&quot; message is displayed. In the except block, if an error occurs, an error message along with specific error details is printed. Finally, the cursor and connection to the database are closed, and the update() function is called to execute the review update process. . Delete Function . import sqlite3 def delete(): database = &#39;basketball.db&#39; player = input(&quot;Enter basketball player to delete&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;DELETE FROM basketball WHERE _player = ?&quot;, (player,)) if cursor.rowcount == 0: print(f&quot;{player} does not exist&quot;) else: print(f&quot;Successfully deleted basketball player {player}&quot;) connection.commit() except sqlite3.Error as error: print(&quot;Error occurred: &quot;, error) # Closing cursor and connection cursor.close() connection.close() delete() . The delete feature deletes a specific basketball player from the specified SQLite database. The code defines a delete() function that prompts the user to input the basketball player they want to delete. After connecting to the SQLite database and creating a cursor object, the code handles potential errors while executing the SQL command. The cursor.execute() method is used to delete the basketball item with the specified ID. . If no rows are affected, a message is printed indicating that the basketball player does not exist. Otherwise, a success message is displayed, confirming the basketball player&#39;s deletion. The changes are then committed to the database. In the except block, any error that occurs triggers an error message along with specific error details. Finally, the cursor and connection to the database are closed, and the delete() function is called to execute the basketball item deletion process. This code showcases a practical way to remove information from an SQLite database based on user input. . Menu Functions: . Alongside the four CRUD functions, a menu function is designed to manage Create, Read, Update, Delete operations and display the schema. The menu function is responsible for taking in user inputs and making the program call various functions. When running a menu function, users enter their desired operation, whether it be Create, Read, Update, or Delete, and the input is checked by various conditions to determine which function should be called. Many menu functions are called recursively, so the cell will repeat the menu process until the user decides to exit. . Popcorn Hacks #3: The menu function below is missing some of the CRUD functions for the specified basketball players table. Fix the following code by adding the intended CRUD functions, then perform a READ function on the database. def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif len(operation)==0: # Escape Key return elif operation.lower() == &#39;r&#39;: create() elif operation.lower() == &#39;u&#39;: create() elif operation.lower() == &#39;d&#39;: create() else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Error while inserting record UNIQUE constraint failed: basketball._player . Image Uploading with SQLite . Using various Python Libraries, we are able to upload and customize images using python code, as well as using images to interact with databases. . One way to store images in a database is to INSERT the image data as a binary blob. . To store an image as a blob in SQLite, you can first read the image file and convert it to a binary format using a programming language like Python. Here&#39;s an example of how to do this: . Making the Table to store our Image Data: . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE images (name TEXT PRIMARY KEY, data BLOB)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . We use a new data type &quot;BLOB&quot; to store specific data from our .jpg image. . Adding Image Data to our Table: . You can use this example sunset jpg for our code. Download and place it in the same repository as this notebook. Rename image to &#39;image.jpg&#39; . https://t4.ftcdn.net/jpg/01/04/78/75/360_F_104787586_63vz1PkylLEfSfZ08dqTnqJqlqdq0eXx.jpg . import sqlite3 # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(&#39;image.png&#39;, &#39;rb&#39;) as jpg: image_data = jpg.read() # Insert the image data into the database conn.execute(&quot;INSERT INTO images (name, data) VALUES (?, ?)&quot;, (&#39;image&#39;, image_data)) # Commit the transaction conn.commit() # Close the connection conn.close() . In this example, the image data is read from the &quot;image.jpg&quot; file and inserted into the &quot;images&quot; table in the &quot;database.db&quot; SQLite database. The image data is then stored as a binary blob in the &quot;data&quot; column of the table. . Converting BLOB to Image -&gt; Displaying Image . import sqlite3 from PIL import Image import io # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT data FROM images WHERE name=?&quot;, (&#39;image&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() . The image data is then retrieved from the &quot;images&quot; table using a SELECT statement with a WHERE clause that correctly matches the image name. The binary image data is then converted to an image object using the PIL library and displayed on the screen. . Popcorn Hacks #4: Using the same table, find a new .jpg image and add its image data to the database. Display the image using the PIL Library and show us the output image. import sqlite3 # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(&#39;sun.jpg&#39;, &#39;rb&#39;) as jpg: image_data = jpg.read() # Insert the image data into the database conn.execute(&quot;INSERT INTO images (name, data) VALUES (?, ?)&quot;, (&#39;sunflower&#39;, image_data)) # Commit the transaction conn.commit() # Close the connection conn.close() . import sqlite3 from PIL import Image import io # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT data FROM images WHERE name=?&quot;, (&#39;sunflower&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() . HACKS (Due Sunday 11:59 PM) . Make sure to fill in all blank notes and popcorn hacks, and run each of the interactive coding exercises. (0.45) . Extra Credit: Winning team for Popcorn Hacks (+0.05) | . Create your own SQL database and create an algorithm that can insert, update, and delete data related to your topic of choice. Functionality for adding image data MUST be included. Points will be awarded based on effort and success. (0.45) . Extra Credit: Connect your backend database to a visible frontend! Screenshots of displayed data is fine. (+0.05) | . from flask import Flask import sqlite3 import io # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE pets (name TEXT PRIMARY KEY, photo BLOB)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() # Insert function to add a new pet to the database def insert_pet(name, photo_path): conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(photo_path, &#39;rb&#39;) as f: photo_data = f.read() try: # Insert the pet into the database conn.execute(&quot;INSERT INTO pets (name, photo) VALUES (?, ?)&quot;, (name, photo_data)) conn.commit() print(f&quot;{name} added to the database:&quot;) except sqlite3.IntegrityError as e: print(f&quot;Error: {e}. {name} already exists in the database.&quot;) # Close the connection conn.close() # Update function to update an existing pet&#39;s information def update_pet(name, photo_path=None): # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the new image file as binary data if photo_path: with open(photo_path, &#39;rb&#39;) as f: photo_data = f.read() try: # Update the pet&#39;s information if photo_path: conn.execute(&quot;UPDATE pets SET photo=? WHERE name=?&quot;, (photo_data, name)) conn.commit() print(f&quot;{name} updated:&quot;) except sqlite3.IntegrityError as e: print(f&quot;Error: {e}. {name} does not exist in the database.&quot;) conn.close() def delete_pet(name): conn = sqlite3.connect(&#39;database.db&#39;) try: # Deleting pet information conn.execute(&quot;DELETE FROM pets WHERE name=?&quot;, (name,)) conn.commit() print(f&quot;{name} deleted from the database:&quot;) except sqlite3.IntegrityError as e: print(f&quot;Error: {e}. {name} does not exist in the database.&quot;) conn.close() . insert_pet(&quot;My Pet&quot;, &quot;images2/buddy.jpg&quot;) conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT photo FROM pets WHERE name=?&quot;, (&#39;My Pet&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() update_pet(&quot;My Pet&quot;, &quot;images2/buddy_new.jpg&quot;) conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT photo FROM pets WHERE name=?&quot;, (&#39;My Pet&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() delete_pet(&quot;My Pet&quot;) . My Pet added to the database: My Pet updated: My Pet deleted from the database: . Error: no &#34;view&#34; mailcap rules found for type &#34;image/png&#34; Error: no &#34;view&#34; mailcap rules found for type &#34;image/png&#34; WARNING: You don&#39;t seem to have any mimeinfo.cache files. Try running the update-desktop-database command. If you don&#39;t have this command you should install the desktop-file-utils package. This package is available from http://freedesktop.org/wiki/Software/desktop-file-utils/ WARNING: You don&#39;t seem to have any mimeinfo.cache files. Try running the update-desktop-database command. If you don&#39;t have this command you should install the desktop-file-utils package. This package is available from http://freedesktop.org/wiki/Software/desktop-file-utils/ Can&#39;t call method &#34;get_value&#34; on an undefined value at /usr/bin/mimeopen line 159. Can&#39;t call method &#34;get_value&#34; on an undefined value at /usr/bin/mimeopen line 159. Start : This command cannot be run due to the error: The system cannot find the file specified. Start : This command cannot be run due to the error: The system cannot find the file specified. At line:1 char:1 + Start &#34;/tmp/tmpg5rhmntf.PNG&#34; At line:1 char:1 + Start &#34;/tmp/tmprckj2y_x.PNG&#34; + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidOperation: (:) [Start-Process], InvalidOperationException + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidOperation: (:) [Start-Process], InvalidOperationException + FullyQualifiedErrorId : InvalidOperationException,Microsoft.PowerShell.Commands.StartProcessCommand + FullyQualifiedErrorId : InvalidOperationException,Microsoft.PowerShell.Commands.StartProcessCommand .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/04/27/P3M-Team-SnapShot-Student.html",
            "relUrl": "/2023/04/27/P3M-Team-SnapShot-Student.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P3 4/27 Big Idea 3 Data Structures",
            "content": "Leaderboard Database . How do you set up a database model? . What is a database model . A database model shows the logical structure of a database | It fundamentally determines in which manner data can be stored, organized, and manipulated | Some popular database models are relational models, object oriented models, hierarchial models, flat file models, and network models | The one below is an Object-Relational Model which is a combination of a relational model and an object oriented model | . Creating SQLAlchemy App . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///sqlite.db&#39; app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = False app.config[&quot;SECRET_KEY&quot;] = &quot;SECRET_KEY&quot; db = SQLAlchemy(app) # Images storage app.config[&quot;MAX_CONTENT_LENGTH&quot;] = 5 * 1024 * 1024 # maximum size of uploaded content app.config[&quot;UPLOAD_EXTENSIONS&quot;] = [&quot;.jpg&quot;, &quot;.png&quot;, &quot;.gif&quot;] # supported file types app.config[&quot;UPLOAD_FOLDER&quot;] = &quot;volumes/uploads/&quot; # location of user uploaded content . Creating Database Template . from sqlalchemy import Column, Integer, String, Text from sqlalchemy.exc import IntegrityError import json from werkzeug.security import generate_password_hash, check_password_hash # # Leaderboard DB class that maps leaderboard SQL table # class Leaderboard(db.Model): __tablename__ = &quot;leaderboard&quot; # # Leaderboard DB columns for easy, medium and hard points with user info # id = Column(Integer, primary_key=True) _username = Column(String(255), unique=True, nullable=False) _password = Column(String(255), nullable=False) _height = Column(Integer, nullable=False) _pointsEasy = Column(Integer, nullable=False) _pointsMedium = Column(Integer, nullable=False) _pointsHard = Column(Integer, nullable=False) # # Leaderboard DB class constructor # def __init__(self, username, password, height, pointsEasy, pointsMedium, pointsHard): self._username = username self.set_password(password) self._height = height self._pointsEasy = pointsEasy self._pointsMedium = pointsMedium self._pointsHard = pointsHard # # Leaderboard DB class string representation of an object # def __repr__(self): return &quot;&lt;Leaderboard(id=&#39;%s&#39;, username=&#39;%s&#39;, pointsEasy=&#39;%s&#39;, pointsMedium=&#39;%s&#39;, pointsHard=&#39;%s&#39;)&gt;&quot; % ( self.id, self.username, self.height, self.pointsEasy, self.pointsMedium, self.pointsHard, ) # # Returns Leaderboard username # @property def username(self): return self._username # # Sets Leaderboard username # @username.setter def username(self, value): self._username = value # # checks Leaderboard username valid # def is_username(self, username): return self._username == username @property def height(self): return self._height @height.setter def height(self, value): self.height = value # # Returns Leaderboard easy points # @property def pointsEasy(self): return self._pointsEasy # # Sets Leaderboard easy points # @pointsEasy.setter def pointsEasy(self, value): self._pointsEasy = value # # Sets Leaderboard medium points # @property def pointsMedium(self): return self._pointsMedium # # Sets Leaderboard medium points # @pointsMedium.setter def pointsMedium(self, value): self._pointsMedium = value # # Returns Leaderboard hard points # @property def pointsHard(self): return self._pointsHard # # Sets Leaderboard hard points # @pointsHard.setter def pointsHard(self, value): self._pointsHard = value # # Returns Leaderboard password # @property def password(self): return self._password[0:10] + &quot;...&quot; # # Sets Leaderboard password # def set_password(self, password): self._password = generate_password_hash(password, method=&#39;sha512&#39;) # # Checks Leaderboard password validity # def is_password(self, password): result = check_password_hash(self._password, password) if result: return True else: return False # # Converts Leaderboard to dictionary # def to_dict(self): return {&quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;password&quot;: self.password, &quot;pointsEasy&quot;: self._pointsEasy, &quot;pointsMedium&quot;: self._pointsMedium, &quot;pointsHard&quot;: self._pointsHard} # # Converts Leaderboard to string values # def __str__(self): return json.dumps(self.read()) # # Creates Leaderboard database # def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None # # Returns Leaderboard name value pairs # def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.name, &quot;password&quot;: self.uid, &quot;height&quot; : self.height, &quot;pointsEasy&quot;: self.pointsEasy, &quot;pointsMedium&quot;: self.pointsMedium, &quot;pointsHard&quot;: self.pointsHard } # # Updates Leaderboard DB rows for points and user data # def update(self, username=&quot;&quot;, height=&quot;&quot;,password=&quot;&quot;, pointsEasy=&quot;&quot;, pointsMedium=&quot;&quot;, pointsHard=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if len(pointsEasy) &gt; 0: self.pointsEasy = pointsEasy if len(pointsMedium) &gt; 0: self.pointsMedium = pointsMedium if len(height) &gt; 0: self.height = height if len(pointsHard) &gt; 0: self.pointsHard = pointsHard if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # # Delets Leaderboard row from teh DB # def delete(self): db.session.delete(self) db.session.commit() return None . Initialization of Data . # def init_leaderboards(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; l1 = Leaderboard(username=&quot;bob&quot;, password=&quot;apple&quot;, height = 180, pointsEasy=2, pointsMedium=5, pointsHard=3) l2 = Leaderboard(username=&quot;bobby&quot;, password=&quot;appley&quot;, height = 190, pointsEasy=20, pointsMedium=50, pointsHard=30) l3 = Leaderboard(username=&quot;boba&quot;, password=&quot;applee&quot;, height = 185, pointsEasy=150, pointsMedium=250, pointsHard=350) l4 = Leaderboard(username=&quot;bobruth&quot;, password=&quot;appler&quot;, height = 187, pointsEasy=100, pointsMedium=300, pointsHard=500) l5 = Leaderboard(username=&quot;bobson&quot;, password=&quot;appel&quot;, height = 186, pointsEasy=100, pointsMedium=300, pointsHard=500) leaderboards = [l1, l2, l3, l4,l5] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for l in leaderboards: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = l.create() print(f&quot;Created new uid {object.username}&quot;) db.session.add(l) db.session.commit() except: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {l.username}, or error.&quot;) init_leaderboards() . Created new uid bob Created new uid bobby Created new uid boba Created new uid bobruth Created new uid bobson . DO THESE FOR THIS SECTION . fill in the blanks | add a new leaderboard, and edit the bobbert leaderboard; add proof with a screenshot of the sqlite.db | add a new set of keys and values to the leaderboard; add proof with a screenshot of the sqlite.db | . Picture Database . | Used CRUD methods which have create, read, update, and delete rows in the table. There is a function called initEasyImages which populates the &#39;Images&#39; table with data. | The init method is used to create a new row in the table with a given imagePath, xCoord, yCoord, and difficulty. The repr method returns a string representation of the object when it is printed. | The table has five columns: id, _imagePath, _xCoord, _yCoord, and _difficulty. | | This part of the code defines getter and setter methods for the columns in the Images model. It sets and retrieves the metadata of the image. | | The initEasyImages function initializes the database with image metadata for easy difficulty images. | . from sqlalchemy import Column, Integer, String, Text, LargeBinary from sqlalchemy.exc import IntegrityError from pathlib import Path class Images(db.Model): __tablename__ = &#39;images&#39; id = Column(Integer, primary_key=True) _imagePath = Column(Text, unique=True, nullable=False) _xCoord = Column(Integer, nullable=False) _yCoord = Column(Integer, nullable=False) _difficulty = Column(Integer, nullable=False) def __init__(self, imagePath, xCoord, yCoord, difficulty): self._imagePath = imagePath self.xCoord = xCoord self.yCoord = yCoord self.difficulty = difficulty def __repr__(self): return &quot;&lt;image(id=&#39;%s&#39;, imagePath=&#39;%s&#39;, xCoord=&#39;%s&#39;, yCoord=&#39;%s&#39;, difficulty=&#39;%s&#39;)&gt;&quot; % ( self.id, self.imagePath, self.xCoord, self.yCoord, self.difficulty ) @property def imagePath(self): return self._imagePath @imagePath.setter def imagePath(self, value): self._imagePath = value @property def xCoord(self): return self._xCoord @xCoord.setter def xCoord(self, value): self._xCoord = value @property def yCoord(self): return self._yCoord @yCoord.setter def yCoord(self, value): self._yCoord = value @property def difficulty(self): return self._difficulty @difficulty.setter def difficulty(self, value): self._difficulty = value def to_dict(self): return {&quot;id&quot;: self.id, &quot;imagePath&quot;: self._imagePath, &quot;xCoord&quot;: self._xCoord, &quot;yCoord&quot;: self._yCoord, &quot;difficulty&quot;: self._difficulty} def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;path&quot;: self.imagePath, &quot;xCoord&quot;: self.xCoord, &quot;yCoord&quot;: self.yCoord, &quot;difficulty&quot;: self.difficulty } # CRUD update: updates user name, password, phone # returns self def update(self, path=&quot;&quot;, xCoord=&quot;&quot;, yCoord=&quot;&quot;, difficulty=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; xCoord = int(xCoord) yCoord = int(yCoord) if path: self.imagePath = path if xCoord &gt;= 0: self.xCoord = xCoord if yCoord &gt;= 0: self.yCoord = yCoord if difficulty in range(3): self.difficulty = difficulty db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . def initEasyImages(): with app.app_context(): db.create_all() image_dir = Path.cwd()/&quot;images/easy&quot; images_paths = [i.name for i in image_dir.iterdir()] images = [Images(&quot;images/easy/&quot; + image, 250, 250, 0) for image in images_paths] for image in images: try: image.create() print(&quot;Successfully added entry&quot;) except: db.session.remove() print(&quot;Error adding image: &quot;, image.imagePath) initEasyImages() . Popcorn Hacks . The init method initializes a new Images object with the following parameters: imagePath, xCoord, yCoord, and difficulty. | In the Images class, the tablename attribute specifies the name of the table. | The update method updates the values of the object&#39;s attributes imagePath, xCoord, yCoord, and difficulty based on the input parameters, and then uses the db.session.commit method to commit the changes to the database. | The db module used in this code is part of a larger library called SQLAlchemy, which provides a set of tools for working with databases in Python. | . Picture Encoding . Essential Question: What are some methods that we could store and access images in the backend, and how can we send them to a frontend application? . The image encoding process for this project is done within the endpoints created on our backend application. The overarching process is split into three seperate sub-processes, each handling a different level of game-difficulty. For this lesson, we will look at the easy images sub-process as our example. . def get_random_easy_image(): images = Images.query.filter_by(_difficulty=0).all() image = random.choice(images) return image . This procedure is a void function that takes in no arguments directly, but does access the database via the Images object imported from the models that we created . The first line filters all database entries and searches for all image entries with the difficulty column set to 0, which we established as the identifying factor for easy images. The .all() method attached to the end of the query serves to return all matching image objects in a list called image. . The procedure finally returns a random image using the random.choice method. . class ImagesAPI: class _EasyImages(Resource): def get(self): image = get_random_easy_image() json_data = {} if image: image_path = project_path + &quot;/&quot; + image.imagePath with open(image_path, &quot;rb&quot;) as image_file: json_data[&quot;bytes&quot;] = str(base64.b64encode(image_file.read()))[2:][:-1] json_data[&quot;xCoord&quot;] = image.xCoord json_data[&quot;yCoord&quot;] = image.yCoord return jsonify(json_data) . If the first procedure locates and selects the image, the second procedure then encodes, formats, and returns the JSON data containing the image and its metadata. . The procedure first calls the get_random_easy_image() procedure created earlier to store our image object and also initializes an empty dictionary to store our json data. . If a valid image object is found, the procedure will attempt to create an absolute path to the image file on the computer running flask application. This is achieved by concatenating the absolute path of the working project directory to the relative image path stored in the database. The aboslute path of the directory is generated in our namespace package (__init__.py) in our _nighthawkguessr_api_ package. The line calculating the project path is shown below, and uses the Path object from the pathlib library. . project_path = Path.cwd().as_posix() . After creating the image path, the procedure attempts to open the image file, and procedes to use the base64.b64encode method to encode the image file bytes into base64 data. This is convinient for us as HTML on the frontend pages allows us to render images with base64 bytes (Not sure about normal image bytes). The base64 bytes are then encoded into a python literal string in order to be jsonified and displayed on the api endpoint. The [2:][:-1] appended to the end is a type of string slicing which removes the b&#39; generated at the start of the data and the &#39; generated at the end of the data. These extraneous characters are used to indicate a base64 string, and are not part of the original data. . The procedure finally appends the metadata (position of the right coordinates on the map) to the json_data dictionary, completing the process. . Finally, the procedure returns the JSONified data, which is accessible from our API. As you can see, the images we process are extremely large and possess high resolution (typically a few megabytes!) . Popcorn Hack: . Please write a few sentences answering the essential question, &quot;What are some methods that we could store and access images in the backend, and how can we send them to a frontend application?&quot; . We can store the image in a database, in a cloud storage and in a file system storage. we can send them to a frontend application by using base64 encoding and urls. | . Endpoints . What are endpoints and how do we use them to transfer data from one part of the internet to another? . Backend: . The backend creates endpoints that are used to edit the properties of the database constructed by the model. | GET, POST, PUT, and DELETE methods are used in order to define HTTP endpoints in the API. These endpoints are based on requests that can be made to change the database. | Variables defined in the model file are used to call data from the database in order to be manipulated. | . | . Methods in Backend Example . Modules are being imported with specified classes which are used later in the program. Blueprint: used to organize the routes and functions | request: used to access data sent to the Flask app. through the HTTP request | Api: creates a Flask instance that handles requests | Resource: this allows for the definition of custom HTTP requests | reqparse: used to parse (sort and search) and validate data that is requested | . | The blueprint and api are then defined as variables and are used to store any future data that is requested. | Some preliminary functions, such as find_by_username, are created to be used later in the API code, allowing for simpler code. In this case, these functions are used to search through the database to find specific usernames. | . | . from flask import Blueprint, request from flask_restful import Api, Resource, reqparse # setting variables used to store future data leaderboard_bp = Blueprint(&quot;leaderboards&quot;, __name__) leaderboard_api = Api(leaderboard_bp) # pre-made function created to search for usernames, allows for simplified program def find_by_username(username): users = Leaderboard.query.filter_by(_username=username).all() return users[0] . GET Method . This method is used to fetch specific data points from the database by searching through the usernames. | This will be different for each type of database being made, however the general format stays the same. Since this is a text database, to pull specific information from the database, the API will search through the data using the username, which is unique. | The function defined previously, find_by_username(), is used to search through the database and pull the specific data point that is being searched. | If the user exists, the data of that user will be returned, being sent to the frontend of the program. | If a user isn&#39;t found, an error will be returned that the user does not exist. | . | In general, the program will always be searching for a piece of information that is unique and that will be used to pull data to wherever it is being requested. | . def get(self): # requested username turned into variable for later use username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) # username used to search for data and the found data is made into a variable user = find_by_username(username) if user: # data is sent to the frontend return user.to_dict() # error checking return {&quot;message&quot;: user}, 404 . POST Method . This method is used to add a specific piece of information in the database based on searching by usernames. | This is again different for each database that is made, however the general structure stays the same. In this example, a parser is being used to extract data from an incoming request. In this case, the RequestParser class is used from the Flask module. All required arguments are added to the parser, specifying what type of data it is. | The args variable is added in order to parse and store all incoming data. | . | The variable leaderboard is created to make a new object that will contain the values from the incoming data. | The function will attempt to add a new entry in the leaderboard database and return a status of a successful addition of the data. | If there is an error in the data being inputted, a status code of 500 will be returned. | . | . def post(self): # using parsers to gather and data that is to be posted and validate it&#39;s true parser = reqparse.RequestParser() parser.add_argument(&quot;username&quot;, required=True, type=str) parser.add_argument(&quot;password&quot;, required=True, type=str) parser.add_argument(&quot;pointsEasy&quot;, required=True, type=int) parser.add_argument(&quot;pointsMedium&quot;, required=True, type=int) parser.add_argument(&quot;pointsHard&quot;, required=True, type=int) # variable made to store data args = parser.parse_args() # variable created to format all data into one place and send to database for logging leaderboard = Leaderboard(args[&quot;username&quot;], args[&quot;password&quot;], args[&quot;pointsEasy&quot;], args[&quot;pointsMedium&quot;], args[&quot;pointsHard&quot;]) try: # data is sent to the database for storage db.session.add(leaderboard) db.session.commit() return leaderboard.to_dict(), 201 except Exception as e: # error checking db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . PUT Method . This method is used to update a specific piece of information in the database based on searching by usernames. | For each data base that is made, there will be different specific but the overall structure stays the same. First, the username variable is defined, which retrieves the requested username and sets it as a variable that will be used later to edit a specific dataset. | The function find_by_username() is again used to search through the data to look for the username requested. This is set to a variable to be used later. | If the username is found in the database, the rest of the dataset is updated with the new values requested. This is updated into the database. | If there is an error found with the data requested of it the user isn&#39;t found, an error is returned. | . | . def put(self): # variable created to make requested username into something that can be used to search for data in future username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # attempts to find the data in the database user = find_by_username(username) if user: # if the data is found, the data points are updates user.pointsEasy = int(request.get_json().get(&quot;pointsEasy&quot;)) user.pointsMedium = int(request.get_json().get(&quot;pointsMedium&quot;)) user.pointsHard = int(request.get_json().get(&quot;pointsHard&quot;)) db.session.commit() return user.to_dict(), 201 else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . DELETE Method . This method is used to delete a specific information from the database, again searching by username. | The overall structure stays the same between different databases, but the specific variables will need to be changed to personalize the database. A variable for the username is created in order to search for for the user name requested later in the code with the function find_by_username(). | If the user is found, the user is deleted, along with that user&#39;s data and the change is saved to the database. | If the user isn&#39;t found or if an error is found with the data requested, an error is returned. | . | . def delete(self): # username variable defined to store requested value username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # finds the username and stores data in variable user = find_by_username(username) if user: # if the user is found, the user and their data is deleted db.session.delete(user) db.session.commit() return user.to_dict() else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # error checking for request error db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Displaying the Full Database . Another class is created in order to display the entire database at once and also to delete the entire database if necessary. | This uses the same functions as before to GET and DELETE the data, however it is modified slightly to look through the entire database abd display or delete all data points. | An example of where this would be useful is to create a table of data in the frontend. | . class LeaderboardListAPI(Resource): # GET method def get(self): try: # attempts to find the entire database requested and is stored in variable leaderboards = db.session.query(Leaderboard).all() # sends back the entire database return [leaderboard.to_dict() for leaderboard in leaderboards] except Exception as e: # error checking for request errors db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 # DELETE method def delete(self): try: # deletes entire database db.session.query(Leaderboard).delete() db.session.commit() return [] except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . What are the four HTTP request methods that are used with Flask? | GET, POST, PUT, DELETE . What is a parser and how would it be aid with data validation? | Parser is an aspect of programming that can extract structured data from unstructured data types such as json. It would aid with data validation by preventing malformed data to break the program . What is the role endpoints in Flask? | An endpoint is a function that can map to a specific URL route. When a user makes an HTTP request to a particular URL, Flask will the request to that url using endpoints. . Frontend and How it Communicates to Backend . This first part of the frontend logic simply finds out of the site is running locally or not, off of which is figures out whether or not to pull data from the local backend link or the global backend link. In this example, a global backend link hasn&#39;t been sent, however it would go in the second set of quotations after the local address. This isn&#39;t something you need to know, but it is nice to use when developing full stack applications. . // checks if site is run locally const isLocalhost = Boolean( window.location.hostname === &quot;localhost&quot; || window.location.hostname === &quot;[::1]&quot; || window.location.hostname.match(/^127(?: .(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) ) // defines database url const api = isLocalhost ? &quot;http://localhost:8200&quot; : &quot;&quot;; . GET Method . This method is more complicated in terms of requesting, simply because in order to, for example, print all data points into a table, the function needs to iterate through the entire database. | In this example, the function getList() is used to asynchronously fetch the entire database and set it to a variable called list. The list is returned for later use outside of this function in order to print the data. | . | . Printing the Data . In order to print the data, the function getList() is run and once it is run, it iterates through the data to pull out each individual data point and enter it into the function used to make the table. For each class in the database, which is each row in the database, the variables corresponding to that specific class are pulled and inserted into the addTask() function as parameters to create the table of users. | . | The function addTask() is used to create the visual table that the user sees. A row is created and for each table cell in that row, the data is added by iterating through the array of variables that are parameters pulled directly from the database. | A new row is added into table for each new class of information pulled from the database. | . | . // fetches entire database const getList = async () =&gt; { // stores it in variable list const list = await fetch(api + &quot;/leaderboardList&quot;).then((r) =&gt; r.json()); return list }; // goes through entire database and pulls each individual class getList().then(list =&gt; { // for each class (row), data is pulled and added into addTask() function to be put in visual table list.forEach(cls =&gt; { addTask(cls.username, cls.pointsEasy, cls.pointsMedium, cls.pointsHard) }) }) // adds visual representation of data in table function addTask(username, pointsEasy, pointsMedium, pointsHard) { // array of variables defining data points var tableCells = [username, pointsEasy, pointsMedium, pointsHard] // creates new row in variable var row = document.createElement(&#39;tr&#39;) // goes through entire data set and places data into cells for (var i = 0; i &lt; tableCells.length; i++) { var tableCell = document.createElement(&#39;th&#39;) tableCell.textContent = tableCells[i] tableCell.className = &#39;cell&#39; row.appendChild(tableCell) } // creates new row as child of schedule element schedule.appendChild(row) } . POST Method . This method is used to push data to the backend using the HTTP POST method. The function addData is defined with the parameters that are going to be pushed into the backend. | An object is created to define the variables that are going to be pushed into the backend. This is basically the JSON string that will be sent to the backend to get decoded and inserted into the database. | The fetch() function is called with the api variable, which is a variable representing the url for the backend API, and the extension specific to where the data will be posted, in this case being /leaderboard. The method, headers, and body of the data are defined in order to complete a successful HTTP request to the backend. The object data which was created earlier, is converted to a JSON string here and sent to the backend. | . | If an error is detected, it is returned and the request will fail. | . | . // calls addData function function addData(username, password, pointsEasy, pointsMedium, pointsHard){ // creates object defining the variables that will be added to the backend, corresponding with the backend variables let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // POST method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . PUT and DELETE Methods . These two methods are almost identical to the POST method above in the way they work, the only difference being that the method requested is different. The name of the function defined is also changes, in this case being editData() and deleteData(). | . // editing function defined function editData(username, password, pointsEasy, pointsMedium, pointsHard){ // has object with variables that are required in backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // PUT method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;PUT&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . // deleting function defined function deleteData(username, password, pointsEasy, pointsMedium, pointsHard){ // object defined with variables that are same as backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // DELETE method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;DELETE&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . Calling Images (GET Method) . The process for calling images is basically the same as anything else, except you need to be able to reconstruct the images based on the base64 that is requested from the backend. | In this case, the image in the api is being called to the frontend and is returned as the variable list. This is then inserted directly into the html by getting the element that needs to be edited and styling with css by using the built-in function data:image/png;base64, which translated from bytes to pixel. | . | . // GET method calling info from backend url const getList = async () =&gt; { const list = await fetch(api + &quot;/api/images/GetEasyImage&quot;).then((r) =&gt; r.json()); return list }; // inserting image into frontend getList().then(list =&gt; { document.getElementsByTagName(&quot;body&quot;)[0].style = &quot;background-image: url(&#39;data:image/png;base64, &quot; + list.bytes +&quot;&#39;);&quot; }) . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . How is data for images stored in a Flask API and how is it displayed on the frontend when requested? | Images are stored in a Flask API as files on a server, in a database as binary data, URLs, or using cloud storage services. When requested, it&#39;s sent ususally with a base64 file. . What is the fetch() function and how is it used in frontend logic? | fetch() allows makes HTTP requests to a server from a frontend application and retrieves data from a server API that is then used in frontend logic. . How is data formatted and sent to the backend? (mention JSON in your answer) | When sending data to the backend in a Flask API, data is converted to JSON, which both frontend and backend can process. . Time and Space Complexity of Algorithms . The lesson for time and space complexity of algorithms will consist of demonstrations of sorting algorithms and the different time complexities that they come with on a small scale. This can be acomplished using things such as a deck of cards or even with actual people. An example of how this will work is laying out the cards in a random order on the table, and demonstrating different ways of sorting it. From methods such as bubble sort to methods such as bogo sort, it will be really easy to see exactly how much time it would take for these different sorting algoritms to complete. Then after that, it is easy to understand the concept of time complexity when given a real world example. . Space complexity can be demonstrated by using the same method, however, adding in the extra step of having the cards in a pile. This will show how much space is needed to complete the sorting algorithm. This will easily reveal the concept of space complexity because it allows people to witness a real world, physical example of the concept, turning a really hard to grasp concept into something that is easy to understand. . Additionally, we are also going to analyze certain algorithms within our project to show how such analysis is applicable to real world projects. . Essential Question: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . QuickSort Algorithm . The main algorithm we&#39;ve employed is an recursive implementation of quickSort in the backend to sort the database entries to obtain the user with the highest overall score. Typically this algorithm is implemented to sort in ascending order, but to make it easier to extract the top 10 users, we sill be modifying the algorithm to sort in descending order (so the top players show up first in the list). . class LeaderboardTop10(Resource): def partition(self, arr, lo, hi): pivot = arr[hi][1] # Pivot value set to the 2nd index of the last element pivot_pos = lo - 1 # Set our base pivot position, ensure that lower picoit index == lo for idx in range(lo, hi): # Iterate over all elements in the partition array if arr[idx][1] &gt;= pivot: # Found an element creater than pivot pivot_pos+=1 # Increment correct position for pivot arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] # Swap the larger element with the element at the current pivot position arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] # Swap element at pivot position with the pivot element return pivot_pos+1 # Return index of pivot element def qSortUserList(self, arr, lo, hi): if lo &lt; hi: last_pivot = self.partition(arr, lo, hi) self.qSortUserList(arr, lo, last_pivot-1) self.qSortUserList(arr, last_pivot+1, hi) def get(self): users_list = get_user_list() top10 = {} self.qSortUserList(users_list, 0, len(users_list)-1) for user in users_list: top10[user[0]] = user[1] print(top10) if len(top10) &lt;= 10: return top10 return top10[:10] . To understand how the algorithm first, we must first familiarize ourselves with the process. . Our backend grabs all users from our leaderboard | Returns all users and their scores in a 2-D array, each element is a list of length two that contains the username and cumulative score of the player | The sorting algorithm will use the second element representing the user score to sort the array of users. ┌─────────────────────┐ ┌──────────────────┐ ┌─────────────────┐ │ │ │ │ │ │ │ │ │ Split │ │ display │ │ Database │ │ the ├──────────────► sorted list │ │ │ │ List into │ │ on endpoint │ │ │ │ top 10 users │ │ │ └──────────┬──────────┘ └─────────▲────────┘ └─────────────────┘ │ │ │ │ │ │ │ │ ┌──────────▼──────────┐ ┌─────────┴────────┐ │ │ │ │ │ 2-D User Array │ │ QuickSort │ │ ├───────────────► │ │ [(username, score)] │ │ Algorithm │ │ │ │ │ └─────────────────────┘ └──────────────────┘ . Our quickSort algorithm consists of 2 procedures, a partition() procedure that pivots and sorts individual elements, and a qSortUserList() that performs recursion which finishes the sorting. | The Logic . The partition procedure will serve to &quot;partition&quot; our list into 2 parts, a smaller portion and a larger portion around a certain pivot value (Note: These portions don&#39;t have to sorted yet!). . Partition procedure . First, partition selects a certain element in a list to be a pivot. This pivot value will be used to make comparisons to every other value in the array. For simplicity, we have selected our pivot element as the last element in the unsorted list. The procedure defines a pivot_pos variable to denote the correct position of the pivot index after each iteration. Although it may seem weird that the variable intially starts with a value of 0-1 = -1, this negative index is resolved by the return statement, which always returns an index that&#39;s one higher than pivot_pos. This serves to ensure that the lowest pivot index would be 0, which is the smallest element in any given partition. . pivot = arr[hi][1] pivot_pos = lo - 1 . The partition will then iterate over each element in the list from the starting and ending indexes indicated by the parameters. if a particular value is found to be larger than the pivot, the algorithm well then increment the recorded pivot position and swap the pivot with the found element. . for idx in range(lo, hi): if arr[idx][1] &gt;= pivot: pivot_pos+=1 arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] . Finally, the partition procedure swaps the element at the pivot_pos+1 index with our pivot element at the hi index to place the pivot at it&#39;s rightful place. We know that pivot_pos+1 must be smaller than hi because it did not trigger the conditional to increment the `pivot_pos+1`` index. At last, the pivot_pos is incremented and returned to serve as an indicator of where our two partitions split. . arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] return pivot_pos+1 . qSort procedure . If the parition procedure splits our list into smaller and larger regions, then our qSort procedure ensures that these regions are in order. It&#39;s hard to explain, but the procedure iterates over each paritition, repeating the paritition process, setting new pivot values, and correctly places the pivot values at their correct sorted order. . The procedure first checks if the lower index is smaller than the higher index, to ensure that our parition has a length greater than 1. If this check passes, the procedure then calls the partition procedure to both split our list into the two distinct regions and also the index of our correctly placed pivot value. The procedure then invokes itself again on the larger interval (replacing hi to be the partition index-1 since the previous pivot is already sorted), and also on the smaller interval (replacing lo to be partition index+1). . Eventually, the qSort procedure will iterate through all elements in the list while parition places each element at the correct position, giving us the final sorted list. . Complexity analysis . To analyze time complexity, we must analyze the partition and qSort procedures. . For the qSort procedure, because we divide the array into 2 halves during each function call, our number of function calls scales proportionally to log(n), where n is the length of the input array. However, within each function call, we also call the partition procedure, which contains an for-loop that iterates over each element in the partioned array, comparing it to a pivot value. We are well familiar with since loops, and can safely say that runtime scales proportionally to the length of the partition array. Due to this, we can conclude that our iteration time complexity scales linearly. Thus for each iterative process, our timerun scales proportionally to n. . Finally, we could multiply our two complexities together to get a representation of our overall complexity. Thus, the asymptotic notation for a time complexity could be represented as O(nlogn), where n is the length of the input array. Keep in mind, Big-Oh notation is not a function that returns the accurate runtime for any given input, but rather only gives us a model to see how runtime scales with increasing input sizes. . Space complexity for this program is much easier to analyze. Because the array is sorted in-place (meaning we don&#39;t create other placeholders or copies), we require no additional space to sort this array. However, recursive function calls may require extra storage on the call stack. Since we found the number of recursive calls to be asymptotic to Olog(n), we can conclude that quickSort has an O(1) space complexity for an iterative method, and an O(logn) space complexity for a recursive method. . Popcorn Hack . Please answer our EQ for this section: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . It&#39;s a sorting algorithm that uses a divide-and-conquer strategy to sort an array of elements. Starting with selecting a pivot&quot; element from the array and dividing or partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot, eventually sorting the whole array. The time complexity of Quicksort is O(nlogn) on average, O(nlogn) at best and O(N^2) at worst, the space Complexity is O(N). | . Hacks - Frontend and Backend . Please clone these two repositories: . Frontend | Backend | . Directions: . You will be creating a full stack of a text and image database which you will code in the Flask Backend and pull information to sort in the Frontend. . You need to have coded a fully working CRUD in the Flask, which you can show working with Postman, however you only need to show the Frontend reading and displaying data from the backend. . You may use the code we showed to you today in class in order to code the both the Frontend and Backend. . Follow the directions in the comments in the Flask Backend and the ReadMe in the frontend before starting. . Hacks - QuickSort . On this notebook, try recreating the original quicksort algorithm from our modified version. For an additional challenge, try abstracting the partitioning process through list comprehension! . After creating a successful algorithm, either create a diagram showing how the algorithm works, or a diagram that illustrates the time and/or space complexity of a recursive approach. . Hacks Helpers . If you need help with your hacks, you can check out our project repos to see how we did it. . Frontend Table | Frontend Image | Backend | . You can also message us on the coding Slack channel for additional help. . Points . Popcorn Hacks - 0.1 pts | Full Stack - 0.4+ 0.05 extra for styling html page | . | QuickSort Hacks - 0.4+ 0.05 extra for implementing quicksort | . | . HACKS ARE DUE SATURDAY (4/29) 11:59 PM . Hacks - Quicksort Hacks .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/04/27/P3M-Lists-Dictionaries.html",
            "relUrl": "/2023/04/27/P3M-Lists-Dictionaries.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "P3-M 4/26 Frontend-Backend Dev w/Big Idea 1",
            "content": "Frontend and Backend Development with Big Idea 1 Review . Please make a copy of our repository. In your terminal type:git clone https://github.com/jiya-sav/ourshiny.git Locate &#39;Final Lesson&#39; in our notebooks folder and make a copy, make sure your name is in the new name. . Link to our fastpages: fastpages . Link to our repository: repository . Hacks and Point Division . Popcorn questions answered within lesson (.2) | Screenshot showing proof that conda is installed (.1) | Create 3 quiz questions to demonstrate the main steps in creating a repository on Github (.1) | Fetch from a third party API, and display json data. Then use the json data in any simple JavaScript function (hint: parse, this makes json data into a JavaScript object) (.4) In your code, comment on how you implemented a 3rd party API. Reflect on how using the 3rd party API helped. | . | Pull request successful completion: (.1) | . Extra: Use fetch() and display data from an API, self-made or third party (.1) .",
            "url": "https://jasoxddd.github.io/FastProject2/student/2023/04/26/P3M-frontend-backend-connection.html",
            "relUrl": "/student/2023/04/26/P3M-frontend-backend-connection.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "P3-M 4/25 Simulations",
            "content": "Objectives . Understand how computers can be used to represent real-world phenomena or outcomes | Compare simulations with real-world contexts. | Implement code to mimic real world situations, problems, or phenomena. | What are simulations by College Board definition? . Simulations are programs that mimic more complex objects or phenomena from the real world Purposes include drawing inferences without the implications of the real world | . | Simulations use varying sets of values to reflect the ___ state of a real phenomenon | Often, when developing a simulation, it is necessary to remove specific details or simplify aspects Simulations can often contain bias based on which details or real-world elements were included/excluded | . | Simulations allow the formulation of ___ under consideration | Variability and __ of the world is considered using random number generators | Examples: rolling dice, spinners, molecular models, analyze chemicals/reactions... | . . Analyzing an Example: Air-Traffic Simulator . Say we want to find out what the optimal number of aircrafts that can be in the air in one area is. | A simulation allows us to explore this question without real world contraints of money, time, safety Unfortunately we can&#39;t just fly 67 planes all at once and see what happens | . | Since the simulation won&#39;t be able to take all variables into control, it may have a bias towards one answer | Will not always have the same result | . Functions we often need (python) . import random # a module that defines a series of functions for generating or manipulating random integers random.choice() #returns a randomly selected element from the specified sequence random.choice(mylist) # returns random value from list random.randint(0,10) #randomly selects an integer from given range; range in this case is from 0 to 10 random.random() #will generate a random float between 0.0 to 1. . Functions we often need (js) . // Math.random(); returns a random number // Math.floor(Math.random() * 10); // Returns a random integer from 0 to 9: . College Board Question 1 . Question: The following code simulates the feeding of 4 fish in an aquarium while the owner is on a 5-day trip: . numFish ← 4 foodPerDay ← 20 foodLeft ← 160 daysStarving ← 0 REPEAT 5 TIMES { foodConsumed ← numFish * foodPerDay foodLeft ← foodLeft - foodConsumed IF (foodLeft &lt; 0) { daysStarving ← daysStarving + 1 } . } . This simulation simplifies a real-world scenario into something that can be modeled in code and executed on a computer. | Summarize how the code works: | . Examples . Card Flip . import random cards = [&quot;Ace&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;Jack&quot;, &quot;Queen&quot;, &quot;King&quot;] suits = [&quot;Diamonds&quot;, &quot;Hearts&quot;, &quot;Spades&quot;, &quot;Clubs&quot;] print(random.choice(cards) + &quot; of &quot; + random.choice(suits)) . Coin Flip . import random def coinflip(): #def function randomflip = random.randint(0, 2) #picks either 0 or 1 randomly if randomflip == 0: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 1: #assigning 1 to be tails--&gt; if 1 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Tails Tails Heads Tails . Your turn: Change the code to make it simulate the flipping of a weighted coin. . Adding images (in Python) . Add a heads and tails images into your images directory with the correct names and run the code below | . import random # importing Image class from PIL package from PIL import Image # creating a object im = Image.open(r&quot;images/head.jpeg&quot;) image = Image.open(r&quot;images/tail.jpeg&quot;) i=random.randint(0,1) if i == 1: print(&quot;heads&quot;) display(im) else: print(&quot;tails&quot;) display(image) . tails . In order to display an image in python, we can use the PIL package we previously learned about. . Spin the Wheel . import random print(&quot;Spin the wheel!&quot;) print(&quot;-&quot;) n = 300 blue = 0 red = 0 r = Image.open(r&quot;images/red.png&quot;) b = Image.open(r&quot;images/blue.png&quot;) for i in range(n): spin = random.randint(1,2) if spin == 1: # head blue = blue + 1 display(b) else: # tail red = red + 1 display(r) print(&#39;Number of blue:&#39;, blue) print(&#39;Number of red:&#39;, red) . Spin the wheel! - . Number of blue: 154 Number of red: 146 . Your turn: Add a visual to the simulation! . Population Growth and Plots . import random totalPopulation = 50 growthFactor = 1.00005 dayCount = 0 #Every 2 months the population is reported while totalPopulation &lt; 1000000: totalPopulation *= growthFactor #Every 56th day, population is reported dayCount += 1 if dayCount == 56: dayCount = 0 print(totalPopulation) . 50.14019267336515 50.28077842644361 50.421758361373264 50.5631335833823 50.704905200797775 50.847074325054315 50.98964207070282 51.13260955541927 51.27597790001347 51.41974822843774 51.563921667795874 51.70849934835185 51.85348240353876 51.99887196996765 52.14466918743647 52.290875198939005 52.43749115067384 52.5845181920533 52.731957475712534 52.87981015751845 53.028077396578915 53.17676035525173 53.325860199153716 53.47537809717 53.62531522146305 53.775672747481956 53.92645185397153 54.0776537229816 54.22927953987637 54.38133049334356 54.533807775403844 54.68671258142016 54.840046110106975 54.993809563539834 55.14800414716474 55.302631069807575 55.45769154368362 55.613186784406984 55.769118011000224 55.92548644590379 56.082293314985726 56.239539847551235 56.39722727635229 56.55535683759732 56.71392977096098 56.87294731959368 57.032410730131446 57.19232125270578 57.35268014095325 57.51348865202554 57.67474804659919 57.83645958888546 57.998624546640265 58.161244191174156 58.324319797362236 58.48785264365415 58.651844012084126 58.81629518828111 58.98120746147867 59.14658212452524 59.312420473894186 59.47872380969402 59.645493435678574 59.81273065925718 59.98043679150499 60.14861314717315 60.31726104469929 60.486381806217665 60.65597675756963 60.82604722831395 60.99659455173736 61.16762006486491 61.33912510847044 61.51111102708713 61.68357916901805 61.85653088634677 62.029967534947765 62.2038904744973 62.3783010684839 62.5532006842192 62.72859069284855 62.9044724693617 63.08084739260377 63.25771684528589 63.43508221399618 63.61294488921051 63.791306265303454 63.9701677405592 64.14953071718247 64.32939660130967 64.50976680301973 64.69064273634523 64.87202581928359 65.05391747380793 65.23631912587847 65.41923220545367 65.6026581465012 65.78659838700955 65.97105436899903 66.1560275385331 66.34151934572994 66.52753124477363 66.71406469392542 66.90112115553534 67.08870209605372 67.27680898604255 67.46544330018713 67.65460651730747 67.84430012037001 68.0345255964992 68.22528443698917 68.41657813731555 68.60840819714687 68.80077612035657 68.99368341503474 69.1871315935 69.38112217231115 69.57565667227935 69.77073661847982 69.96636354026379 70.16253897127073 70.35926444944013 70.55654151702359 70.75437172059699 70.95275661107263 71.15169774371125 71.35119667813444 71.55125497833659 71.75187421269743 71.95305595399414 72.15480177941373 72.35711327056549 72.55999201349321 72.76343959868774 72.96745762109934 73.17204768015053 73.37721137974819 73.58295032829629 73.7892661387086 73.99616042842136 74.20363481940569 74.41169093818056 74.62033041582539 74.82955488799308 75.03936599492248 75.24976538145154 75.46075469703 75.67233559573249 75.88450973627147 76.0972787820101 76.31064440097533 76.52460826587115 76.73917205409133 76.95433744773317 77.17010613360995 77.3864798032648 77.60346015298347 77.82104888380806 78.03924770155005 78.25805831680371 78.47748244495963 78.69752180621806 78.91817812560257 79.13945313297332 79.36134856304064 79.58386615537891 79.80700765444 80.0307748095669 80.2551693750076 80.4801931099287 80.70584777842916 80.93213514955427 81.15905699730956 81.38661510067445 81.6148112436165 81.84364721510522 82.07312480912596 82.30324582469439 82.53401206587023 82.76542534177153 82.99748746658884 83.23020025959946 83.46356554518161 83.69758515282888 83.93226091716447 84.16759467795565 84.40358828012793 84.64024357377998 84.87756241419767 85.11554666186892 85.35419818249822 85.59351884702103 85.83351053161893 86.07417511773376 86.31551449208287 86.55753054667352 86.80022517881795 87.0436002911482 87.28765779163105 87.53239959358282 87.77782761568463 88.02394378199715 88.27075002197599 88.51824827048654 88.7664404678193 89.01532855970511 89.26491449733037 89.51520023735218 89.76618774191397 90.01787897866066 90.27027592075423 90.523380546889 90.77719484130736 91.0317207938151 91.28696039979738 91.54291566023389 91.79958858171481 92.05698117645656 92.31509546231764 92.57393346281405 92.83349720713561 93.0937887301617 93.3548100724771 93.61656328038823 93.8790504059389 94.1422735069267 94.40623464691882 94.67093589526853 94.93637932713133 95.20256702348084 95.46950107112576 95.73718356272572 96.00561659680784 96.2748022777833 96.54474271596374 96.81544002757771 97.08689633478744 97.35911376570533 97.63209445441078 97.90584054096682 98.18035417143682 98.45563749790136 98.73169267847535 99.00852187732455 99.28612726468283 99.56451101686899 99.84367531630399 100.12362235152784 100.4043543172171 100.6858734142017 100.9681818494825 101.25128183624842 101.53517559389384 101.81986534803593 102.1053533305323 102.39164177949827 102.6787329393245 102.96662906069467 103.2553324006029 103.54484522237183 103.83516979566991 104.12630839652952 104.41826330736457 104.7110368169886 105.00463122063279 105.29904881996362 105.59429192310112 105.89036284463707 106.18726390565291 106.48499743373814 106.78356576300845 107.082971234124 107.38321619430786 107.68430299736441 107.9862340036976 108.28901158032987 108.59263810092013 108.89711594578293 109.20244750190679 109.50863516297301 109.81568132937433 110.12358840823391 110.43235881342416 110.74199496558553 111.05249929214574 111.36387422733867 111.67612221222326 111.98924569470296 112.30324712954469 112.61812897839816 112.93389370981537 113.25054379926964 113.56808172917515 113.8865099889064 114.20583107481775 114.52604749026302 114.84716174561511 115.16917635828544 115.49209385274403 115.81591676053907 116.14064762031693 116.46628897784198 116.79284338601637 117.12031340490034 117.4487016017323 117.77801055094855 118.1082428342038 118.43940104039156 118.77148776566392 119.10450561345237 119.43845719448807 119.77334512682211 120.10917203584634 120.44594055431388 120.78365332235961 121.12231298752103 121.46192220475878 121.80248363647786 122.14399995254809 122.48647383032527 122.82990795467218 123.17430501797935 123.51966772018655 123.86599876880385 124.2133008789327 124.56157677328723 124.9108291822157 125.26106084372192 125.61227450348659 125.96447291488887 126.31765883902827 126.67183504474562 127.02700430864537 127.38316941511724 127.74033315635786 128.09849833239275 128.45766775109823 128.81784422822375 129.17903058741356 129.54122966022885 129.9044442861703 130.26867731270008 130.63393159526427 131.00020999731495 131.36751539033335 131.73585065385146 132.1052186754753 132.4756223509073 132.84706458396897 133.21954828662376 133.5930763789997 133.9676517894126 134.3432774543887 134.71995631868808 135.0976913353271 135.47648546560228 135.85634167911294 136.2372629537851 136.61925227589387 137.0023126400879 137.38644704941228 137.77165851533223 138.1579500577565 138.5453247050614 138.93378549411435 139.32333547029742 139.71397768753192 140.10571520830172 140.49855110367753 140.89248845334066 141.2875303456074 141.68367987745353 142.08094015453818 142.47931429122812 142.87880541062242 143.27941664457708 143.6811511337291 144.08401202752148 144.4880024842277 144.89312567097676 145.29938476377774 145.7067829475447 146.11532341612175 146.52500937230818 146.93584402788318 147.34783060363168 147.76097232936925 148.17527244396697 148.59073419537748 149.00736084066034 149.425155646007 149.84412188676714 150.26426284747424 150.6855818218708 151.10808211293462 151.53176703290453 151.9566399033063 152.3827040549788 152.80996282810023 153.23841957221413 153.66807764625565 154.0989404185779 154.5310112669781 154.96429357872486 155.39879075058366 155.83450618884436 156.27144330934723 156.70960553751047 157.14899630835643 157.58961906653877 158.0314772663694 158.47457437184565 158.9189138566775 159.3644992043146 159.81133390797362 160.2594214706658 160.70876540522437 161.1593692343318 161.61123649054784 162.06437071633695 162.51877546409628 162.974454296183 163.43141078494295 163.8896485127385 164.34917107197592 164.8099820651345 165.27208510479406 165.7354838136635 166.20018182460961 166.66618278068484 167.13349033515655 167.60210815153516 168.07203990360307 168.54328927544339 169.01585996146883 169.48975566645098 169.96498010554862 170.44153700433756 170.91943009883965 171.39866313555166 171.87923987147536 172.36116407414633 172.84443952166393 173.3290700027207 173.81505931663224 174.30241127336657 174.7911296935745 175.2812184086196 175.77268126060764 176.26552210241738 176.75974479773012 177.2553532210609 177.75235125778775 178.25074280418306 178.75053176744373 179.2517220657221 179.75431762815606 180.25832239490038 180.7637403171574 181.2705753572083 181.7788314884435 182.2885126953946 182.79962297376505 183.31216633046162 183.8261467836261 184.34156836266627 184.85843510828798 185.3767510725265 185.89652031877856 186.41774692183384 186.94043496790735 187.4645885546712 187.99021179128667 188.51730879843657 189.04588370835765 189.57594066487266 190.107483823423 190.64051735110152 191.1750454266848 191.7110722406662 192.24860199528842 192.78763890457714 193.32818719437287 193.87025110236505 194.41383487812527 194.95894278313986 195.50557909084395 196.05374808665488 196.60345406800522 197.15470134437754 197.707494237337 198.26183708056612 198.8177342198983 199.37519001335195 199.93420883116485 200.49479505582852 201.05695308212188 201.62068731714655 202.18600218036067 202.75290210361413 203.32139153118305 203.8914749198046 204.463156738712 205.03644146966957 205.6113336070078 206.1878376576584 206.76595814119057 207.34569958984486 207.92706654857014 208.51006357505847 209.0946952397809 209.68096612602358 210.26888082992338 210.85844396050425 211.44966013971296 212.0425340024556 212.63707019663403 213.233273383182 213.83114823610165 214.43069944250087 215.03193170262884 215.63484972991407 216.23945825100063 216.84576200578545 217.45376574745524 218.0634742425242 218.6748922708712 219.28802462577698 219.90287611396192 220.5194515556238 221.1377557844757 221.75779364778353 222.37957000640415 223.0030897348239 223.62835772119607 224.25537886737985 224.88415808897844 225.5147003153777 226.14701048978466 226.78109356926657 227.41695452478945 228.0545983412572 228.69403001755072 229.33525456656687 229.97827701525802 230.62310240467164 231.26973578998908 231.91818224056598 232.56844683997173 233.22053468602925 233.87445089085486 234.53020058089874 235.18778889698473 235.84722099435083 236.5085020426895 237.1716372261884 237.83663174357085 238.50349080813663 239.17221964780276 239.84282350514476 240.51530763743727 241.18967731669585 241.8659378297178 242.54409447812415 243.2241525784004 243.90611746193915 244.58999447508114 245.27578897915754 245.96350635053204 246.65315198064286 247.34473127604497 248.0382496584523 248.73371256478077 249.4311254471907 250.13049377312905 250.831823025373 251.53511870207248 252.2403863167937 252.94763139856178 253.6568594919047 254.36807615689625 255.0812869691998 255.79649752011247 256.51371341660814 257.2329402813819 257.95418375289455 258.6774494854154 259.4027431490684 260.1300704298747 260.8594370297992 261.59084866679365 262.32431107484285 263.05983000400795 263.79741122047267 264.53706050658855 265.27878366091994 266.02258649828946 266.76847484982346 267.51645456299826 268.2665315016851 269.01871154619727 269.7730005933353 270.5294045564336 271.2879293654064 272.048580966795 272.81136532381356 273.5762884163963 274.34335624124435 275.112574811873 275.8839501586579 276.65748832888363 277.43319538679 278.2110774136202 278.9911405076685 279.77339078432755 280.55783437613707 281.34447743283164 282.1333261213881 282.92438662607515 283.7176651485011 284.5131679076628 285.310901139994 286.11087109941457 286.91308405737965 287.71754630292827 288.52426414273344 289.3332439011511 290.1444919202694 290.9580145599587 291.7738181979222 292.59190922974483 293.4122940689435 294.234979147018 295.0599709135012 295.8872758360093 296.7169004002931 297.5488511102877 298.3831344881652 299.2197570743844 300.05872542774284 300.9000461254279 301.7437257630681 302.589770954786 303.43818833324764 304.2889845497177 305.14216627410957 305.9977401950374 306.85571301987005 307.71609147478233 308.57888230480876 309.44409227389536 310.3117281649539 311.1817967799137 312.0543049397762 312.9292594846684 313.8066672738949 314.68653518599365 315.5688701187883 316.4536789894435 317.3409687345188 318.23074631002237 319.12301869146626 320.0177928739205 320.9150758720686 321.81487472026214 322.7171964725761 323.62204820286394 324.52943700481296 325.4393699920007 326.3518542979497 327.26689707618374 328.1845055002843 329.1046867639462 330.02744808103495 330.95279668564194 331.88073983214247 332.81128479525165 333.74443887008215 334.6802093722009 335.6186036376864 336.55962902318737 337.5032929059783 338.4496026840188 339.39856577601165 340.3501896214602 341.3044816807274 342.261449435094 343.22110038681643 344.18344205918754 345.1484819965934 346.11622776457364 347.08668694988114 348.05986716054014 349.035776025907 350.01442119673004 350.99581034520844 351.97995116505376 352.9668513715488 353.95651870160964 354.9489609138453 355.94418578861934 356.9422011281091 357.9430147563688 358.94663451939033 359.9530682851643 360.96232394374175 361.97440940729695 362.9893326101884 364.0071015090213 365.0277240827101 366.0512083325411 367.07756228223457 368.1067939780088 369.13891148864167 370.1739229055354 371.21183634277907 372.2526599372127 373.29640184849023 374.34307025914455 375.39267337465117 376.4452194234927 377.50071665722265 378.55917335053124 379.6205978013096 380.6849983307144 381.75238328323405 382.82276102675394 383.8961399526212 384.97252847571133 386.0519350344942 387.1343680910996 388.21983613138366 389.30834766499646 390.39991122544694 391.494535370171 392.59222868059885 393.69299976222095 394.796857244657 395.9038097817225 397.01386605149725 398.1270347563929 399.2433246232216 400.36274440326383 401.4853028723379 402.6110088308677 403.7398711039524 404.87189854143577 406.0071000179748 407.1454844331095 408.287060711334 409.43183780216435 410.5798246802101 411.73103034524416 412.88546382227366 414.0431341616106 415.2040504389423 416.3682217554037 417.5356572376472 418.7063660379155 419.8803573341126 421.0576403298762 422.23822425464937 423.4221183637535 424.60933193846023 425.799874286065 426.9937547399591 428.1909826597033 429.39156743110146 430.5955184662737 431.80284520373044 433.01355710844604 434.22766367193367 435.4451744123189 436.6660988744152 437.89044662979774 439.11822727687934 440.34945044098566 441.5841257744296 442.8222629565879 444.0638716939778 445.308961720331 446.5575427966714 447.8096247113921 449.06521728033084 450.3243303468473 451.58697378190135 452.8531574841283 454.1228913799193 455.3961854234965 456.6730495969924 457.95349391052855 459.2375284022931 460.5251631386193 461.8164082140656 463.11127375149374 464.40976990214904 465.7119068457384 467.01769479051194 468.3271439733419 469.64026465980334 470.95706714425455 472.2775617499174 473.60175882895885 474.92966876257213 476.26130196105726 477.5966688639028 478.93577993986906 480.2786456870687 481.62527663304957 482.9756833348777 484.329876379219 485.6878663824232 487.0496639906063 488.41527987973484 489.78472475570936 491.1580093544477 492.5351444419697 493.9161408144817 495.30100929846105 496.689760750741 498.0824060585959 499.47895613982575 500.8794219428431 502.28381444675813 503.69214466146485 505.1044236277269 506.52066241726544 507.9408721328446 509.36506390835916 510.7932489089215 512.2254383309495 513.6616434022543 515.1018753821286 516.5461455614329 517.9944652626872 519.4468458401576 520.9032986799461 522.363835200079 523.8284668505978 525.2972051136486 526.770061503571 528.2470475669891 529.7281748829021 531.2134550627753 532.7028997506313 534.1965206231389 535.6943293897091 537.1963377925831 538.7025576069253 540.2130006409161 541.7276787358455 543.2466037662027 544.7697876397733 546.2972422977293 547.828979714724 549.3650118989859 550.9053508924134 552.4500087706683 553.9989976432714 555.5523296536958 557.1100169794631 558.67207183224 560.2385064579324 561.8093331367805 563.3845641834594 564.9642119471699 566.54828881174 568.1368071957193 569.7297795524775 571.3272183703012 572.929136172493 574.5355455174692 576.1464589988572 577.7618892455956 579.3818489220322 581.0063507280242 582.6354073990381 584.2690317062466 585.9072364566338 587.5500344930905 589.1974386945177 590.8494619759274 592.5061172885423 594.1674176199 595.8333759939517 597.5040054711668 599.1793191486345 600.8593301601647 602.5440516763953 604.2334969048909 605.927679090248 607.6266115142 609.3303074957197 611.0387803911243 612.7520435941806 614.4701105362091 616.1929946861893 617.9207095508675 619.6532686748599 621.3906856407593 623.132974069243 624.8801476191777 626.6322199877284 628.3892049104649 630.1511161614686 631.9179675534425 633.6897729378182 635.4665462048637 637.248301283795 639.035052142882 640.8268127895609 642.6235972705416 644.425419671919 646.2322941192846 648.0442347778338 649.8612558524812 651.683371587969 653.510596268979 655.3429442202466 657.1804298066711 659.0230674334283 660.8708715460835 662.7238566307075 664.5820372139859 666.4454278633357 668.3140431870181 670.1878978342551 672.067006495342 673.9513839017637 675.8410448263103 677.7360040831921 679.6362765281566 681.5418770586045 683.4528206137071 685.3691221745227 687.2907967641139 689.2178594476659 691.150325332605 693.0882095687164 695.0315273482627 696.9802939061026 698.9345245198126 700.8942345098052 702.8594392394482 704.8301541151864 706.8063945866619 708.7881761468354 710.7755143321076 712.7684247224413 714.7669229414836 716.7710246566857 718.7807455794315 720.7961014651545 722.8171081134661 724.843781368276 726.8761371179183 728.9141912952758 730.9579598779051 733.0074588881613 735.0627043933235 737.1237125057212 739.1904993828613 741.2630812275531 743.3414742880366 745.4256948581091 747.5157592772539 749.6116839307671 751.7134852498872 753.8211797119232 755.9347838403846 758.0543142051102 760.1797874223978 762.3112201551356 764.4486291129311 766.5920310522441 768.7414427765165 770.8968811363039 773.0583630294111 775.2259054010183 777.3995252438195 779.5792395981537 781.765065552138 783.9570202418024 786.1551208512234 788.3593846126597 790.5698288066865 792.7864707623309 795.0093278572086 797.2384175176593 799.4737572188831 801.7153644850787 803.9632568895797 806.2174520549937 808.4779676533383 810.7448214061807 813.0180310847782 815.2976145102144 817.5835895535421 819.8759741359219 822.1747862287616 824.480043853858 826.7917650835394 829.109968040806 831.4346708994727 833.7658918843098 836.1036492711884 838.447961387222 840.7988466109101 843.1563233722843 845.5204101530497 847.8911254867327 850.268487958824 852.6525162069256 855.043228920897 857.4406448430004 859.8447827680498 862.2556615435561 864.6733000698766 867.0977173003621 869.5289322415053 871.9669639530903 874.4118315483431 876.8635541940805 879.322151110859 881.7876415731274 884.2600449093766 886.7393805022928 889.2256677889077 891.7189262607517 894.2191754640077 896.7264349996603 899.2407245236565 901.7620637470516 904.2904724361706 906.8259704127589 909.3685775541408 911.9183137933724 914.4751991193983 917.0392535772118 919.6104972680068 922.18895034934 924.7746330352851 927.3675655965947 929.9677683608575 932.5752617126558 935.1900660937296 937.8122020031334 940.4416899973988 943.0785506906938 945.7228047549867 948.3744729202062 951.0335759744047 953.7001347639222 956.3741701935471 959.0557032266831 961.7447548855114 964.4413462511574 967.1454984638538 969.8572327231082 972.5765702878673 975.3035324766865 978.038140667894 980.78041629976 983.5303808706647 986.2880559392662 989.0534631246705 991.8266241066004 994.6075606255647 997.3962944830304 1000.1928475415913 1002.997241725142 1005.8094990190481 1008.6296414703187 1011.4576911877793 1014.2936703422463 1017.1376011666987 1019.9895059564535 1022.8494070693422 1025.7173269258824 1028.593288009456 1031.4773128664845 1034.3694241066091 1037.2696444028618 1040.1779964918474 1043.0945031739234 1046.0191873133717 1048.9520718385857 1051.8931797422445 1054.8425340814974 1057.8001579781408 1060.766074618801 1063.7403072551176 1066.7228792039236 1069.7138138474302 1072.713134633408 1075.7208650753705 1078.7370287527624 1081.7616493111384 1084.7947504623544 1087.8363559847496 1090.8864897233352 1093.9451755899797 1097.012437563597 1100.0882996903342 1103.1727860837598 1106.265920925055 1109.3677284632 1112.4782330151652 1115.5974589661037 1118.72543076954 1121.8621729475624 1125.007710091017 1128.162066859697 1131.3252679825403 1134.4973382578196 1137.67830255334 1140.8681858066293 1144.0670130251392 1147.274809286437 1150.4915997384037 1153.7174095994335 1156.9522641586254 1160.19618877599 1163.4492088826412 1166.711349980997 1169.9826376449819 1173.2630975202271 1176.5527553242666 1179.851636846747 1183.159767949622 1186.477174567361 1189.803882707147 1193.1399184490854 1196.4853079464058 1199.8400774256686 1203.204253186967 1206.5778616041396 1209.9609291249694 1213.3534822713975 1216.7555476397283 1220.1671519008369 1223.5883218003826 1227.0190841590133 1230.4594658725784 1233.9094939123402 1237.3691953251844 1240.8385972338292 1244.3177268370462 1247.806611409865 1251.3052783037892 1254.8137549470152 1258.332068844643 1261.860247578891 1265.3983188093162 1268.9463102730283 1272.5042497849086 1276.0721652378256 1279.6500846028562 1283.2380359295046 1286.8360473459204 1290.4441470591216 1294.062363355214 1297.6907245996133 1301.3292592372682 1304.9779957928836 1308.6369628711413 1312.3061891569278 1315.985703415559 1319.675534493001 1323.3757113161043 1327.0862628928226 1330.8072183124439 1334.5386067458198 1338.2804574455934 1342.0327997464256 1345.795663065229 1349.5690769013959 1353.3530708370308 1357.1476745371817 1360.9529177500744 1364.7688303073437 1368.5954421242673 1372.4327832000029 1376.2808836178187 1380.1397735453336 1384.009483234751 1387.8900430230988 1391.7814833324644 1395.6838346702334 1399.597127629332 1403.5213928884618 1407.4566612123456 1411.402963451964 1415.3603305448 1419.3287935150804 1423.30838347402 1427.2991316200666 1431.3010692391372 1435.314227704878 1439.3386384788973 1443.3743331110186 1447.421343239528 1451.4797005914186 1455.5494369826426 1459.630584318357 1463.7231745931795 1467.827239891434 1471.9428123874047 1476.0699243455883 1480.2086081209457 1484.358896159157 1488.5208209968748 1492.6944152619792 1496.8797116738351 1501.0767430435467 1505.2855422742173 1509.5061423612026 1513.7385763923764 1517.9828775483838 1522.239079102904 1526.5072144229102 1530.7873169689335 1535.0794202953196 1539.3835580505 1543.6997639772487 1548.0280719129503 1552.3685157898653 1556.721129635394 1561.0859475723455 1565.4630038192042 1569.852332690397 1574.2539685965653 1578.6679460448295 1583.0942996390663 1587.5330640801772 1591.9842741663558 1596.4479647933679 1600.9241709548232 1605.4129277424438 1609.914270346347 1614.4282340553175 1618.954854257085 1623.4941664386008 1628.046206186315 1632.6110091864593 1637.1886112253233 1641.7790481895356 1646.3823560663461 1650.998570943908 1655.627729011561 1660.269866560112 1664.9250199821258 1669.5932257722009 1674.2745205272677 1678.9689409468642 1683.6765238334306 1688.397306092596 1693.1313247334679 1697.87861686892 1702.6392197158866 1707.4131705956536 1712.2005069341462 1717.0012662622305 1721.8154862160025 1726.6432045370846 1731.4844590729206 1736.3392877770732 1741.2077287095196 1746.0898200369559 1750.9856000330892 1755.8951070789394 1760.8183796631415 1765.7554563822503 1770.7063759410364 1775.6711771527937 1780.6498989396432 1785.6425803328375 1790.649260473067 1795.669978610768 1800.7047741064275 1805.7536864308945 1810.8167551656884 1815.8940200033098 1820.98552074755 1826.091297313806 1831.2113897293902 1836.3458381338476 1841.494682779266 1846.6579640305958 1851.8357223659652 1857.027998376996 1862.234832769123 1867.4562663619147 1872.6923400893893 1877.9430950003407 1883.2085722586542 1888.488813143636 1893.7838590503316 1899.0937514898524 1904.4185320897002 1909.7582425940957 1915.1129248643033 1920.48262087896 1925.8673727344062 1931.2672226450122 1936.6822129435136 1942.1123860813389 1947.557784628944 1953.018451276148 1958.4944288324652 1963.9857602274396 1969.4924885109876 1975.0146568537257 1980.5523085473183 1986.1054870048138 1991.6742357609814 1997.2585984726568 2002.8586189190848 2008.474341002258 2014.1058087472647 2019.7530663026355 2025.4161579406841 2031.0951280578568 2036.790021175084 2042.5008819381235 2048.2277551179145 2053.9706856109283 2059.7297184395165 2065.5048987522687 2071.2962718243652 2077.10388305793 2082.927777982389 2088.768002254826 2094.62460166034 2100.497622112403 2106.387109653224 2112.2931104541053 2118.2156708158113 2124.1548371689237 2130.110656074209 2136.08317422298 2142.072438437472 2148.0784956711996 2154.101393009326 2160.141177669036 2166.197896999907 2172.2715984842735 2178.3623297376075 2184.4701385088824 2190.595072680959 2196.7371802709526 2202.8965094306072 2209.0731084466843 2215.267025741327 2221.478309872454 2227.707009534127 2233.9531735569444 2240.216850908413 2246.498090693343 2252.7969421542234 2259.113454671611 2265.4476777645227 2271.799661090817 2278.1694544475836 2284.5571077715394 2290.9626711394167 2297.386194768352 2303.8277290162882 2310.2873243823597 2316.765031507295 2323.260901173812 2329.7749843070155 2336.307331974802 2342.8579953882436 2349.4270259020104 2356.0144750147606 2362.620394369546 2369.2448357542207 2375.8878511018397 2382.5494924910736 2389.229812146615 2395.928862439586 2402.6466958879478 2409.3833651569153 2416.138923059372 2422.913422556278 2429.7069167570858 2436.519458920164 2443.3511024532077 2450.2019009136575 2457.071908009127 2463.9611775978096 2470.8697636889137 2477.7977204430854 2484.745102172822 2491.7119633429115 2498.6983585708495 2505.7043426272726 2512.729970436385 2519.7752970763886 2526.840377779921 2533.9252679344804 2541.0300230828643 2548.154698923603 2555.2993513114034 2562.464036257574 2569.6488099304725 2576.8537286559476 2584.0788489177717 2591.3242273580936 2598.5899207778775 2605.875986137348 2613.18248055644 2620.509461315242 2627.856985854449 2635.225111775813 2642.613896842587 2650.023398979991 2657.4536762756543 2664.9047869800756 2672.3767895070823 2679.869742434282 2687.3837045035248 2694.9187346213707 2702.4748918595383 2710.052235455376 2717.6508248123273 2725.270719500395 2732.911979256605 2740.5746639854788 2748.2588337594957 2755.9645488195774 2763.691869575548 2771.440856606614 2779.2115706618342 2787.004072660602 2794.818423693118 2802.6546850208742 2810.5129180771223 2818.3931844673725 2826.295545969864 2834.220064536054 2842.1668022911017 2850.135821534359 2858.1271847398516 2866.1409545567767 2874.177193809989 2882.235965500495 2890.3173328059465 2898.421359081141 2906.5481078585035 2914.6976428486055 2922.870027940646 2931.065327202962 2939.2836048835306 2947.5249254104688 2955.7893533925417 2964.0769536196685 2972.387791063426 2980.721930877568 2989.0794383985253 2997.4603791459226 3005.864818823096 3014.292823317596 3022.7444587017208 3031.219791233022 3039.7188873548275 3048.2418136967613 3056.788637075271 3065.359424494145 3073.954243145041 3082.5731604080124 3091.2162438520363 3099.883561235543 3108.5751805069476 3117.291169805183 3126.031597460233 3134.7965319936707 3143.58604211919 3152.4001967431504 3161.239064965114 3170.1027160783874 3178.9912195705706 3187.904645124089 3196.8430626167533 3205.806542122294 3214.7951539109254 3223.808968449886 3232.848056403997 3241.912488636209 3251.0023362081643 3260.117670380751 3269.258562614663 3278.4250845709594 3287.6173081116276 3296.8353053001415 3306.079148402034 3315.348909885458 3324.64466242176 3333.9664788860414 3343.314432357736 3352.6885961211856 3362.089043666206 3371.5158486886708 3380.969085091084 3390.44882698316 3399.9551486824093 3409.4881247147155 3419.0478298149255 3428.6343389274266 3438.2477272067417 3447.8880700181153 3457.555442938107 3467.24992175518 3476.971582470297 3486.72050129752 3496.496754664598 3506.3004192135777 3516.1315718013943 3525.9902895004807 3535.876649599374 3545.7907296033077 3555.732607234836 3565.702360434434 3575.700067361107 3585.72580639301 3595.779656128063 3605.8616953845535 3615.9720032017713 3626.1106588406183 3636.2777417842303 3646.473331738607 3656.6975086332295 3666.950352621687 3677.2319440823126 3687.542363618804 3697.881692060861 3708.2500104648216 3718.647400114288 3729.073942520775 3739.5297194243394 3750.0148127942307 3760.5293048295225 3771.0732779597624 3781.646814845622 3792.2499983795406 3802.882911686374 3813.545638124051 3824.2382612842225 3834.960864992917 3845.7135333111987 3856.496350535827 3867.309401199917 3878.152770073603 3889.026542164703 3899.930802719383 3910.8656372228284 3921.8311313999093 3932.827371215862 3943.854442876949 3954.9124328311464 3966.001427768817 3977.121514623394 3988.2727805720547 3999.4553130364106 4010.66919968319 4021.9145284249266 4033.1913874206466 4044.4998650765597 4055.8400500467615 4067.2120312339102 4078.615897789941 4090.0517391167546 4101.519644866924 4113.019704944393 4124.552009505185 4136.1166489581055 4147.713713965455 4159.343295443735 4171.0054845643635 4182.700372754399 4194.428051697235 4206.1886133333355 4217.98214986096 4229.808753736866 4241.668517677058 4253.561534657497 4265.487897914835 4277.447700947141 4289.44103751465 4301.468001640473 4313.528687611365 4325.623189978435 4337.751603557903 4349.914023431835 4362.110544948903 4374.341263725114 4386.606275644572 4398.9056768602295 4411.239563794634 4423.608033140682 4436.011181862393 4448.449107195653 4460.921906648981 4473.429678004307 4485.972519317711 4498.550528920226 4511.163805418573 4523.812447695967 4536.496554912866 4549.216226507765 4561.971562197969 4574.762661980377 4587.5896261322605 4600.452555212054 4613.35155006015 4626.286711799668 4639.258141837285 4652.2659418639905 4665.310213855898 4678.3910600750605 4691.508583070249 4704.662885677772 4717.854071022268 4731.082242517532 4744.347503867308 4757.649959066115 4770.989712400055 4784.366868447634 4797.781532080579 4811.233808464663 4824.723803060533 4838.2516216245185 4851.817370209497 4865.421155165681 4879.063083141484 4892.743261084339 4906.461796241551 4920.218796161127 4934.014368692631 4947.848621988012 4961.721664502462 4975.633604995265 4989.584552530659 5003.574616478672 5017.603906515994 5031.672532626831 5045.780605103768 5059.928234548637 5074.115531873383 5088.342608300921 5102.6095753660275 5116.916544916215 5131.263629112576 5145.650940430707 5160.078591661562 5174.546695912347 5189.055366607397 5203.604717489087 5218.194862618691 5232.8259163773055 5247.497993466735 5262.21120891038 5276.96567805416 5291.761516567408 5306.598840443774 5321.477766002141 5336.398409887517 5351.360889071992 5366.365320855602 5381.411822867294 5396.500513065824 5411.631509740684 5426.804931513036 5442.020897336635 5457.279526498765 5472.580938621181 5487.92525366103 5503.312591911805 5518.743074004288 5534.216820907487 5549.733953929595 5565.294594718928 5580.898865264893 5596.546887898931 5612.238785295491 5627.974680472969 5643.754696794706 5659.5789579699185 5675.447588054695 5691.360711452955 5707.318452917434 5723.320937550645 5739.368290805884 5755.460638488189 5771.598106755335 5787.780822118838 5804.008911444924 5820.282501955534 5836.6017212293245 5852.96669720266 5869.377558170623 5885.8344327880095 5902.3374500703485 5918.88673939492 5935.482430501744 5952.1246534946185 5968.813538842137 5985.549217378703 6002.331820305559 6019.161479191824 6036.038325975507 6052.962492964565 6069.93411283792 6086.9533186465005 6104.020243814296 6121.1350221394005 6138.297787795051 6155.508675330697 6172.767819673035 6190.075356127078 6207.431420377218 6224.836148488286 6242.289676906619 6259.792142461123 6277.343682364355 6294.944434213602 6312.5945359919515 6330.294126069369 6348.043343203796 6365.842326542226 6383.691215621802 6401.590150370915 6419.539271110285 6437.538718554073 6455.588633810987 6473.689158385381 6491.840434178356 6510.0426034889015 6528.295809014979 6546.6001938546615 6564.9559015072455 6583.363075874375 6601.8218612611745 6620.33240237739 6638.894844338494 6657.509332666849 6676.176013292847 6694.895032556041 6713.6665372063 6732.490674404961 6751.367591725978 6770.2974371570745 6789.280359100919 6808.316506376276 6827.406028219176 6846.549074284085 6865.745794645072 6884.996339797004 6904.30086065671 6923.659508564162 6943.072435283672 6962.5397930050785 6982.061734344933 7001.6384123476955 7021.2699804869535 7040.956592666612 7060.69840322209 7080.495566921541 7100.3482389670735 7120.256574995957 7140.220731081844 7160.240863735994 7180.317129908501 7200.449686989531 7220.638692810538 7240.884305645517 7261.186684212238 7281.545987673499 7301.962375638361 7322.436008163409 7342.967045754 7363.555649365525 7384.201980404679 7404.9062007306975 7425.668472656669 7446.48895895077 7467.367822837556 7488.305227999243 7509.30133857699 7530.3563191721805 7551.470334847718 7572.643551129314 7593.876134006792 7615.168249935395 7636.520065837067 7657.931749101792 7679.403467588876 7700.935389628291 7722.527684021976 7744.180520045161 7765.894067447705 7787.668496455423 7809.503977771416 7831.400682577403 7853.358782535088 7875.378449787473 7897.45985696023 7919.603177163052 7941.8085839910045 7964.076251525881 7986.406354337586 8008.799067485481 8031.2545665197795 8053.773027482905 8076.35462691088 8098.999541834712 8121.7079497817695 8144.480028777185 8167.315957345251 8190.215914510809 8213.180079800673 8236.208633245005 8259.301755378752 8282.459627243066 8305.682430386705 8328.97034686746 8352.32355925358 8375.742250625224 8399.226604575875 8422.776805213774 8446.39303716339 8470.075485566833 8493.824336085363 8517.639774900756 8541.521988716842 8565.471164760947 8589.487490785343 8613.571155068736 8637.722346417731 8661.941254168336 8686.228068187407 8710.582978874178 8735.006177161724 8759.497854518471 8784.058202949695 8808.687414999027 8833.385683749955 8858.153202827356 8882.990166399006 8907.89676917708 8932.873206419712 8957.919673932507 8983.036368070083 9008.223485737602 9033.48122439233 9058.809782045157 9084.209357262174 9109.68014916624 9135.222357438493 9160.83618231998 9186.521824613172 9212.279485683572 9238.109367461268 9264.011672442542 9289.98660369146 9316.034364841416 9342.155160096785 9368.3491942345 9394.616672605656 9420.957801137121 9447.37278633315 9473.861835277012 9500.4251556326 9527.062955646074 9553.775444147474 9580.562830552373 9607.425324863525 9634.36313767249 9661.376480161309 9688.465564104126 9715.630601868876 9742.871806418956 9770.18939131487 9797.58357071591 9825.054559381846 9852.602572674603 9880.227826559947 9907.930537609192 9935.710923000863 9963.56920052244 9991.505588572038 10019.520306160137 10047.61357291127 10075.785609065802 10104.036635481578 10132.366873635718 10160.77654562635 10189.265874174285 10217.835082624859 10246.484394949606 10275.214035748051 10304.02423024947 10332.915204314626 10361.887184437588 10390.940397747478 10420.075072010231 10449.29143563044 10478.589717653093 10507.97014776538 10537.43295629851 10566.97837422949 10596.606633182986 10626.317965433082 10656.112603905123 10685.990782177549 10715.952734483722 10745.998695713759 10776.128901416365 10806.3435878007 10836.642991738217 10867.027350764529 10897.496903081234 10928.051887557856 10958.692543733647 10989.419111819494 11020.23183269981 11051.130947934409 11082.116699760392 11113.189331094074 11144.34908553285 11175.59620735715 11206.93094153232 11238.353533710557 11269.86423023283 11301.463278130794 11333.150925128773 11364.927419645666 11396.793010796877 11428.747948396333 11460.792482958372 11492.926865699748 11525.151348541596 11557.46618411139 11589.87162574494 11622.367927488373 11654.955344100124 11687.634131052937 11720.404544535857 11753.266841456236 11786.221279441796 11819.268116842544 11852.40761273293 11885.640026913768 11918.96561991434 11952.384652994398 11985.897388146232 12019.504088096717 12053.205016309383 12087.000436986476 12120.890615071014 12154.875816248874 12188.956306950895 12223.132354354939 12257.404226387998 12291.772191728285 12326.236519807353 12360.797480812207 12395.455345687413 12430.210386137214 12465.062874627687 12500.013084388856 12535.06128941685 12570.207764476028 12605.452785101168 12640.796627599599 12676.239569053365 12711.781887321411 12747.423861041776 12783.165769633737 12819.007893300022 12854.950513029034 12890.993910596992 12927.1383685702 12963.384170307221 12999.731599961113 13036.180942481667 13072.732483617634 13109.386509918946 13146.143308738998 13183.003168236863 13219.966377379586 13257.033225944426 13294.204004521134 13331.47900451424 13368.858518145322 13406.342838455306 13443.932259306757 13481.627075386199 13519.427582206408 13557.334076108727 13595.346854265405 13633.466214681926 13671.692456199313 13710.025878496523 13748.466782092759 13787.015468349828 13825.672239474517 13864.43739852095 13903.31124939299 13942.294096846595 13981.38624649219 14020.58800479711 14059.899679087981 14099.32157755312 14138.854009244955 14178.497284082458 14218.251712853578 14258.117607217644 14298.095279707852 14338.185043733687 14378.387213583392 14418.702104426424 14459.130032315934 14499.671314191228 14540.326267880266 14581.095212102171 14621.978466469702 14662.976351491736 14704.089188575843 14745.31730003076 14786.661009068928 14828.120639809036 14869.69651727855 14911.388967416255 14953.198317074834 14995.124894023433 15037.169026950174 15079.331045464807 15121.61128010124 15164.010062320154 15206.527724511605 15249.16459999761 15291.921023034782 15334.797328816943 15377.793853477724 15420.910934093265 15464.148908684783 15507.50811622128 15550.98889662217 15594.59159075995 15638.316540462863 15682.164088517615 15726.134578672025 15770.228355637704 15814.445765092809 15858.787153684734 15903.252869032805 15947.84325973103 15992.558675350827 16037.399466443749 16082.36598454425 16127.458582172447 16172.677612836847 16218.023431037162 16263.496392267074 16309.096853017 16354.8251707769 16400.681704039107 16446.666812301115 16492.780856068344 16539.024196857114 16585.397197197275 16631.90022063524 16678.533631736693 16725.297796089555 16772.1930803068 16819.219852029277 16866.378479928706 16913.669333710503 16961.092784116623 17008.64920292861 17056.338962970367 17104.162438111183 17152.12000326859 17200.21203441135 17248.43890856237 17296.801003801695 17345.298699269442 17393.93237516878 17442.70241276891 17491.609194408087 17540.653103496534 17589.834524519538 17639.15384304039 17688.611445703493 17738.2077202373 17787.943055457417 17837.817841269636 17887.832468672987 17937.987329762804 17988.28281773379 18038.71932688313 18089.297252613527 18140.01699143633 18190.87894097468 18241.883499966614 18293.031068268134 18344.322046856374 18395.75683783277 18447.335844426172 18499.059470996053 18550.928123035646 18602.942207175103 18655.102131184736 18707.40830397814 18759.86113561549 18812.461037306708 18865.208421414656 18918.10370145843 18971.14729211657 19024.339609230276 19077.681069806746 19131.17209202242 19184.813095226207 19238.604499942798 19292.546727876022 19346.64020191207 19400.885346122865 19455.282585769335 19509.832347304797 19564.535058378282 19619.3911478379 19674.401045734136 19729.565183323324 19784.883993070966 19840.357908655118 19895.98736496984 19951.7727981285 20007.71464546736 20063.813345548846 20120.069338165074 20176.48306434126 20233.05496633917 20289.785487660654 20346.675073051065 20403.724168502722 20460.93322125846 20518.30267981514 20575.832993927113 20633.52461460977 20691.37799414313 20749.393586075294 20807.571845226033 20865.91322769042 20924.418190842327 20983.087193338 21041.92069511976 21100.919157419474 21160.083042762275 21219.41281497014 21278.90893916553 21338.571881775024 21398.40211053303 21458.400094485387 21518.566303993073 21578.90121073591 21639.4052877162 21700.07900926254 21760.922851033403 21821.937290020993 21883.122804554878 21944.479874305835 22006.00898028956 22067.710604870445 22129.58523176535 22191.63334604741 22253.85543414983 22316.25198386972 22378.82348437189 22441.570426192702 22504.49330124391 22567.592602816487 22630.86882558457 22694.322465609268 22757.95402034256 22821.76398863121 22885.7528707207 22949.921168259094 23014.269384301042 23078.798023311654 23143.5075911705 23208.398595175524 23273.47154404715 23338.726947932104 23404.16531840751 23469.78716848485 23535.59301261406 23601.583366687497 23667.758748044023 23734.11967547302 23800.666669218463 23867.40025098306 23934.320943932275 24001.429272698453 24068.725763384937 24136.210943570157 24203.885342311834 24271.749490151058 24339.80391911651 24408.0491627286 24476.485756003618 24545.114235457975 24613.935139112404 24682.949006496165 24752.15637865128 24821.557798136786 24891.15380903293 24960.944956945557 25030.931789010236 25101.114853896677 25171.494701812946 25242.071884509805 25312.8469552851 25383.820468987986 25454.992982023334 25526.36505235615 25597.937239515843 25669.71010460067 25741.6842102821 25813.86012080931 25886.238402013518 25958.819621312425 26031.604347714732 26104.593151824527 26177.78660584579 26251.185283586892 26324.789760465083 26398.600613510982 26472.618421373103 26546.843764322453 26621.277224256988 26695.919384706245 26770.770830835885 26845.832149452275 26921.103929007153 26996.586759602116 27072.281232993377 27148.1879425963 27224.307483490138 27300.64045242265 27377.187447814747 27453.94906976529 27530.925920055706 27608.118602154707 27685.527721223065 27763.153884118317 27840.99769939956 27919.059777332175 27997.340729892676 28075.84117077343 28154.56171538754 28233.50298087361 28312.665586100633 28392.0501516728 28471.657299934395 28551.487654974666 28631.54184263272 28711.820490502414 28792.324227937286 28873.053686055493 28954.009497744766 29035.192297667323 29116.602722264943 29198.241409763847 29280.109000179757 29362.206135322907 29444.53345880309 29527.09161603466 29609.88125424164 29692.903022462768 29776.15757155657 29859.645554206538 29943.367624926133 30027.324440064 30111.516657809098 30195.944938195822 30280.609943109266 30365.51233629029 30450.65278334083 30536.03195172904 30621.650510794578 30707.509131753803 30793.6084877051 30879.949253634113 30966.532106419036 31053.357724835954 31140.42678956413 31227.73998319134 31315.29799021924 31403.101497068747 31491.15119208535 31579.44776554463 31667.991909657576 31756.784318575985 31845.825688398 31935.116717173525 32024.65810490969 32114.450553576324 32204.494767111486 32294.791451426972 32385.34131441387 32476.14506594807 32567.20341789585 32658.517084119474 32750.086780482747 32841.913224856646 32933.99713712501 33026.33923919005 33118.940254978166 33211.80091044549 33304.92193358361 33398.30405442534 33491.94800505036 33585.85451959108 33680.02433423814 33774.458187246535 33869.156818941105 33964.120971722485 34059.351390072945 34154.848820562096 34250.61401185283 34346.64771470722 34442.95068199233 34539.52366868615 34636.367431883606 34733.48273080225 34830.870326788514 34928.53098332341 35026.4654660288 35124.674542673085 35223.15898317745 35321.91955962177 35420.95704625078 35520.27221948007 35619.86585790221 35719.73874229275 35819.89165561646 35920.32538303349 36021.040711905356 36122.038431801295 36223.31933450437 36324.88421401764 36426.73386657051 36528.869090624816 36631.290686881206 36733.99945828543 36836.996210034464 36940.281749582944 37043.85688664964 37147.72243322354 37251.87920357034 37356.32801423879 37461.069684067195 37566.10503418976 37671.434888042924 37777.06007137204 37882.98141223767 37989.19974102213 38095.71589043604 38202.53069552484 38309.64499367523 38417.05962462189 38524.775430453985 38632.79325562173 38741.113946943085 38849.73835361041 38958.667327197014 39067.901721663875 39177.44239336639 39287.29020106109 39397.44600591226 39507.91067149881 39618.68506382099 39729.77005130717 39841.16650482067 39952.87529766659 40064.89730559867 40177.233406826104 40289.88448202046 40402.85141432258 40516.13508934957 40629.73639520154 40743.6562224688 40857.89546423877 40972.45501610288 41087.335776163716 41202.53864504192 41318.0645258835 41433.914324366604 41550.088948708915 41666.589309674484 41783.41632058108 41900.570897307254 42018.05395829962 42135.86642457995 42254.00921975231 42372.483270010554 42491.28950414538 42610.428853551755 42729.90225223603 42849.71063682347 42969.85494656547 43090.33612334691 43211.15511169357 43332.312858779645 43453.810314434966 43575.64843115258 43697.82816409623 43820.35047110771 43943.216312714554 44066.426652137416 44189.982455297664 44313.88469082499 44438.134330065004 44562.73234708684 44687.67971869069 44812.977424415665 44938.62644654729 45064.627770125255 45190.982382951224 45317.691275596495 45444.75544140974 45572.17587652487 45699.95357986879 45828.08955316927 45956.58480096279 46085.44033060237 46214.65715226551 46344.23627896206 46474.17872654232 46604.485513704785 46735.157662004254 46866.19619585981 46997.60214256288 47129.376532285234 47261.520398087094 47394.03477592526 47526.92070466121 47660.17922606921 47793.81138484449 47927.81822861151 48062.20080793206 48196.96017631356 48332.097390217365 48467.613509066956 48603.50959525622 48739.786714157985 48876.445934132076 49013.488326533945 49150.914965722906 49288.72692907066 49426.92529696967 49565.5111528417 49704.485583146205 49843.84967738901 49983.604528130665 50123.75123099515 50264.29088467839 50405.22459095692 50546.55345469647 50688.27858386062 50830.401089519575 50972.9220858588 51115.84269018777 51259.16402294875 51402.887207725544 51547.01337125228 51691.543643422374 51836.47915729722 51981.82104911514 52127.5704583004 52273.72852747194 52420.29640245249 52567.27523227755 52714.66616920421 52862.470368720424 53010.68898955391 53159.32319368136 53308.374146337446 53457.84301602392 53607.73097451892 53758.03919688605 53908.768861483644 54059.92114997397 54211.497247332445 54363.49834185706 54515.92562517759 54668.780292264935 54822.0635414406 54975.77657438594 55129.92059615169 55284.49681516734 55439.50644325063 55594.95069561709 55750.83079088956 55907.14795110762 56063.90340173735 56221.09837168084 56378.73409328582 56536.811802355405 56695.33273815768 56854.29814343542 57013.70926441596 57173.567350820755 57333.87365587542 57494.62943631935 57655.835952415626 57817.49446796105 57979.606250295816 58142.172570313545 58305.194702471344 58468.67392479962 58632.61151891224 58797.008770016546 58961.8669669234 59127.187402057236 59292.97137146637 59459.22017483293 59625.93511548326 59793.11750039797 59960.768640222326 60128.88984927636 60297.4824455653 60466.54775078992 60636.08709035676 60806.10179338875 60976.5931927353 61147.56262498307 61319.011430466206 61490.940953277095 61663.35254127665 61836.24754610499 62009.62732319214 62183.49323176843 62357.84663487531 62532.68889937601 62708.02139596631 62883.84549918509 63060.16258742529 63236.97404294473 63414.281251876775 63592.08560424134 63770.388493955776 63949.19131884581 64128.49548065637 64308.30238506271 64488.61344168142 64669.43006408142 64850.75366979509 65032.58568032931 65214.92752117673 65397.78062182687 65581.14641577729 65765.02634054486 65949.42183767704 66134.3343527632 66319.76533544596 66505.71623943246 66692.18852250582 66879.18364653668 67066.70307749443 67254.74828545879 67443.32074463158 67632.42193334784 67822.05333408773 68012.21643348811 68202.91272235407 68394.14369567076 68585.91085261504 68778.21569656726 68971.05973512295 69164.44448010481 69358.37144757445 69552.8421578442 69747.85813548922 69943.42090935932 70139.53201259107 70336.19298261956 70533.40536119077 70731.17069437337 70929.49053257116 71128.36643053495 71327.7999473748 71527.7926465723 71728.3460959929 71929.461867898 72131.14153895751 72333.38669026208 72536.19890733525 72739.57978014654 72943.53090312329 73148.05387516333 73353.15029964762 73558.82178445293 73765.06994196394 73971.89638908656 74179.30274726005 74387.29064247 74595.86170526122 74805.01757074994 75014.75987863734 75225.0902732219 75436.01040341258 75647.5219227417 75859.6264893776 76072.3257661381 76285.62142050327 76499.51512462845 76714.00855535766 76929.10339423628 77144.80132752476 77361.10404621135 77578.01324602569 77795.53062745203 78013.65789574246 78232.3967609304 78451.74893784393 78671.7161461193 78892.30011021426 79113.50255942171 79335.32522788335 79557.76985460313 79780.83818346084 80004.53196322588 80228.8529475709 80453.80289508562 80679.38356929069 80905.59673865128 81132.44417659112 81359.9276615064 81588.04897677964 81816.80991079361 82046.21225694561 82276.25781366132 82506.94838440885 82738.28577771306 82970.27180716967 83202.90829145923 83436.19705436191 83670.1399247713 83904.73873670911 84139.99532933916 84375.91154698217 84612.48923913 84849.73026046024 85087.63647085073 85326.20973539412 85565.4519244125 85805.36491347212 86045.95058339792 86287.21082028851 86529.14751553092 86771.76256581512 87015.05787314929 87259.03534487441 87503.69689367966 87749.04443761679 87995.07990011566 88241.80520999919 88489.22230149829 88737.3331142673 88986.13959339891 89235.64368943973 89485.84735840534 89736.75256179574 89988.3612666106 90240.6754453648 90493.69707610404 90747.42814241986 91001.87063346578 91257.02654397246 91512.89787426352 91769.48663027119 92026.79482355205 92284.82447130287 92543.57759637611 92803.05622729627 93063.26239827539 93324.19814922924 93585.86552579324 93848.26657933826 94111.4033669871 94375.27795163034 94639.89240194269 94905.248792399 95171.34920329074 95438.19572074222 95705.79043672698 95974.13544908396 96243.23286153424 96513.08478369749 96783.69333110838 97055.06062523316 97327.18879348654 97600.07996924798 97873.73629187877 98148.1599067386 98423.35296520244 98699.31762467753 98976.05604861987 99253.57040655176 99531.86287407833 99810.9356329049 100090.79087085396 100371.43078188227 100652.85756609819 100935.07342977884 101218.08058538743 101501.8812515905 101786.4776532755 102071.8720215682 102358.06659384993 102645.0636137755 102932.86533129042 103221.47400264896 103510.89189043136 103801.12126356194 104092.16439732663 104384.02357339115 104676.70107981839 104970.19921108687 105264.52026810833 105559.66655824604 105855.64039533272 106152.4440996887 106450.07999814027 106748.55042403772 107047.85771727365 107348.00422430155 107648.99229815385 107950.82429846068 108253.50259146804 108557.02955005674 108861.4075537607 109166.63898878575 109472.72624802818 109779.67173109378 110087.47784431635 110396.14700077675 110705.68162032175 111016.08412958296 111327.35696199606 111639.50255781961 111952.52336415427 112266.42183496214 112581.20043108574 112896.86162026762 113213.40787716916 113530.84168339071 113849.16552749046 114168.38190500425 114488.4933184649 114809.50227742217 115131.411298462 115454.22290522663 115777.93962843418 116102.56400589852 116428.09858254925 116754.54591045139 117081.90854882578 117410.18906406884 117739.39002977281 118069.5140267459 118400.56364303252 118732.54147393364 119065.450122027 119399.29219718762 119734.0703166082 120069.78710481965 120406.44519371184 120744.04722255381 121082.59583801497 121422.09369418539 121762.54345259696 122103.94778224411 122446.30935960475 122789.6308686611 123133.91500092109 123479.16445543893 123825.38193883697 124172.57016532627 124520.73185672823 124869.8697424958 125219.98655973494 125571.08505322602 125923.16797544544 126276.23808658714 126630.29815458413 126985.35095513039 127341.39927170258 127698.44589558171 128056.49362587517 128415.54526953863 128775.6036413982 129136.67156417214 129498.75186849327 129861.84739293114 130225.96098401415 130591.09549625199 130957.25379215802 131324.43874227165 131692.6532251808 132061.90012754453 132432.18234411578 132803.50277776376 133175.86433949714 133549.26994848647 133923.72253208718 134299.2250258628 134675.78037360765 135053.39152736985 135432.06144747484 135811.79310254828 136192.58946953947 136574.45353374459 136957.38828883017 137341.39673685643 137726.48188830126 138112.6467620833 138499.89438558565 138888.22779467967 139277.65003374932 139668.16415571424 140059.77322205406 140452.4803028323 140846.28847672066 141241.2008310229 141637.220461699 142034.35047338967 142432.5939794407 142831.95410192688 143232.43397167712 143634.0367282988 144036.76552020223 144440.6235046251 144845.61384765792 145251.7397242682 145659.00431832593 146067.41082262772 146476.96243892272 146887.66237793706 147299.5138593994 147712.520112066 148126.68437374625 148542.00989132762 148958.49992080152 149376.15772728866 149794.98658506467 150214.98977758578 150636.17059751446 151058.5323467455 151482.07833643167 151906.81188700948 152332.73632822573 152759.85499916328 153188.17124826726 153617.68843337154 154048.40992172444 154480.33909001583 154913.47932440342 155347.8340205391 155783.40658359556 156220.20042829323 156658.21897892674 157097.4656693923 157537.94394321393 157979.65725357085 158422.60906332458 158866.80284504592 159312.2420810424 159758.9302633852 160206.87089393684 160656.06748437858 161106.52355623784 161558.24264091617 162011.22827971628 162465.48402387032 162921.0134345676 163377.82008298254 163835.90755030265 164295.27942775632 164755.93931664122 165217.89082835295 165681.13758441253 166145.6832164952 166611.5313664591 167078.6856863735 167547.1498385476 168016.9274955592 168488.02234028306 168960.4380659208 169434.17837602898 169909.24698454814 170385.64761583257 170863.38400467875 171342.45989635537 171822.879046632 172304.6452218088 172787.7621987463 173272.23376489474 173758.06371832374 174245.25586775213 174733.81403257782 175223.74204290812 175715.043739589 176207.7229742354 176701.7836092622 177197.2295179136 177694.06458429378 178192.29270339772 178691.9177811408 179192.9437343904 179695.37449099624 180199.213989821 180704.4661807716 181211.13502482968 181719.2244940829 182228.73857175623 182739.68125224288 183252.05654113583 183765.8684552591 184281.12102269928 184797.8182828373 185315.96428637957 185835.56309539053 186356.61878332365 186879.13543505414 187403.11714691023 187928.5680267059 188455.49219377284 188983.89377899247 189513.776924829 190045.14578536127 190578.00452631555 191112.35732509833 191648.2083708287 192185.56186437162 192724.42201837056 193264.79305728065 193806.6792174018 194350.08474691192 194895.0139059002 195441.47096640032 195989.46021242422 196538.98593999568 197090.05245718377 197642.66408413678 198196.82515311602 198752.54000853 199309.81300696815 199868.64851723515 200429.05092038526 200991.02460975663 201554.57399100545 202119.70348214087 202686.41751355943 203254.7205280799 203824.6169809782 204396.11134002195 204969.2080855058 205543.91171028663 206120.2267198184 206698.1576321879 207277.70897814995 207858.88530116293 208441.6911574243 209026.13111590644 209612.20975839268 210199.9316795128 210789.30148677924 211380.32380062324 211973.00325443124 212567.34449458082 213163.3521804772 213761.03098459032 214360.38559249064 214961.4207028865 215564.14102766057 216168.55129190718 216774.65623396882 217382.46060547378 217991.9691713733 218603.1867099785 219216.11801299866 219830.76788557807 220447.14114633386 221065.24262739392 221685.07717443485 222306.64964671966 222929.96491713615 223555.02787223482 224181.8434122674 224810.4164512252 225440.75191687772 226072.8547508111 226706.72990846727 227342.3823591819 227979.81708622444 228619.03908683662 229260.05337227156 229902.86496783333 230547.47891291627 231193.90026104412 231842.1340799103 232492.185451417 233144.05947171568 233797.76125124647 234453.29591477846 235110.6686014495 235769.8844648076 236430.9486728498 237093.8664080638 237758.64286746824 238425.2832626534 239093.79281982206 239764.17677983042 240436.44039822946 241110.58894530602 241786.6277061237 242464.5619805649 243144.39708337217 243826.13834418962 244509.79110760492 245195.36073319145 245882.85259554983 246572.27208435003 247263.62460437455 247956.91557555928 248652.15043303746 249349.33462718135 250048.47362364532 250749.57290340879 251452.6379628186 252157.67431363315 252864.68748306442 253573.6830138223 254284.66646415726 254997.6434079046 255712.61943452794 256429.6001491624 257148.5911726597 257869.59814163114 258592.62670849235 259317.68254150785 260044.77132483467 260773.89875856772 261505.07055878403 262238.29245758755 262973.5702031542 263710.90955977706 264450.31630791194 265191.7962442208 265935.3551816207 266680.99894932494 267428.7333928928 268178.5643742728 268930.49777184986 269684.53948049084 270440.695411591 271198.9714931208 271959.3736696707 272721.9079024999 273486.58016958175 274253.39646565093 275022.3628022506 275793.48520777933 276566.76972753875 277342.22242378024 278119.84937575244 278899.6566797499 279681.6504491608 280465.8368145136 281252.2219235256 282040.81194115244 282831.6130496344 283624.63144854666 284419.87335484603 285217.3450029218 286017.052644643 286819.00254940847 287623.2010041947 288429.6543136069 289238.36879992706 290049.3508031638 290862.60668110196 291678.1428093534 292495.96558140573 293316.08140867326 294138.4967205465 294963.2179644435 295790.2516058597 296619.60412841913 297451.2820339244 298285.29184240894 299121.6400921868 299960.33333990467 300801.37816059287 301644.781147718 302490.548913233 303338.6880876294 304189.20531999075 305042.1072780432 305897.4006482082 306755.09213565453 307615.1884643518 308477.69637712254 309342.6226356951 310209.9740207566 311079.7573320067 311951.9793882099 312826.64702724956 313703.7671061816 314583.3465012881 315465.3921081314 316349.9108416076 317236.9096360016 318126.39544504083 319018.3752419499 319912.8560195053 320809.84479009005 321709.34858574974 322611.37445824547 323515.9294791115 324423.0207397094 325332.6553512832 326244.8404450166 327159.5831720879 328076.89070372627 328996.7702312677 329919.22896621213 330844.2741402787 331771.9130054642 332702.15283409815 333635.000918901 334570.4645730412 335508.5511301912 336449.2679445872 337392.62239108514 338338.62186521903 339287.27378325816 340238.58558226697 341192.5647201622 342149.21867577074 343108.55494888977 344070.5810603444 345035.30455204734 346002.73298705736 346972.8739496391 347945.73504532274 348921.3239009627 349899.6481647983 350880.71550651325 351864.5336172959 352851.11020989943 353840.4530187029 354832.5697997713 355827.4683309162 356825.1564117572 357825.641863783 358828.93253041257 359835.0362770565 360843.96099117893 361855.71458235924 362870.30498235417 363887.7401451602 364908.028047075 365931.17668676144 366957.1940853088 367986.08828629623 369017.8673558568 370052.53938273917 371090.1124783717 372130.594776926 373173.9944353806 374220.3196335856 375269.5785743253 376321.77948338387 377376.9306096098 378435.0402249796 379496.1166246631 380560.16812708904 381627.20307400957 382697.22983056575 383770.256785353 384846.2923504882 385925.3449616738 387007.42307826446 388092.5351833344 389180.6897837423 390271.8954101994 391366.1606173361 392463.4939837681 393563.90411216434 394667.3996293143 395773.9891861965 396883.68145804456 397996.4851444165 399112.40896926314 400231.46168099507 401353.65205255285 402478.98888147506 403607.4809899667 404739.1372249699 405873.9664582314 407011.97758637316 408153.17953096237 409297.581238581 410445.1916808955 411596.01985472743 412750.0747821251 413907.36551043246 415067.9011123611 416231.6906860608 417398.743355192 418569.0682689963 419742.6746023681 420919.57155592676 422099.7683560894 423283.27425514214 424470.0985313138 425660.2504888473 426853.7394580733 428050.574795484 429250.7658838054 430454.32213207113 431661.2529756965 432871.56787655264 434085.2763230401 435302.38783016347 436522.9119396063 437746.8582198054 438974.2362660257 440205.05570043664 441439.3261721863 442677.0573574781 443918.25895964535 445162.94070922834 446411.11236405047 447662.7837092945 448917.9645575802 450176.66474903957 451438.8941513949 452704.6626600366 453973.9801980999 455246.85671654367 456523.3021942269 457803.3266379887 459086.94008272537 460374.15259146964 461664.97425547 462959.4151942681 464257.4855557811 465559.1955163779 466864.55528096115 468173.57508304634 469486.2651848425 470802.63587733207 472122.69748035184 473446.4603426745 474773.93484208855 476105.1313854804 477440.0604089161 478778.7323777228 480121.1577865712 481467.3471595565 482817.31105028285 484171.060041945 485528.6047474113 486889.955809307 488255.1239000979 489624.11972217355 490996.9540079316 492373.63751986175 493754.1810506305 495138.59542316466 496526.89149073744 497919.08013705263 499315.172276331 500715.178853395 502119.110843754 503526.97925369226 504938.7951203533 506354.5695118274 507774.3135272377 509198.03829682834 510625.75498205057 512057.4747756508 513493.208901759 514932.96861597453 516376.76520545676 517824.60998901265 519276.5143171847 520732.4895723418 522192.54716876644 523656.6985527453 525124.9552026588 526597.3286290712 528073.8303748205 529554.4720151087 531039.265157594 532528.2214424803 534021.3525426084 535518.6701635486 537020.1860436915 538525.9119543416 540035.8596998068 541550.041117494 543068.4680779992 544591.1524852018 546118.1062763601 547649.3414221999 549184.8699270121 550724.703828747 552268.8551991066 553817.3361436398 555370.1588018385 556927.3353472316 558488.8779874803 560054.7989644753 561625.1105544317 563199.8250679838 564778.9548502852 566362.5122811014 567950.5097749111 569542.959781 571139.8747835597 572741.2673017862 574347.1498899776 575957.535137632 577572.4356695471 579191.864145917 580815.8332624357 582444.3557503928 584077.4443767741 585715.1119443632 587357.3712918399 589004.2352938824 590655.7168612671 592311.8289409705 593972.5845162711 595637.9966068498 597308.0782688933 598982.8425951955 600662.3027152611 602346.4717954074 604035.3630388685 605728.9896858986 607427.3650138755 609130.502337404 610838.4150084222 612551.1164163055 614268.6199879696 615990.9391879779 617718.0875186472 619450.0785201514 621186.9257706312 622928.6428862963 624675.2435215357 626426.7413690217 628183.15015982 629944.4836634963 631710.7556882246 633481.9800808931 635258.1707272166 637039.3415518424 638825.5065184609 640616.679629914 642412.8749283063 644214.1064951138 646020.388451295 647831.7349574021 649648.1602136914 651469.6784602331 653296.3039770268 655128.0510841088 656964.9341416678 658806.9675501571 660654.1657504056 662506.543223733 664364.1144920613 666226.8941180313 668094.8967051144 669968.1368977288 671846.629381352 673730.3888826382 675619.4301695337 677513.7680513917 679413.4173790881 681318.3930451383 683228.7099838151 685144.3831712638 687065.4276256213 688991.8584071331 690923.6906182709 692860.9394038524 694803.6199511583 696751.7474900527 698705.3372931019 700664.404675694 702628.9649961592 704599.0336558905 706574.6260994646 708555.757814761 710542.4443330867 712534.7012292956 714532.5441219109 716535.9886732476 718545.0505895364 720559.7456210451 722580.0895622036 724606.0982517261 726637.7875727377 728675.1734528969 730718.27186452 732767.098824709 734821.6703954737 736882.0026838613 738948.1118420796 741020.0140676248 743097.7256034091 745181.2627378877 747270.6418051843 749365.8791852234 751466.9913038552 753573.9946329863 755686.9056907073 757805.7410414234 759930.5172959843 762061.251111814 764197.9591930406 766340.6582906297 768489.3652025129 770644.0967737212 772804.8698965168 774971.7015105245 777144.6086028662 779323.6082082925 781508.7174093177 783699.9533363532 785897.3331678403 788100.8741303864 790310.5934989012 792526.5085967288 794748.6367957869 796976.9955167011 799211.6022289414 801452.4744509596 803699.6297503272 805953.0857438726 808212.8600978188 810478.9705279225 812751.4347996128 815030.2707281307 817315.4961786682 819607.1290665091 821905.1873571683 824209.6890665338 826520.6522610073 828838.0950576467 831162.0356243073 833492.4921797828 835829.4829939516 838173.0263879179 840523.1407341555 842879.844456651 845243.1560310503 847613.0939848019 849989.6768973024 852372.9234000427 854762.8521767524 857159.4819635496 859562.8315490843 861972.9197746876 864389.7655345186 866813.3877757139 869243.8054985331 871681.0377565115 874125.103656607 876576.0223593509 879033.8130789979 881498.4950836754 883970.0876955378 886448.6102909151 888934.0823004647 891426.5232093263 893925.9525572724 896432.389938862 898945.8550035943 901466.3674560634 903993.9470561118 906528.613618986 909070.3870154906 911619.2871721458 914175.334071343 916738.5477515013 919308.9483072248 921886.5558894586 924471.390705649 927063.4730199015 929662.8231531383 932269.4614832586 934883.408445299 937504.6845315925 940133.3102919292 942769.306333718 945412.6933221479 948063.4919803509 950721.7230895628 953387.4074892879 956060.5660774591 958741.2198106066 961429.3897040186 964125.096831907 966828.3623275728 969539.2073835713 972257.6532518797 974983.721244062 977717.4327314354 980458.8091452414 983207.8719768105 985964.6427777322 988729.1431600227 991501.3947962954 994281.4194199304 997069.2388252458 999864.8748676664 . Here we initialize the total population to be 50, then set the growth factor as 1.00005 (.005 percent change). It will print the population every 56th day until it reaches one million. It multiplies the current population by the growth factor in each iteration, and increments the day count. When the day count reaches 56, it prints the current population and resets the day count to 0. . Note! This simulation assumes that the growth factor remains constant as time progresses, which may not be a realistic assumption in real-world scenarios. . import matplotlib.pyplot as plt # Define the initial population and growth rate population = 100 growth_rate = 0.05 # Define the number of years to simulate num_years = 50 # Create lists to store the population and year values populations = [population] years = [0] # Simulate population growth for the specified number of years for year in range(1, num_years+1): # Calculate the new population size new_population = population + (growth_rate * population) # Update the population and year lists populations.append(new_population) years.append(year) # Set the new population as the current population for the next iteration population = new_population # Plot the population growth over time plt.plot(years, populations) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Population&#39;) plt.title(&#39;Population Growth Simulation&#39;) plt.show() . If we create quantative data, we can plot it using the Matplotlib library. . Example on how simplification can cause bias . import random beak = [&quot;small-beak&quot;, &quot;long-beak&quot;, &quot;medium-beak&quot;], wing = [&quot;small-wings&quot;, &quot;large-wings&quot;, &quot;medium-wings&quot;], height = [&quot;short&quot;, &quot;tall&quot;,&quot;medium&quot;] naturaldisaster = [&quot;flood&quot;, &quot;drought&quot;, &quot;fire&quot;, &quot;hurricane&quot;, &quot;dustbowl&quot;] print(&quot;When a&quot; , random.choice(naturaldisaster) , &quot;hit&quot;, random.choice(height), &quot;birds died&quot;) . When a fire hit short birds died . How does this simulation have bias? It did not demonstrate how the bird cab vary beyond the heights, only limiting hte choices to the heights. . JS examples . Dice Roll Binary Coin Flip Card Pull . Hacks . Answer all questions and prompts in the notes (0.2) | Create a simulation Create a simulation that uses iteration and some form of data collection (list, dictionary...) (0.4) try creating quantative data and using the Matplotlib library to display said data | Comment and describe function of each parts | How does your simulation help solve/mimic a real world problem? | Is there any bias in your simulation? Meaning, are there any discrepancies between your program and the real event? | . | | Answer these simulation questions (0.3) | Bonus: take a real world event and make a pseudocode representation or pseudocode on a flowchart of how you would make a simulation for it (up to +0.1 bonus) | . import matplotlib.pyplot as plt from math import * p = 100 maxTime = 100 r = 0.05 bankingRecord = [p] for t in range(1, maxTime+1): bankingRecord.append(p*(e**(r*t))) plt.plot(range(years + 1), bankingRecord) plt.title(&quot;Bank account balance after certain years with a interest rate&quot;) plt.xlabel(&quot;Years Past&quot;) plt.ylabel(&quot;Balance&quot;) plt.show() . How does your simulation help solve/mimic a real world problem? My code helped to predict the bank balance after a certain number of years, using the balance pe^(rt) formula through each year. | Is there any bias in your simulation? Meaning, are there any discrepancies between your program and the real event? The bank interest could change through the years, and one might take money out of the bank constantly instead of saving everything. | . AB, both are able to derive the most popular ride. | A, because rabbit population is growing, grass is already takes into account. | B, we can&#39;t be sure of the exact size | D, all of these are benefits | BC, because data can be provided quickly and parameters can also be changed easily | C, simulations require assumptions to work | Pseudocode For Population taking into account both growing and dying Define population, max_years display(population) for i in max_years: population=grow(population) population=death(population) display(population) .",
            "url": "https://jasoxddd.github.io/FastProject2/student/2023/04/25/P3M-Simulations.html",
            "relUrl": "/student/2023/04/25/P3M-Simulations.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "P3-M 4/21 Binary Overview",
            "content": "How to contact us . Join the &quot;coding&quot; channel on slack! That is the only place where we will be answering questions or sending announcements about lessons. If you have a question please contact us there. . How to join . Click on &quot;add channels&quot; below the list of channels | Click on &quot;browse channels&quot; | Search for &quot;coding&quot; | Click the green &quot;Join&quot; button on the right | . Learning Objectives . DAT-1.A: Representing Data with Bits . Basic Information . Bit is short for 1 digit, and represents a value of either 0 or 1. A byte is 8 bits. | . | Sequences of bits are used to represent different things. Representing data with sequences of bits is called binary. | . | . Practice Questions: . How many bits are in 3 bytes? 24 bits | What digital information can be represented by bits? 1 and 0 | Are bits an analog or digital form of storing data? What is the difference between the two? digital, analog is continuous, while digital is in bits. #### Examples | Boolean variables (true or false) are the easiest way to visualize binary. 0 = False | 1 = True | . | . import random def example(runs): # Repeat code for the amount of runs given while runs &gt; 0: # Assigns variable boolean to either True or False based on random binary number 0 or 1. boolean = False if random.randint(0, 1) == 0 else True # If the number was 1 (True), it prints &quot;awesome.&quot; if boolean: print(&quot;binary is awesome&quot;) # If the number was 2 (False), it prints &quot;cool.&quot; else: print(&quot;binary is cool&quot;) runs -= 1 # Change the parameter to how many times to run the function. example(20) . binary is cool binary is awesome binary is awesome binary is awesome binary is cool binary is cool binary is awesome binary is cool binary is cool binary is awesome binary is awesome binary is awesome binary is cool binary is awesome binary is awesome binary is awesome binary is awesome binary is cool binary is awesome binary is cool . DAT-1.B: The Consequences of Using Bits to Represent Data . Basic Information . Integers are represented by a fixed number of bits, this limits the range of integer values. This limitation can result in overflow or other errors. | Other programming languages allow for abstraction only limited by the computers memory. | Fixed number of bits are used to represent real numbers/limits | . Practice Questions: . What is the largest number can be represented by 5 bits? 31 | One programing language can only use 16 bits to represent non-negative numbers, while a second language uses 56 bits to represent numbers. How many times as many unique numbers can be represented by the second language? 2^40 times | 5 bits are used to represent both positive and negative numbers, what is the largest number that can be represented by these bits? (hint: different thatn question 1) 15 #### Examples | import math def exponent(base, power): # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &quot;^&quot; and &quot;=&quot;. print(str(base) + &quot;^&quot; + str(power) + &quot; = &quot; + str(math.pow(base, power))) # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) exponent(10000, 10000) # The program returns a overflow error . OverflowError Traceback (most recent call last) /home/haoxuan/vscode/FastProject2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb Cell 5 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(str(base) + &#34;^&#34; + str(power) + &#34; = &#34; + str(math.pow(base, power))) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; exponent(10000, 10000) /home/haoxuan/vscode/FastProject2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb Cell 5 in exponent(base, power) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; def exponent(base, power): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &#34;^&#34; and &#34;=&#34;. -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(str(base) + &#34;^&#34; + str(power) + &#34; = &#34; + str(math.pow(base, power))) OverflowError: math range error . DAT-1.C: Binary Math . Basic Information . Binary is Base 2, meaning each digit can only represent values of 0 and 1. | Decimal is Base 10, meaning eacht digit can represent values from 0 to 9. | Conversion between sequences of binary to decimal depend on how many binary numbers there are, their values and their positions. | . Practice Questions: . What values can each digit of a Base 5 system represent? 0,1,2,3,4 | What base is Hexadecimal? What range of values can each digit of Hexadecimal represent? base 16, 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 | When using a base above 10, letters can be used to represent numbers past 9. These letters start from A and continue onwards. For example, the decimal number 10 is represented by the letter A in Hexadecimal. What letter would be used to represent the Base 10 number 23 in a Base 30 system? What about in a Base 50 system? O,O #### Examples | Using 6 bits, we can represent 64 numbers, from 0 to 63, as 2^6 = 64. | The numbers in a sequence of binary go from right to left, increasing by powers of two from 0 to the total amount of bits. The whole number represented is the sum of these bits. For example: 111111 | 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0 | 32 + 16 + 8 + 4 + 2 + 1 | 63 | | Fill in the blanks (convert to decimal) . 001010 = 18 | 11100010 = 226 | 10 = 2 | | Fill in the blanks (convert to binary) . 12 = 1100 | 35 = 100011 | 256 = 100000000 | | . Hacks &amp; Grading (Due SUNDAY NIGHT 4/23) . Complete all of the popcorn hacks (Fill in the blanks + run code cells and interact + Answer ALL questions) [0.3 or nothing] | Create a program to conduct basic mathematical operations with binary sequences (addition, subtraction, multiplication, division) [0.6 or nothing] For bonus, program must be able to conduct mathematical operations on binary sequences of varying bits (for example: 101 + 1001 would return decimal 14.) [0.1 or nothing] | . | . from math import * class Binary: def __init__(self, binNum): self.value = str(d2b(binNum)) def __str__(self): return self.value def __add__(self, other): return Binary(b2d(self.value) + b2d(other.value)) def __sub__(self, other): return Binary(b2d(self.value) - b2d(other.value)) def __mul__(self, other): return Binary(b2d(self.value) * b2d(other.value)) def __truediv__(self, other): return Binary(b2d(self.value) / b2d(other.value)) def d2b(num): counter = floor(log(num, 2)) result = &#39;1&#39; num -= 2 ** counter for i in range(counter - 1, -1, -1): if num &gt;= 2 ** i: num -= 2 ** i result += &quot;1&quot; else: result += &quot;0&quot; return int(result) def b2d(num): inp = str(num) result = 0 for i in range(len(num)): if inp[len(num)-i-1] == &quot;1&quot;: result += 2 ** i return result print(b2d(&quot;1100&quot;)) a = Binary(24) b = Binary(12) print(a, b) print(&quot;add&quot;) print(a + b) print(&quot;sub&quot;) print(a - b) print(&quot;mult&quot;) print(a * b) print(&quot;div (only works when integer answer)&quot;) print(a / b) . 12 11000 1100 add 100100 sub 1100 mult 100100000 div (only works when integer answer) 10 .",
            "url": "https://jasoxddd.github.io/FastProject2/student/2023/04/21/P3M-BinaryLesson.html",
            "relUrl": "/student/2023/04/21/P3M-BinaryLesson.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "SCSS vs. CSS",
            "content": "What is CSS . CSS is the default language that most programmers use to style a webpage. It is one of the 3 fundamental web technologies along with HTML and JavaScript. HTML manages the structure, JavaScript makes pages interactive, and CSS changes the style by taking a markup language like HTML and describes how it should be presented to the user. . body{ color: #0000FF; font-family: Ariel, sans-serif; font-size: 16px; } . This is an example of CSS that can be used to change body text of an HTML document . Can you guess what its changing style of the text to? . What is SCSS . SCSS is short for Sassy CSS. What SCSS does is very similar to CSS but the difference comes with the fact that SCSS extends the functionality of CSS while also making it simpler. What this allows us to do is it enables us to things like nested styling, functions, mixins, variables, inheritance (more on these later) and so on. . $blue: #0000FF; body{ color: $blue; font-family: Ariel, sans-serif; font-size: 16px; } . This example is doing the same thing as the other code segment above but the difference being that here we defined the color as $blue which makes it much easier for us to recall later on. In fact, we have done this before, if you have been using the dark mode/midnight theme then go ahead and navigate your your _sass folder and check out the dark-mode.scss and you&#39;ll see something similar to the example above . So which one is better to use? . CSS tends to be better for really simple styling where not many complex or nested styles are required and small projects that doesn&#39;t require a lot of customization. SCSS on the other hand is very good for more complex styling and working with a project with more than one page where maybe lots of customization is needed. .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/04/17/Sass-vs-CSS-lesson.html",
            "relUrl": "/2023/04/17/Sass-vs-CSS-lesson.html",
            "date": " • Apr 17, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Cpt",
            "content": "Food Memory Game . | | | | | | | | | | | | Time: 0.00s . Retry .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/04/16/CPT.html",
            "relUrl": "/2023/04/16/CPT.html",
            "date": " • Apr 16, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieves and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: Tirth - i7-12700H, 2.30 Ghz Base, 4.7 Boost | Yuri - Ryzen 5900 3.7 Ghz Base, 4.8 Boost | Alan - i7-1065G7, 1.3 Ghz Base, 1.5 Boost | Jishnu - i5-11320H, 2.5 GHz Base, 3.2 Boost | Haoxion - i5-8365U, 1.6 GHz Base, 1.90 Boost | . | Memory in GB: Tirth - 16 GB | Yuri - 64 GB | Alan - 16 GB | Jishnu - 16 Gb | Haoxion - 16 GB | . | Storage in GB: Tirth - 1024 TB SSD | Yuri - 2048 TB SSD, 128 Gb SSD | Alan - 512 GB SSD | Jishnu - 512 GB SSD | Haoxion - 475 GB SSD | . | OS: Tirth - Windows 11 | Yuri - Windows 10 | Alan - Windows 10 | Jishnu - Windows 11 | . | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path - a | Route - e | Computer System - b | Computer Device - c | Bandwidth - d | Computer Network - f | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions True, open protocols allow for more unrestricted sharing to the rest of the internet. | False, IETF sets up the rules of the internet but does not keep manufacturers out from the internet. The internet is a thing where all people can access it. | False, different routes can be undertaken depending on if a MAC is available for transfer or not. While the file is being transferred it determines which MACs are available or not. | True, things like Internet Protocol and other protocols are agreed upon rules that set up specific behaviors in the system. | False, UDP guarantees faster transfers but does not guarantee consistent transfer success. | False, the World Wide Web is not the internet. WWW links pages instead. | True, HTTP is used by World Wide Web to display website pages. | | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprietary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highlight vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is transported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packeting data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. i. Yes the network is fault tolerant, as if any link or any points is broken the information can still be distributed to other points in the system. | ii. No the network is not fault tolerant, as if node C goes down, then information can’t be sent to F and thus it is not fault tolerant. | iii. No the network is not fault tolerant, as if node G comes down, then information can’t be sent to A and thus the system cannot be described as fault tolerant. Option C | Option A | The importance of fault tolerance is that there is redundancy in your system and one faulty link doesn’t compromise the entire system and information can still be transmitted throughout the entire system. The internet is an example of such a system as if one link is broken, the information can still be sent through other links while the broken link is being repaired. Thus it is vital to create fault tolerant systems with at least one backup link or node per connection in case of a failure. | | . | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily video 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend architecture? In a frontend/backend architecture, the frontend and backend are naturally distributed components. The frontend typically consists of the user interface and presentation layer, while the backend contains the business logic and data storage. The frontend is distributed across multiple devices or clients, such as web browsers, mobile devices, or desktop applications. Each client has its own instance of the frontend code, which communicates with the backend over a network connection. The backend is typically deployed on one or more servers or cloud platforms. The servers may be physically distributed across multiple locations, and the backend may be composed of multiple services or microservices that work together to provide the required functionality. The distributed nature of the frontend/backend architecture allows for scalability, fault tolerance, and performance optimization. The frontend can be scaled by adding more clients or instances, while the backend can be scaled by adding more servers or services. Fault tolerance can be achieved by replicating the backend across multiple servers or locations, and load balancing can be used to optimize performance by distributing the load across multiple servers. Overall, the frontend/backend architecture is a popular and effective way of building modern web applications that can handle large volumes of users and data. | . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article The GUNICORN_CMD_ARGS environment variable is used to set command-line arguments for the Gunicorn web server when it starts up. In the provided command, --workers=1 and --bind=0.0.0.0:8086 are specified as arguments. To run the Gunicorn server in parallel, you can increase the number of worker processes to handle multiple requests simultaneously. To do this, simply set the --workers argument to a higher number. For example, if you want to run four worker processes, you can set the argument to --workers=4. It&#39;s important to note that the number of workers you can run at once will depend on the resources available on your system and the workload your application is handling. Be careful not to increase the number of workers beyond what your system can handle, as this can cause performance issues or even crashes. To make sure everything is running smoothly, it&#39;s a good idea to monitor the resource usage of the worker processes while the server is running with multiple workers. You can use tools like htop, top, or systemd to keep an eye on things. In summary, to run the Gunicorn server in parallel, set the --workers argument to a number that your system can handle, and keep an eye on the resource usage of the worker processes to ensure everything stays stable. | . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://jasoxddd.github.io/FastProject2/week29/2023/04/05/AP_computers_networks.html",
            "relUrl": "/week29/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # Only one copy of data # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Because every index has a unique response # . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? #string, int,list, another dictionary # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # Using a set instead of a list # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # use dictionary to get the list, then append the new genre # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format for i in range(1,len(lover_album[&quot;tracks&quot;])): print(lover_album[&quot;tracks&quot;][i]) . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] I Forgot That You Existed Cruel Summer Lover The Man The Archer I Think He Knows Miss Americana &amp; The Heartbreak Prince Paper Rings Cornelia Street Death By A Thousand Cuts London Boy Soon You&#39;ll Get Better (feat. Dixie Chicks) False God You Need To Calm Down Afterglow Me! (feat. Brendon Urie of Panic! At The Disco) It&#39;s Nice To Have A Friend Daylight . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # adding more error cases such as spaces before and after . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . def search(): search = input(&quot;What would you like to know about the album?&quot;) search = search.lower() if lover_album.get(search) == None: print(&quot;Invalid Search&quot;) print(&quot;Possible queries:&quot;) for key in lover_album.keys(): print(key) else: res=lover_album.get(search) if type(res) is list: for element in res: print(element) elif type(res) is dict: for key in res.keys(): print(res[key]) else: print(lover_album.get(search)) search() . I Forgot That You Existed Cruel Summer Lover The Man The Archer I Think He Knows Miss Americana &amp; The Heartbreak Prince Paper Rings Cornelia Street Death By A Thousand Cuts London Boy Soon You&#39;ll Get Better (feat. Dixie Chicks) False God You Need To Calm Down Afterglow Me! (feat. Brendon Urie of Panic! At The Disco) It&#39;s Nice To Have A Friend Daylight . classroom = { &quot;teacher&quot; : &quot;Mr. Mort&quot;, &quot;numStudent&quot; : 5, &quot;students&quot; : [&quot;Haoxuan&quot;, &quot;Alan&quot;, &quot;Jishnu&quot;, &quot;Yuri&quot;, &quot;Tirith&quot;], &quot;classroom&quot; : &quot;A101&quot; } print(classroom[&quot;teacher&quot;]) for i in range(classroom[&quot;numStudent&quot;]): print(classroom[&quot;students&quot;][i]) print(classroom[&quot;numStudent&quot;]) classroom[&quot;numStudent&quot;]+=1 print(classroom[&quot;numStudent&quot;]) . Mr. Mort Haoxuan Alan Jishnu Yuri Tirith 5 6 .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Example database using cars",
            "content": "Creating the Table . Cell for creating the table . CRUD . This database stores planes and their stats, it implements CRUD using imperative programming . Create . Importing the necessary modules and create function: . import sqlite3 database = &#39;sqlite.db&#39; def create_design(designation, price, max_speed, designe): conn = sqlite3.connect(database) c = conn.cursor() try: # Execute an SQL command to insert data into a table c.execute(&quot;INSERT INTO cars (designation, price, max_speed) VALUES (?, ?, ?, ?)&quot;, (designation, price, max_speed)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {designation} has been created with the data:&quot;) print((designation, price, max_speed)) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) c.close() conn.close() create_design(&quot;Tesla 2022 model 3&quot;, 38999, 162, &quot;Lockheed&quot;) . Error while executing the INSERT: no such table: cars . This function takes four arguments (designation, price, max_speed, and designer) and inserts them into the &quot;designs&quot; table as a new record. . Read . def read_design(id): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries c = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = c.execute(&#39;SELECT * FROM cars&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: if row[0] == id: print(row) # Close the cursor and connection objects c.close() conn.close() read_design(1) . OperationalError Traceback (most recent call last) /home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb Cell 6 in &lt;cell line: 23&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; c.close() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; conn.close() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; read_design(1) /home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb Cell 6 in read_design(id) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; c = conn.cursor() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; # Execute a SELECT statement to retrieve data from a table -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; results = c.execute(&#39;SELECT * FROM cars&#39;).fetchall() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; # Print the results &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; if len(results) == 0: OperationalError: no such table: cars . This function takes a design ID as an argument and returns the record from the &quot;designs&quot; table that matches that ID. . Update . def update_design(design_id, designation=None, price=None, max_speed=None): conn = sqlite3.connect(database) c = conn.cursor() update_dict = {} if designation is not None: update_dict[&quot;designation&quot;] = designation if price is not None: update_dict[&quot;price&quot;] = price if max_speed is not None: update_dict[&quot;max_speed&quot;] = max_speed update_str = &quot;, &quot;.join([f&quot;{col}=? &quot; for col in update_dict.keys()]) c.execute(f&quot;UPDATE cars SET {update_str} WHERE id=?&quot;, (*update_dict.values(), design_id)) conn.commit() print(read_design(design_id)) c.close() conn.close() update_design(2, None, None, 498) . OperationalError Traceback (most recent call last) /home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb Cell 8 in &lt;cell line: 21&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; c.close() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; conn.close() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; update_design(2, None, None, 498) /home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb Cell 8 in update_design(design_id, designation, price, max_speed) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; update_dict[&#34;max_speed&#34;] = max_speed &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; update_str = &#34;, &#34;.join([f&#34;{col}=? &#34; for col in update_dict.keys()]) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; c.execute(f&#34;UPDATE cars SET {update_str} WHERE id=?&#34;, (*update_dict.values(), design_id)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; conn.commit() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; print(read_design(design_id)) OperationalError: no such table: cars . This function takes a design ID and any combination of the other four arguments as keyword arguments. It updates the record in the &quot;designs&quot; table that matches the ID with the new values provided. . Delete . def delete_design(design_id): conn = sqlite3.connect(database) c = conn.cursor() print(read_design(design_id)) c.execute(&quot;DELETE FROM planes WHERE id=?&quot;, (design_id,)) conn.commit() conn.close() delete_design(2) . OperationalError Traceback (most recent call last) /home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb Cell 10 in &lt;cell line: 11&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; conn.commit() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; conn.close() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; delete_design(2) /home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb Cell 10 in delete_design(design_id) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; conn = sqlite3.connect(database) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; c = conn.cursor() -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(read_design(design_id)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; c.execute(&#34;DELETE FROM planes WHERE id=?&#34;, (design_id,)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; conn.commit() /home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb Cell 10 in read_design(id) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; c = conn.cursor() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; # Execute a SELECT statement to retrieve data from a table -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; results = c.execute(&#39;SELECT * FROM cars&#39;).fetchall() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; # Print the results &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/haoxuan/vscode/FastProject2/_notebooks/2023-03-16-database-example.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; if len(results) == 0: OperationalError: no such table: cars . This function takes a design ID as an argument and deletes the record from the &quot;designs&quot; table that matches that ID. . Menu . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Perform Jupyter &#39;Run All&#39; prior to starting menu .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/03/16/database-example.html",
            "relUrl": "/2023/03/16/database-example.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource The categories of the table, or the column names . What is a database schema? | . he categories of the table, or the column names . What is the purpose of identity Column in SQL database? | . makes the information or data to be much easier to access . What is the purpose of a primary key in SQL database? | . Purpose of a primary key is to be unique to each row . What are the Data Types in SQL table? | . integers, strings, booleans, floats, lists, dictionaries . import sqlite3 database = &#39;sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | . Connection objects allows for connection to sqlite database . Same for cursor object? | . Cursor allows you to execute methods in the sqlite database . Look at conn object and cursor object in VSCode debugger. What attributes are in the object? cursor, execute, close . | Is &quot;results&quot; an object? How do you know? . | . yes, it is able be used with len() . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$1RmVEonUoZnuRvaS$3ef1d8b48830d023d380ab0e27efdc9afc717aec68160c3d9ab9ae8dfd0dc66d&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$1PZWg1X718cEB2mr$1af60dbf7ae50b37b7133275b9a82b8ceae962cf2b0a6c319487f896513d4354&#39;, &#39;2023-03-20&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$fzrIt9iUnXBaXMPy$4a59363b8c3668d3e22591bfc838cdfcae13f2df28bdfc699d962cc93144defe&#39;, &#39;2023-03-20&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$m95tZKrXbFw5qUb0$f17097da6120045a466ed47b6da1e911fda7408bcd8aa1c243419945e48f5108&#39;, &#39;2023-03-20&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$uveeupgpXqlTJUQV$ebea2a4d172c3968a6073c817d146384cae7237dc3e53fc468a68cafde3b00de&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$t7x0VBfC9cWMypNc$a9e67b7ab308c75a3a6cc0b5a9121f5f870e0981e509a6a0b02be7ff59983d8a&#39;, &#39;1921-10-21&#39;) (7, &#39;&#39;, &#39;&#39;, &#39;sha256$7iVuxVxOPAyePe6k$a46dc808b5b3f3649978e51fda26b3b1f7298c69e91d7b2ef0e4fa6f088d4034&#39;, &#39;2023-03-20&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | . create() in the first lesson utilizes object oriented programming while the second one takes a more imperitave approach, based on individual functions. In OOP , large databases stay organized while in Imperitave may become diffucult to navigate and add to after a certain amount of data. However, imperitave is easier to understand and can therefore be easier to work with at times. . Explain purpose of SQL INSERT. Is this the same as User init? | . SQL INSERT inserts data into a specified schema of the table. User init initiallizes the dataset. They are not the same thing. . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | . The hacked part ensures that the length of the password is greater than 2. If it is not, the message is updated to hacked. . Explain try/except, when would except occur? | . try would execute first, then except will be executed if there was an error. Except would occur when there was a problem connecting to the sqlite database or performing a function on the database . What code seems to be repeated in each of these examples to point, why is it repeated? | . Defining conn and cursor is repeated in all of these exmaples, because otherwise a connection to the swlite database can not be formed. . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | . Yes delete can be a dangerous operation when the database is public because of the fact that people may attempt to wipe the entire database. . In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . f is a replacement for .format, and allows any variables in the string to automatically be converted into string format. This is called an f-string. {uid} allows the program to access data based on the userinput of uid. . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | . menu() repeats because menu() is a recurssive function, meaning it calls menu() within itself. . Could you refactor this menu? Make it work with a List? | . If this means make the input a list or c, r, u, d that the program should run then yes this could be done. The program could split the user input into each of the methods that must be run and continue accordingly. . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . A new user record 195 has been created . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . Pandas DataFrame Information . print(df.info()) . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Smiley&quot;, &#39;file&#39;: &quot;Smiley.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (320, 240) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano-256.jpg JPEG RGB Original size: (320, 240) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "MCQ 2 Blog",
            "content": "My Results . 46/50 Q1: . . I did not consider that the code would change the max variable after it had already be set, which lead me to ignore the fact that if x is the max, the max would be set to z since y is not the max. In the future, I&#39;ll try to look over every line of the code slowly to make sure that I&#39;m not making any oversights. . Q10: . . I did not see the fact that this question is multi-select, and I saw that B is correct and moved on. In the future, I&#39;ll always check if a question is multi-select, as well as read all of the options carefully. . Q42: . . I misplaced III as part of the advertising process instead of the designing process. I will make sure to carefully consider if a certain item can be beneficial to an aspect of developing in the future. . Q49: . . I forgot that some programs will just be unanswerable with no solutions. I will keep this in mind. . Summary . The most pressing problem I have right now is not being careful enough and making mistakes. I will carefully do the problems, as well as checking them over. In addition, I will need to review some of the previous lessons, since as the results reveal, I need to recover some of my informations. .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/01/29/Test-Blog.html",
            "relUrl": "/2023/01/29/Test-Blog.html",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "CPT Individual Blog",
            "content": "The Blog . The Collegeboard Performance Task is an assessment of the skills of the APCSP curriculum, consisting of a video and a written response that demonstrate a program working, while describing its purpose and functionality, how it is managing complexity, utilizing algorithms and procedures, testing, and providing detailed descriptions to show proficiency in the project and AP CSP curriculum. . Our project is a Fruit-Ninja-esque game where foods will appear on the screen, and the player will identify the healthy foods and click them in a limited amount of time. Choosing the right ones increases the score and timer and vice versa. There will also be a sign-in feature for updating a leaderboard with scores. . For my personal addition to the project, I will be working on storing the leaderboard and sign in information. I will be creating a program that can send and recieve sign-in information and highscores to and from a database. This aims to give the player a reason to learn all the good foods and be better at reflexes, due to the wish to get a higher score, a competitive edge. I was in charge of that in my team&#39;s project last trimester, and I will do the same this time as well with the new experience and tools I&#39;ve learned. .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/01/28/CPT-Individual-Blog.html",
            "relUrl": "/2023/01/28/CPT-Individual-Blog.html",
            "date": " • Jan 28, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Big Ideas Blog",
            "content": "5.1 Blog . A beneficial effect would be a easier way to access the information through the internet, the downside is the loss of the ability to concentrate on extracting information slowly due to a reliance on quick information | A benefit would be faster communication and connection to others, the downside is the potential spread of misinformation which is hard to stop with the speed that information spreads. | A benefit would be greater production of industry due to automation, a downside would be the shifting of jobs due to the computer replacing some jobs and creating new ones. The issue with dopamine is definitely real, although it is usually not to the extent that the examples get. Most people would only see computer as a quick getaway, not a replacement of social life. Still, the attachment to games can distract people from things that are more useful. | 5.2 Blog . The way people empower themselves in a digital world is through gaining influence due to popularity on social media or other platforms, therefore, what you say are bound to have people backing you, thus making you more powerful. | People who are empowered can help by giving attention to the people who doesn&#39;t have as much power, giving them support and more power to them as well. | Red Tape do indeed block digital empowerment by blocking people off from certain ways to gain power through the internet. This is present in Del Norte as well, although to a less extent than others since the blockers at Del Norte is more lenient than others, which may just restrict people to certain websites alone. | 5.3 Blog . Algorithm Bias sometimes will train themselves to a certain type of audience, like how TicTok is geared towards teens and Facebook is geared toward Older People. These differencese can be seen in the type of content that gets recommended. Whereas Facebook focuses on longer articles, which older people are more likely to read, TicTok is more catered to short videos, which grab teenager&#39;s attention more often. This is all just the use of marketing towards the selected age group for more attention. It is not really harmful, except the diversity in the platforms are going to be low. | Virtual Assistants have female voices likely because it is selected to be desireble by a test. It&#39;s purpose was to appeal to more audiences, this might be potentially harmful as it may make women seem like just assistants. I should be corrected to having the user select a voice that they want on startup. It is in name of a good business though. | The Google algorithm will recommend you things that relates to the things that you&#39;ve searched up. This may cause to be stuck in your bubble where everything you search up will only result in results that thinks like you think, which is not good for a individual since it can lead to them developing a fixed mindset. Of course, this is acting in the business, because it wants you to click on results that fits you more. | Racist Computer The Owner does think that this is intentional, as he acts like the computer is deliberately avoiding him. | This probably happened because the database only included white people in it, which caused the algorithm to be only able to target white people | This is harmful, as it is excluding a whole group of people in their userbase, and it should be corrected. | This can be easily fixed by using a more variety of samples in the database that has equal representation of every race and gender. | . | . 5.4 Blog . APIs such as rapidAPI can help with crowd sourcing by providing us information that is taken from the people. This can be used to give us the information that we can&#39;t find and input by ourselves. I used a Youtube API, and it gave me information that I couldn&#39;t find by myself taken from the people. This is crowdsourcing in the sense that it gets its information from what others have inputed. | The biggest discovery was the fact that I can use github to restore to previous versions. I was able to recover my project a couple times using this. The knowledge that github stores the previous commits was pretty massive, since I realize how much data is really stored in these websites. | The 150 students could help with crowdsourcing by providing us feedback on our CPT by giving us inputs on how we can improve and the bugs that our programs can run into. They can also give ideas on what we could add to our games. | Crowdsourcing for the whole school is going to be tough, but it can give us a more diverse view and a significantly larger amounts of inputs. However, there is a larger risk of malicious inputs in forms of spam and wrong information. | . 5.5 Blog . Creative Commons Zero - ignoring copyright in the creation of a world-wide public domain. | Open Source Mit License - allows for people to use code someone else created freely in a closed source version and to give credit in its use. | Open Source GPL License - people are allowed to do anything they want with your code except to share the closed source versions of it. Software licenses ensure that the code that people has created to be belonging to them in name, and regulate those who want to use the work, as well as give restrictions to what they do. It is beneficial to the artists, otherwise people might just steal their work and claiming it as their own, as well as getting money from those who actually want to use their work fairly. The types of Licensing can be freely chosen by the artists, so they can choose how people can use their things, like using music in their videos and so forth. | . 5.6 Blog . Most of the time, PIIs I&#39;ve seen are things like names, phone number and emails, and sometimes dates of birth. | I think it is beneficial for some people to know things such as emails and phone numbers so that they can contact you, but things like address shouldn&#39;t be given to online persons, since it presents a potential danger. | A good password is a password that&#39;s hard to guess, whether through a lot of random symbols and its length. A bad password is something that can be easily guessed, like 1234. Another step to assist in authentication is checking with your inputed emails, so it is certain that it is you who are trying to log in. | Symmetric Encryption is a encryption method where a private key is used to both encode and decode a message, and asymmetric encryption is a encryption method where a public key is used for encryption, and a private key is used for decryption. | We used AWS&#39;s Client-Side decryption, where a data is encrypted as it transfers from server to server, and only decrypted once it reaches the right server. | I have not been a victim of a phishing scheme, phishing schemes include fake emails, viral links, shady file downloads, and scam calls. |",
            "url": "https://jasoxddd.github.io/FastProject2/2023/01/27/Big-Ideas-response.html",
            "relUrl": "/2023/01/27/Big-Ideas-response.html",
            "date": " • Jan 27, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Collegeboard Scoring 3",
            "content": "Sample 1 . Catergory Score Comments . Purpose | 1 | The written response did both state the purpose and functionality of the program, and the program illustrates this purpose. | . Data Abstraction | 0 | The Data is shown being stored in a list, but the list is not shown to be accessed in the next part. | . Managing Complexity | 0 | There is a list, but it is not shown to be used to manage complexity, also, the program did not demonstrate how the program will be more complex without the use of the list. | . Procedural Abstraction | 1 | The program shows an procedure, and how it is used in the program. | . Algorithm Implementation | 1 | The program and how it demonstrates use of sequence, iteration, and selection, and demonstrates how it is called. | . Testing | 1 | The video and the response shows evidence of testing as well as demonstration of what would happen for all of the conditions. | . Total | 4/6 | . I did not notice that the response did not state how does the procedure contribute to the original program. I will be sure to avoid this mistake in the future. . Sample 2 . Catergory Score Comments . Purpose | 1 | The written response did both state the purpose and functionality of the program, and the program illustrates this purpose. | . Data Abstraction | 1 | The Data is shown being stored in a list, and is shown to be accessed in the next part. | . Managing Complexity | 1 | There is a list, and it is shown to be able to be used effectively to reduce the complexity needed for another program to have the same function | . Procedural Abstraction | 1 | The program shows an procedure, and how it is used in the program. | . Algorithm Implementation | 1 | The program and how it demonstrates use of sequence, iteration, and selection, and demonstrates how it is called. | . Testing | 1 | The video and the response shows evidence of testing as well as demonstration of what would happen for all of the conditions. | . Total | 6/6 | | . Sample 3 . Catergory Score Comments . Purpose | 1 | The written response did both state the purpose and functionality of the program, and the program illustrates this purpose. | . Data Abstraction | 0 | The Data is shown being stored in a list, but the list is not shown to be accessed in the next part, also, the description of the list stateList seems inaccurate, as stateList is only shown to be storing the state names, while the description described it as having the information in the more information dropDown as well. | . Managing Complexity | 0 | There is a list, but it is not shown to be used to manage complexity, and it does not describe how this program would be more complex without the use of this list. | . Procedural Abstraction | 0 | The program shows an procedure, but it does not have a parameter, nor does it have any calls of this procedure, and the program inaccurately describes the function of the procedure in that the procedure does not actually update the screen like the description said. | . Algorithm Implementation | 0 | The procedure did not demonstrate iteration. | . Testing | 0 | The procedure did not demonstrate the use of parameters, and it did not explain why the program produces the result when given th eparameters. | . Total | 1/6 | . I did not notice how the collegeboard also considered how the index value was set for the list of states and used that as part of why they deducted points, I will keep this in mind. . Sample 4 . Catergory Score Comments . Purpose | 1 | The written response did both state the purpose and functionality of the program, and the program illustrates this purpose. | . Data Abstraction | 1 | The Data is shown being stored in a list, and is shown to be accessed in the next part. | . Managing Complexity | 1 | There is a list, and it is shown to be able to be used effectively to reduce the complexity needed for another program to have the same function | . Procedural Abstraction | 1 | The program shows an procedure, and how it is used in the program. | . Algorithm Implementation | 1 | The program and how it demonstrates use of sequence, iteration, and selection, and demonstrates how it is called. | . Testing | 0 | The response did not indicate the specific arguments passed, nor does it indicate how the parameter is used, and it also did not describe how the result is formed. | . Total | 5/6 | | . Reflection . In this week&#39;s Scoring, I noticed how sometimes Collegeboard is very lenient with things, and sometimes they are very strict. I will notice in my project to specify how the procedure contributes to the overall program, as well as how the indices for a list is determined. Still, I think I&#39;m getting better at understanding what Collgeboard wants from me in the Create Performance Task, namely, . Clear answers that are detailed and specific to what is being asked. | An input that results in the program’s output and explain how | Have a list or lists that is used effectively to reduce the complexity | Describing how indices of a list is being determined by. | .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/01/21/Collegeboard-Scoring-3.html",
            "relUrl": "/2023/01/21/Collegeboard-Scoring-3.html",
            "date": " • Jan 21, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Frontend Blog",
            "content": "Frontend Viewing . Frontend Code . What this view is . This table aims to provide people with information on the nutrients on the fastfood industry. With the adding, updating and deleting of the information of the food items. The table will be updated by using the top table to add fast food entries, and the bottom table for updating and deleting the entries . How the view works (or is going to work) . The view is made from a mix of html and javascript. The Insert New Food Item part can have inputs that can be used to create a food item and all of its nutrients. The button is linked to a javascript function that will place the food item into a backend server, which will then place the items into the table below. Currently this function still does not work, since this is still a prototype. In the future, I will try to make sending of the json to and from the backend server available. .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/01/16/Frontend-Blog.html",
            "relUrl": "/2023/01/16/Frontend-Blog.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Object Oriented Programming",
            "content": "Terms . Class a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | Object is a instance of a class/template there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor the &quot;init&quot; method in a Python class | . | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions @property decorator (aka getter) enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | . | @name.setter decorator (aka setter) enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | . | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot; allows setters and getters to work with more natural variable name (name, email ...) | . | . | . # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json from datetime import date # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password, classOf, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self.classOf=classOf self.dob=dob self.age=self.calculate_age() # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # getter method for classOf def get_classOf(self): return self.classOf # setter method for classOf def set_classOf(self,classOf): self.classOf = classOf #getter method for DoB def get_dob(self): return self.dob # setter method for DoB and changing age def set_dob(self,dob): self.dob = dob self.age=self.calculate_age() def calculate_age(self): today = date.today() return today.year - self.dob.year - ((today.month, today.day) &lt; (self.dob.month, self.dob.day)) # getter method for age def get_age(self): return self.age # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;, classOf: &quot;{self.classOf}&quot;, dob: &quot;{self.dob}&quot;, age: &quot;{self.age}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: u = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;, classOf=1858, dob=date(1847,3,3)) # Find user print(&quot;print our user&quot;) print(u) # Change user print(&quot;changing our user&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u.set_classOf(1991) u.set_dob(date(1959,4,5)) # I have no idea lmao print(u) . print our user name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$0xc...&#34;, classOf: &#34;1858&#34;, dob: &#34;1847-03-03&#34;, age: &#34;175&#34; changing our user name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$eTM...&#34;, classOf: &#34;1991&#34;, dob: &#34;1959-04-05&#34;, age: &#34;63&#34; . Self-Created Class . Here is a class for fractions that I created, with functions for printing and getting variables and changing the built-in funtions for arithmetic methods . from math import * class Fraction: &quot;&quot;&quot;represents fractions&quot;&quot;&quot; def __init__(self, num, denom): &quot;&quot;&quot;Fraction(num,denom) -&gt; Fraction creates the fraction object representing num/denom&quot;&quot;&quot; if denom == 0: # raise an error if the denominator is zero raise ZeroDivisionError if num == 0: # set the fraction to 0/1 if numerator is 0 self.num = 0 self.denom = 1 return positive = True # keeps track of positivity if denom &lt; 0: # if denominator is negative, change it to positive and keeps track positive = not positive denom = -1 * denom if num &lt; 0: # do the same to numerator positive = not positive num = -1 * num self.num = int(num / gcd(num, denom)) # the gcd only works when both is positive self.denom = int(denom / gcd(num, denom)) if not positive: # change numerator to negative if positive is false self.num = -1 * self.num def set_numerator(self, num): &quot;&quot;&quot;Fraction.set_numerator(num) -&gt; None changes the numerator of the fraction&quot;&quot;&quot; self.__init__(num, self.denom) def get_numerator(self): &quot;&quot;&quot;Fraction.get_numerator() -&gt; int returns the numerator of the fraction&quot;&quot;&quot; return self.num def set_denominator(self, denom): &quot;&quot;&quot;Fraction.denominator(denom) -&gt; None changes the denominator of the fraction&quot;&quot;&quot; self.__init__(self.num, denom) def get_denominator(self): &quot;&quot;&quot;Fraction.get_denominator() -&gt; int returns the denominators of the fraction&quot;&quot;&quot; return self.denom def __str__(self): &quot;&quot;&quot;Fraction.__str__() -&gt; string returns a string representing the fraction&quot;&quot;&quot; return f&quot;{self.num}/{self.denom}&quot; def __float__(self): &quot;&quot;&quot;Fraction.__float__() -&gt; float returns a float representing the value of the fraction&quot;&quot;&quot; return self.num / self.denom def __add__(self, other): &quot;&quot;&quot;Fraction+Fraction -&gt; Fraction returns a Fraction that is the results of adding two together&quot;&quot;&quot; denomFinal = int(lcm(self.denom, other.denom)) numFinal = int(self.num * denomFinal / self.denom + other.num * denomFinal / other.denom) return Fraction(numFinal, denomFinal) def __sub__(self, other): &quot;&quot;&quot;Fraction-Fraction -&gt; Fraction returns a Fraction that is the results of subtraction one fraction from another&quot;&quot;&quot; denomFinal = int(lcm(self.denom, other.denom)) numFinal = int(self.num * denomFinal / self.denom - other.num * denomFinal / other.denom) return Fraction(numFinal, denomFinal) def __mul__(self, other): &quot;&quot;&quot;Fraction*Fraction -&gt; Fraction returns a Fraction that is the results of multiplying two together&quot;&quot;&quot; return Fraction(self.num * other.num, self.denom * other.denom) def __truediv__(self, other): &quot;&quot;&quot;Fraction/Fraction -&gt; Fraction returns a Fraction that is the results of dividing one fraction by another&quot;&quot;&quot; return Fraction(self.num * other.denom, self.denom * other.num) def __eq__(self, other): &quot;&quot;&quot;Fraction==Fraction -&gt; boolean returns a boolean saying if two fraction is equal to each other&quot;&quot;&quot; if self.num == other.num and self.denom == other.denom: return True else: return False a=Fraction(1,2) b=Fraction(2,3) print(a,b) print(a+b) print(b-a) print(a*b) print(b/a) print(float(a)) print(a.get_numerator()) print(b.get_denominator()) a.set_denominator(4) b.set_numerator(1) print(a,b) print(a==b) . 1/2 2/3 7/6 1/6 1/3 4/3 0.5 1 3 1/4 1/3 False .",
            "url": "https://jasoxddd.github.io/FastProject2/apcsp/2023/01/12/oop.html",
            "relUrl": "/apcsp/2023/01/12/oop.html",
            "date": " • Jan 12, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Collegeboard Grading 2",
            "content": "Sample 1 . Catergory Score . Purpose | 0 | . Data Abstraction | 1 | . Managing Complexity | 0 | . Procedural Abstraction | 0 | . Algorithm Implementation | 0 | . Testing | 1 | . Total | 2/6 | . The video and the written response do not demonstrate a creative purpose but merely restating the function of the program. The Input and the Output os also not clearly seperated in the purpose, giving it a 0. Data abstraction is apparent with the effective use of lists. The Code is not complex, and the response does not explain why it was complex. The algorithm of the evaluateGuess function uses the variable guess, but it is also used outside of the funciton. The response does not indicate why the algorithm demonstrate complexity. The algorithm demonstrates iteration, sequencing, and selection, but its description is not clear enough for it to be replicated. However, the program did demonstrate testing, with one wrong answers and win conditions, as well as clear description of what&#39;s being tested. . After reviewing the Collgeboard scoring, I noticed that Data Abstraction was given a 0, I graded it a 1 because I had not noticed that there was an unused list. I will be on the lookout for anything like this in the future. . Sample 2 . Catergory Score . Purpose | 1 | . Data Abstraction | 1 | . Managing Complexity | 1 | . Procedural Abstraction | 1 | . Algorithm Implementation | 1 | . Testing | 1 | . Total | 6/6 | . The written response reflect a clear purpose and the video demonstrates it well. The written response demonstrates that information is stored in one list, without any overflowing of variables, and also shows how it is used. The code does a good job with managing complexity here, with the use of wordlist to manage the words and use them. The program clearly shows a procedure and how it is used well. The procedure shows sequencing, selection(if), and iteration(while), and includes a detailed explanation of the procedure enough to recreate it from just the description. The program describes in detail what both testing sequences is used for and what happens in the program as those were run. All of this combined gives it a perfect score with 6/6 . My evaluation is the same as collegeboard&#39;s. . Sample 3 . Catergory Score . Purpose | 0 | . Data Abstraction | 1 | . Managing Complexity | 1 | . Procedural Abstraction | 1 | . Algorithm Implementation | 1 | . Testing | 1 | . Total | 5/6 | . The written response did not state the purpose but merrly stated the functionality of the program. The written response indicated that variables are stored in one list and that it&#39;s being used properly. The program does a nice job with managing complexity with its list to store the numbers and using them. The procedure is demonstrated well and suits the program&#39;s purpose. The procedure also have sequencing, selection(if-else if-else), and iteration(for), and includes a instruction detailed enough to replicate it from the description. The program describes in detail what both testing sequence is used for and why is the results intended. Only the purpose is lacking with a score of 5/6 . My evaluation is the same as collegeboard&#39;s . Sample 4 . Catergory Score . Purpose | 1 | . Data Abstraction | 0 | . Managing Complexity | 0 | . Procedural Abstraction | 1 | . Algorithm Implementation | 1 | . Testing | 0 | . Total | 3/6 | . The written response correctly indicated the purpose of the program instead of the functionality. The response shows how the data is stored but not how it is used, putting it off of the data abstraction method. The list mentioned did not help to manage complexity, only acting as a counter. The procedure uses a parameter and is used to complete parts of the procedure. The Algorithm has sequencing, selection(if) and iteration(repeat), and it describes the algorithm in enough detail to replicate it from scratch (pun not intended). The test cases are not explaned properly, with not the arguments but the conditions for each case. . My evaluation is the same as collegeboard&#39;s . Summary . Through these gradings, I learned of the following things. . It is important for the response to state the greater purpose of the program, not the functionality | All variables declared should be used in an effective way | If there is a easier way to do something, do it | The test cases should test how the program will respond to arguments, and not the conditions I&#39;ll keep these in mind as I do my performance task project. | .",
            "url": "https://jasoxddd.github.io/FastProject2/2023/01/12/collegeboard-scoring-2.html",
            "relUrl": "/2023/01/12/collegeboard-scoring-2.html",
            "date": " • Jan 12, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Algorithms and Logic",
            "content": "Algorithm . An algorithm typically means &#39;code&#39; that solves a problem. Designing an algorithm often requires you to learn the Tech first and then consider how you design your code and algorithms. Code design can take many iterations. . Truth Tables . My topic for this blog is Truth Tables. The illustration that follows displays the results of logical operators AND, OR, XOR, NOT versus binary 1 and 0. The output produces a &#39;Truth Table&#39;. . Exploring Truth Tables operations . Exploration of this topic requires searching the language for logical operators, then figuring out how to display condition and test result. . Bitwise operations for Truth Tables typically represent 1 - True and 0 - False. | Logical expression in iteration and selection statements result in True or False | . My objective is Truth Tables. But in my exploration I did both Truth Table and Expression syntax . print(&quot;OR&quot;) print( &quot;1 | 0 = &quot;, 1 | 0) print( &quot;~(1 | 0) = &quot;, ~(1 | 0) % 2) # 1 is an integer, not a bit so remainder (modulo) does trick print(&quot;AND&quot;) print( &quot;1 &amp; 0 = &quot;, 1 &amp; 0) print( &quot;~(1 &amp; 0) = &quot;, ~(1 &amp; 0) % 2) # modulo again print(&quot;XOR&quot;) print( &quot;1 ^ 1 = &quot;, 1 ^ 1) print() # Boolean Tests print(&quot;Boolean OR&quot;) print( &quot;True or False = &quot;, True or False) print(&quot;Boolean AND&quot;) print( &quot;True and False = &quot;, True and False) print(&quot;Boolean XOR&quot;) print( &quot;True != True = &quot;, True != True) . OR 1 | 0 = 1 ~(1 | 0) = 0 AND 1 &amp; 0 = 0 ~(1 &amp; 0) = 1 XOR 1 ^ 1 = 0 Boolean OR True or False = True Boolean AND True and False = False Boolean XOR True != True = True . Algorithm 1 . This algorithm focuses on small reusable procedures/functions (def) for bitwise tests. From the exploratory experience above it seems like a lot of typing would be necessary to represent possibilities. . import operator # functions for all comparisons, logical operations, mathematical operations and sequence operations # builds truth table def truth_options(): a_opts = [1, 0] b_opts = [1, 0] return [(a, b) for a in a_opts for b in b_opts] # double for permutes options # provides equivalent function lookup for bitwise using operator functions def bitwise_options(op): ops = {&#39;&amp;&#39;: operator.and_, &#39;|&#39;: operator.or_, &#39;^&#39;: operator.xor} return ops[op] # control/eval for bitwise operators, selection is based on number of operators def bitwise_eval(op, op2=&quot;&quot;): if op2 == &quot;&quot;: op_func = bitwise_options(op) print(f&quot;Bitwise {op}&quot;) for a, b in truth_options(): print(f&quot;{a} {op} {b} is {op_func(a, b)}&quot;) else: op2_func = bitwise_options(op2) print(f&quot;Bitwise {op}&quot;) for a, b in truth_options(): print(f&quot;{op}({a} {op2} {b}) is {(1, 0)[op2_func(a, b)]}&quot;) # opposite: index 0 returns 1, index 1 return 0 def method1(): bitwise_eval(&quot;&amp;&quot;) bitwise_eval(&quot;NAND&quot;, &quot;&amp;&quot;) bitwise_eval(&quot;|&quot;) bitwise_eval(&quot;NOR&quot;, &quot;|&quot;) bitwise_eval(&quot;^&quot;) # call bitwise evaluation of truth table if __name__ == &quot;__main__&quot;: print(&quot;***** Method 1 *****&quot;) method1() . ***** Method 1 ***** Bitwise &amp; 1 &amp; 1 is 1 1 &amp; 0 is 0 0 &amp; 1 is 0 0 &amp; 0 is 0 Bitwise NAND NAND(1 &amp; 1) is 0 NAND(1 &amp; 0) is 1 NAND(0 &amp; 1) is 1 NAND(0 &amp; 0) is 1 Bitwise | 1 | 1 is 1 1 | 0 is 1 0 | 1 is 1 0 | 0 is 0 Bitwise NOR NOR(1 | 1) is 0 NOR(1 | 0) is 0 NOR(0 | 1) is 0 NOR(0 | 0) is 1 Bitwise ^ 1 ^ 1 is 0 1 ^ 0 is 1 0 ^ 1 is 1 0 ^ 0 is 0 . Truth Table - Algorithm 2 . This algorithm above seemed to me to lose clarity with all the functions. The second attempt focuses on truth tables as a linear sequence, with loops for required repetitions. This seemed more understandable to me than my 1st attempt. . def method2(): truth_table = [[1,1], [1,0], [0,1], [0,0]] for a, b in truth_table: print(f&quot;and {a} &amp; {b}: {a &amp; b}&quot;) for a, b in truth_table: print(f&quot;nand ~({a} &amp; {b}): {((a &amp; b) + 1) % 2}&quot;) # warning: ~ negates entire integer without modulo for a, b in truth_table: print(f&quot;or {a} | {b}: {a | b}&quot;) for a, b in truth_table: print(f&quot;nor ~({a} | {b}): {((a | b) + 1) % 2}&quot;) # warning: see above for a, b in truth_table: print(f&quot;xor {a} ^ {b}: {a ^ b}&quot;) # call bitwise evaluation of truth table if __name__ == &quot;__main__&quot;: print(&quot;***** Method 2 *****&quot;) method2() . ***** Method 2 ***** and 1 &amp; 1: 1 and 1 &amp; 0: 0 and 0 &amp; 1: 0 and 0 &amp; 0: 0 nand ~(1 &amp; 1): 0 nand ~(1 &amp; 0): 1 nand ~(0 &amp; 1): 1 nand ~(0 &amp; 0): 1 or 1 | 1: 1 or 1 | 0: 1 or 0 | 1: 1 or 0 | 0: 0 nor ~(1 | 1): 0 nor ~(1 | 0): 0 nor ~(0 | 1): 0 nor ~(0 | 0): 1 xor 1 ^ 1: 0 xor 1 ^ 0: 1 xor 0 ^ 1: 1 xor 0 ^ 0: 0 . Extra: Order of Operators . A program showcasing that the and operator has higher hiearchy than the or operator, with (a and b) or c and a and b or c being equivalent . def method3(): truth_table = [[1,1], [1,0], [0,1], [0,0]] for i in [0,1]: for j in [0,1]: for k in [0,1]: print(str(i)+&quot; and &quot;+str(j)+&quot; or &quot;+str(k)+&quot;: &quot;+str(i&amp;j|k)) print(&quot;(&quot;+str(i)+&quot; and &quot;+str(j)+&quot;) or &quot;+str(k)+&quot;: &quot;+str((i&amp;j)|k)) print(str(i)+&quot; and (&quot;+str(j)+&quot; or &quot;+str(k)+&quot;): &quot;+str(i&amp;(j|k))) method3() . 0 and 0 or 0: 0 (0 and 0) or 0: 0 0 and (0 or 0): 0 0 and 0 or 1: 1 (0 and 0) or 1: 1 0 and (0 or 1): 0 0 and 1 or 0: 0 (0 and 1) or 0: 0 0 and (1 or 0): 0 0 and 1 or 1: 1 (0 and 1) or 1: 1 0 and (1 or 1): 0 1 and 0 or 0: 0 (1 and 0) or 0: 0 1 and (0 or 0): 0 1 and 0 or 1: 1 (1 and 0) or 1: 1 1 and (0 or 1): 1 1 and 1 or 0: 1 (1 and 1) or 0: 1 1 and (1 or 0): 1 1 and 1 or 1: 1 (1 and 1) or 1: 1 1 and (1 or 1): 1 . Linear Sequence of code . The order of executions is strictly from top to bottom. This is good for learning, but is typically a poor method for an Algorithm! This was my 1st exploration above. . Procedure (Function) . A Procedure is a set of code instructions that has been abstracted into logical parts. Each code abstraction is called &quot;Procedural Abstraction&quot;. . In Python, using procedures (def) means you are starting to write &quot;good&quot; code vs &quot;bad&quot; code, mostly in terms of reusability of logic. | A procedure needs to be activated or called, this is performed in the main selections above. | . Hacks . As we explore the algorithm Unit students will be designing lessons and homework. Each lesson will have Hacks. Here are some hacks that could go with the lesson above. The three weeks after Thanksgiving will be focused on this activity and build personal portfolio. . Try to build a Truth Table as shown above in Python, but switch to JavaScript... . Begin by showing understanding of problem using console.log, this problem can be done in Jupyter Notebook | Build a Truth Table in JavaScript showing output in HTML, this problem is best in FastPages | . Pick your Algorithmic hack, build in Python and JavaScript. Here are some ideas.. . Binary to Hexadecimal to Decimal conversions | Fibonacci | Palindrome | Other | . Come up with a Procedure/Function that show... . Data Abstraction | Procedural Abstraction | Algorithm using iteration and selection | Frontend / Backend, using an API and persistent storage | .",
            "url": "https://jasoxddd.github.io/FastProject2/2022/11/17/AP-logic-and-algos.html",
            "relUrl": "/2022/11/17/AP-logic-and-algos.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Big Idea 2 'Binary Numbers'",
            "content": "Binary Abstraction and Logic Gates . Concepts and Visualization Ideas . Multiply and Divide by 2 (Shift) . Shifting bits is a common computer operation Look for shift on w3schools . UI Concept/Design . n Right Shifts (divides by 2^n); n Left Shifts (mutliplies by 2^n) Add buttons for “«” and “ »” . Logic of Shift . . Elaboration of Shift . Arithmetic Shift . In an arithmetic shift, the bits that are shifted out of either end are discarded. In a left arithmetic shift, zeros are shifted in on the right; in a right arithmetic shift, the sign bit (the MSB in two’s complement) is shifted in on the left, thus preserving the sign of the operand. This example uses an 8-bit register, interpreted as two’s complement: In the first case, the leftmost digit was shifted past the end of the register, and a new 0 was shifted into the rightmost position. In the second case, the rightmost 1 was shifted out (perhaps into the carry flag), and a new 1 was copied into the leftmost position, preserving the sign of the number. . Unicode vs ASCII . Unicode can be UTF-8, 16 or 32, ASCII is preserved in Unicode. . Sample of Unicode characters. . UI Concept/Design . Original ASCII . The ASCII label in picture should be change based off of the type of evaluation you are doing. Bits displayed, label, and evaluation would be specific to evaluation type: . ASCII - 7 bits | UTF-8 | UTF-16 | UTF-32 | . Color Codes . Color code is a 24 bit abstraction. . 255 * 255 * 255 combinations of R, G, B . UI Design . by Anthony Vo 3 rows representing R, G, B Resulting color displayed in block . Logic Gates . Logic Gates can be simulated with 2 bits . Look for bitwise operators on w3schools . UI Concept . Logic Gates Establish check boxes for A / B on and off Show result of Boolean Expression using Gate visual . UI Design . by Kylie Scharf AB checkboxes with Submit button Table with Symbol, Description, and Result . Logic of Logic Gates . A logic gate can have two inputs (a,b) and by how changing these inputs it impacts the output(c). . There are four possible inputs: . 0 0 | 0 1 | 1 0 | 1 1 | . Understanding the output enables us to understand a logical expressions. All outputs are routed in Logic Gates (similar to how a language is routed in Latin). . AND is true for 1 1; NAND is true opposite of AND 0 0, 0 1, 1 0 | OR is true for 1 1, 0 1, 1 0, NOR is true opposite of OR 0 0 | XOR is true for 0 1, 1 0 | . Practical Application . . Unsigned Addition . Here we are requesting 3 rows of bits to simulate Math. This could be done with 4, 8, or 16 bits. . Initial UI Implementation . Action buttons for +1 and -1 Additional actions for Turn On and Turn Off . Unsigned Addition . . Signed Addition . Integers in most languages are int8, int16, int32, or int64. They typically reserve left most bit for sign. . Common concept for Integer Math . Positive number . Basic concept, but not typically used . Negative number . Inverting numbers, twos complement . Two’s complement allows adding for signed and unsigned numbers . Basic concept is to invert/negate bits to produce negative. This allows numbers to be added together for expected results. » and »&gt; have been adapted to handle signed and zero filled shifting. . Technical helpers . Algorithm in Jinja2 to limit Bits per row . 8 images per row by Kylie Scharf Modulo 8 algorithm add &lt;tr&gt; for every eight bits (code). . Binary Addition overview . CHAPTER 8 - Binary Addition and Two’s Complement Overview find by Val Wilson . Hacks .",
            "url": "https://jasoxddd.github.io/FastProject2/collegeboard/binary",
            "relUrl": "/collegeboard/binary",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Blog of Night @ the Museum",
            "content": "This year was my first in-person Night at the Museum, and it was pretty fun! I arrived a bit late since I had a class prior, and I wasn’t able to see everything. Still, it was nice. . APCSA . I arrived at APCSA, there were a lot of good ones, and from what I can see there are a lot of quizzes, I played a couple of them. One of them is like an actual Kahoot quiz, so that’s pretty fun. The quiz showcased some questions at the right and options in colors at the right. When you get one right, you are able to get scores, with more streaks the more points. I played a couple rounds, and it was really nicely made. . Photography . I really like a lot of the photos, especially the ones that are of. I especially liked the black and white ones, they have a really nice atmosphere. This one about the sunset was pretty beautiful too, with the dark blue colors of the sky and the bright orange of the clouds and the setting sun. . 3D Animation . When I got here, the main tour is over, but I still saw all of the donuts and the rooms. One particular one is this one room render that was white on one side and all dark and green on the other. Really nice! I aslo liked the big display, which showed a women waking from her sleep, and then it shows the modeling process, and it really showed how much time went into the making . Future Projects . I would want to construct a card game at one of the pages, it will feature the normal cards with images and a set of rules and an AI that you can play against. I want to make that project. .",
            "url": "https://jasoxddd.github.io/FastProject2/2022/11/08/natm-post.html",
            "relUrl": "/2022/11/08/natm-post.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Blog of my Tri 1 Finals",
            "content": "Notice the lack of problems? That’s a reference to the fact that I got every question on the Tri 1 Finals correct without looking up anything. 50/50 let’s go .",
            "url": "https://jasoxddd.github.io/FastProject2/2022/11/07/test-blog.html",
            "relUrl": "/2022/11/07/test-blog.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Algorithms and Logic",
            "content": "Algorithm . An algorithm typically means &#39;code&#39; that solves a problem. Designing an algorithm often requires you to learn the Tech first and then consider how you design your code and algorithms. Code design can take many iterations. . Truth Tables . My topic for this blog is Truth Tables. The illustration that follows displays the results of logical operators AND, OR, XOR, NOT versus binary 1 and 0. The output produces a &#39;Truth Table&#39;. . Exploring Truth Tables operations . Exploration of this topic requires searching the language for logical operators, then figuring out how to display condition and test result. . Bitwise operations for Truth Tables typically represent 1 - True and 0 - False. | Logical expression in iteration and selection statements result in True or False | . My objective is Truth Tables. But in my exploration I did both Truth Table and Expression syntax . print(&quot;OR&quot;) print( &quot;1 | 0 = &quot;, 1 | 0) print( &quot;~(1 | 0) = &quot;, ~(1 | 0) % 2) # 1 is an integer, not a bit so remainder (modulo) does trick print(&quot;AND&quot;) print( &quot;1 &amp; 0 = &quot;, 1 &amp; 0) print( &quot;~(1 &amp; 0) = &quot;, ~(1 &amp; 0) % 2) # modulo again print(&quot;XOR&quot;) print( &quot;1 ^ 1 = &quot;, 1 ^ 1) print() # Boolean Tests print(&quot;Boolean OR&quot;) print( &quot;True or False = &quot;, True or False) print(&quot;Boolean AND&quot;) print( &quot;True and False = &quot;, True and False) print(&quot;Boolean XOR&quot;) print( &quot;True != True = &quot;, True != True) . OR 1 | 0 = 1 ~(1 | 0) = 0 AND 1 &amp; 0 = 0 ~(1 &amp; 0) = 1 XOR 1 ^ 1 = 0 Boolean OR True or False = True Boolean AND True and False = False Boolean XOR True != True = True . Algorithm 1 . This algorithm focuses on small reusable procedures/functions (def) for bitwise tests. From the exploratory experience above it seems like a lot of typing would be necessary to represent possibilities. . import operator # functions for all comparisons, logical operations, mathematical operations and sequence operations # builds truth table def truth_options(): a_opts = [1, 0] b_opts = [1, 0] return [(a, b) for a in a_opts for b in b_opts] # double for permutes options # provides equivalent function lookup for bitwise using operator functions def bitwise_options(op): ops = {&#39;&amp;&#39;: operator.and_, &#39;|&#39;: operator.or_, &#39;^&#39;: operator.xor} return ops[op] # control/eval for bitwise operators, selection is based on number of operators def bitwise_eval(op, op2=&quot;&quot;): if op2 == &quot;&quot;: op_func = bitwise_options(op) print(f&quot;Bitwise {op}&quot;) for a, b in truth_options(): print(f&quot;{a} {op} {b} is {op_func(a, b)}&quot;) else: op2_func = bitwise_options(op2) print(f&quot;Bitwise {op}&quot;) for a, b in truth_options(): print(f&quot;{op}({a} {op2} {b}) is {(1, 0)[op2_func(a, b)]}&quot;) # opposite: index 0 returns 1, index 1 return 0 def method1(): bitwise_eval(&quot;&amp;&quot;) bitwise_eval(&quot;NAND&quot;, &quot;&amp;&quot;) bitwise_eval(&quot;|&quot;) bitwise_eval(&quot;NOR&quot;, &quot;|&quot;) bitwise_eval(&quot;^&quot;) # call bitwise evaluation of truth table if __name__ == &quot;__main__&quot;: print(&quot;***** Method 1 *****&quot;) method1() . ***** Method 1 ***** Bitwise &amp; 1 &amp; 1 is 1 1 &amp; 0 is 0 0 &amp; 1 is 0 0 &amp; 0 is 0 Bitwise NAND NAND(1 &amp; 1) is 0 NAND(1 &amp; 0) is 1 NAND(0 &amp; 1) is 1 NAND(0 &amp; 0) is 1 Bitwise | 1 | 1 is 1 1 | 0 is 1 0 | 1 is 1 0 | 0 is 0 Bitwise NOR NOR(1 | 1) is 0 NOR(1 | 0) is 0 NOR(0 | 1) is 0 NOR(0 | 0) is 1 Bitwise ^ 1 ^ 1 is 0 1 ^ 0 is 1 0 ^ 1 is 1 0 ^ 0 is 0 . Truth Table - Algorithm 2 . This algorithm above seemed to me to lose clarity with all the functions. The second attempt focuses on truth tables as a linear sequence, with loops for required repetitions. This seemed more understandable to me than my 1st attempt. . def method2(): truth_table = [[1,1], [1,0], [0,1], [0,0]] for a, b in truth_table: print(f&quot;and {a} &amp; {b}: {a &amp; b}&quot;) for a, b in truth_table: print(f&quot;nand ~({a} &amp; {b}): {((a &amp; b) + 1) % 2}&quot;) # warning: ~ negates entire integer without modulo for a, b in truth_table: print(f&quot;or {a} | {b}: {a | b}&quot;) for a, b in truth_table: print(f&quot;nor ~({a} | {b}): {((a | b) + 1) % 2}&quot;) # warning: see above for a, b in truth_table: print(f&quot;xor {a} ^ {b}: {a ^ b}&quot;) # call bitwise evaluation of truth table if __name__ == &quot;__main__&quot;: print(&quot;***** Method 2 *****&quot;) method2() . ***** Method 2 ***** and 1 &amp; 1: 1 and 1 &amp; 0: 0 and 0 &amp; 1: 0 and 0 &amp; 0: 0 nand ~(1 &amp; 1): 0 nand ~(1 &amp; 0): 1 nand ~(0 &amp; 1): 1 nand ~(0 &amp; 0): 1 or 1 | 1: 1 or 1 | 0: 1 or 0 | 1: 1 or 0 | 0: 0 nor ~(1 | 1): 0 nor ~(1 | 0): 0 nor ~(0 | 1): 0 nor ~(0 | 0): 1 xor 1 ^ 1: 0 xor 1 ^ 0: 1 xor 0 ^ 1: 1 xor 0 ^ 0: 0 . Linear Sequence of code . The order of executions is strictly from top to bottom. This is good for learning, but is typically a poor method for an Algorithm! This was my 1st exploration above. . Procedure (Function) . A Procedure is a set of code instructions that has been abstracted into logical parts. Each code abstraction is called &quot;Procedural Abstraction&quot;. . In Python, using procedures (def) means you are starting to write &quot;good&quot; code vs &quot;bad&quot; code, mostly in terms of reusability of logic. | A procedure needs to be activated or called, this is performed in the main selections above. | . Hacks . As we explore the algorithm Unit students will be designing lessons and homework. Each lesson will have Hacks. Here are some hacks that could go with the lesson above. The three weeks after Thanksgiving will be focused on this activity and build personal portfolio. . Try to build a Truth Table as shown above in Python, but switch to JavaScript... . Begin by showing understanding of problem using console.log, this problem can be done in Jupyter Notebook | Build a Truth Table in JavaScript showing output in HTML, this problem is best in FastPages | . Pick your Algorithmic hack, build in Python and JavaScript. Here are some ideas.. . Binary to Hexadecimal to Decimal conversions | Fibonacci | Palindrome | Other | . Come up with a Procedure/Function that show... . Data Abstraction | Procedural Abstraction | Algorithm using iteration and selection | Frontend / Backend, using an API and persistent storage | .",
            "url": "https://jasoxddd.github.io/FastProject2/2022/11/07/AP-logic-and-algos.html",
            "relUrl": "/2022/11/07/AP-logic-and-algos.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Fetch of Youtube data with RapidAPI",
            "content": "A table created using the fetch function from javascript. ssjsjsj . . Thumbnail Title Creator Views Length .",
            "url": "https://jasoxddd.github.io/FastProject2/data/youtube",
            "relUrl": "/data/youtube",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Simple Youtube API",
            "content": "Youtube API . Below is the python code that I used to extract data from the Youtube API . import requests # imports the module necessary for API import json # Below is the constants method = &#39;GET&#39; url = &#39;https://youtube138.p.rapidapi.com/search/&#39; params = { &quot;q&quot;: &#39;despacito&#39;, &quot;hl&quot;: &#39;en&#39;, &quot;gl&quot;: &#39;US&#39; } headers = { &#39;X-RapidAPI-Key&#39;: &#39;6615470177msh2eb9d9776c82332p163317jsn65585d1a22d9&#39;, &#39;X-RapidAPI-Host&#39;: &#39;youtube138.p.rapidapi.com&#39; } # Pull the response = requests.request(method, url, headers=headers,params=params) print(response.text) # End Rapid API Code json = response.json() . {&#34;contents&#34;:[{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /8Lwf4LCR2VmxD2JKiozRu7Lo2jGdnhRs42NawHmMN_xJ8TdW-30e3J9DhumEksivp1Esog4A=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCxoq-PAQeAdk_zyg8YS0JqA&#34;,&#34;title&#34;:&#34;Luis Fonsi&#34;},&#34;badges&#34;:[&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;#LuisFonsi #Despacito #Imposible #Calypso #EchamelaCulpa #NadaEsImposible #NothingisImpossible #LF Music video by Luis u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:282,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /kJQP7kiw5Fk /mqdefault_6s.webp?du=3000&amp;sqp=CMSGk5oG&amp;rs=AOn4CLCGFxf7j81b92IfnQiqr-mJS45ZzQ&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:7983708275},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /kJQP7kiw5Fk /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBCg9eudi8DoM9M-qjPgJBGGkuIgA&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /kJQP7kiw5Fk /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDMnrGS7UUfb2FyiKXj-RL4eGknVg&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi - Despacito ft. Daddy Yankee&#34;,&#34;videoId&#34;:&#34;kJQP7kiw5Fk&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /mEz4CxDP2HkZBDngPa9WDxVfYtcvBPgXPcT2efuF-iKdu2cCaNQmEFX7Q7KheT2TXUV5qF_H=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /taznetwork&#34;,&#34;channelId&#34;:&#34;UCJ6ERWrxZzb9Ua3oeRcIe0g&#34;,&#34;title&#34;:&#34;Taz Network&#34;},&#34;badges&#34;:[&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;Luis Fonsi u2012 Despacito Lyrics u270d ufe0f Ay, u00a1Fonsi! u00a1D.Y.! Ohhh, oh, no, oh, no, oh Hey, yeah! Dididiri Daddy, go! S u00ed, sabes que ya u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:241,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /gm3-m2CFVWM /mqdefault_6s.webp?du=3000&amp;sqp=CKfokpoG&amp;rs=AOn4CLDc-nOoXzvef6O-ZYdjH7u0Tid6Lg&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:25797923},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /gm3-m2CFVWM /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBdnMRJ4yJ6vHumS_nU46yxFLqRjQ&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /gm3-m2CFVWM /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDDVqxUl1l2I_vZGdTz650GR7VsyQ&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi u2012 Despacito (Lyrics / Lyric Video) ft. Daddy Yankee&#34;,&#34;videoId&#34;:&#34;gm3-m2CFVWM&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu9h4dcjYLH6dO_nC56ZnIWI8R0XiNURV7cz5DPgkQ=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /MasterDumb&#34;,&#34;channelId&#34;:&#34;UC_s5dj6ILpVm3KdSHwpx7zw&#34;,&#34;title&#34;:&#34;MasterDumb&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;No copyright infringement intended. For entertainment purposes only. All rights belong to the artist. Promo only Masterdumb u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:251,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /dr_GAJZviR0 /mqdefault_6s.webp?du=3000&amp;sqp=CJiIk5oG&amp;rs=AOn4CLCMMBIeljTjswZmyJBtUVB_tjlrGg&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:25451499},&#34;thumbnails&#34;:[{&#34;height&#34;:270,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /dr_GAJZviR0 /hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD5YIkR5KbMQOxTcaRoIxBF9Vm_6w&#34;,&#34;width&#34;:480}],&#34;title&#34;:&#34;Luis Fonsi, Daddy Yankee - Despacito ft. Justin Bieber&#34;,&#34;videoId&#34;:&#34;dr_GAJZviR0&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /8Lwf4LCR2VmxD2JKiozRu7Lo2jGdnhRs42NawHmMN_xJ8TdW-30e3J9DhumEksivp1Esog4A=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCxoq-PAQeAdk_zyg8YS0JqA&#34;,&#34;title&#34;:&#34;Luis Fonsi&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Luis Fonsi Despacito ft. Daddy Yankee (audio) LETRA: u00a1Ay! Fonsi DY Oh-oh Oh no, oh no Oh, eh-yeh (Daddy) Go! S u00ed, sabes que u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:229,&#34;movingThumbnails&#34;:null,&#34;publishedTimeText&#34;:&#34;4 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:1058091},&#34;thumbnails&#34;:[{&#34;height&#34;:270,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /2bHBUs-k3ac /hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLA02SrTWMxpzWcz0nTBfWQPiUsKjQ&#34;,&#34;width&#34;:480}],&#34;title&#34;:&#34;Luis Fonsi Despacito ft. Daddy Yankee (audio)&#34;,&#34;videoId&#34;:&#34;2bHBUs-k3ac&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /8Lwf4LCR2VmxD2JKiozRu7Lo2jGdnhRs42NawHmMN_xJ8TdW-30e3J9DhumEksivp1Esog4A=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCxoq-PAQeAdk_zyg8YS0JqA&#34;,&#34;title&#34;:&#34;Luis Fonsi&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Provided to YouTube by Universal Music Group Despacito u00b7 Luis Fonsi Despacito u2117 2017 Universal Music Latino Released on: u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:229,&#34;movingThumbnails&#34;:null,&#34;publishedTimeText&#34;:null,&#34;stats&#34;:{&#34;views&#34;:963742},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /t3IyUATcAbE /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLB8rLazbFNSKES97_IJvr6SM7ibsA&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /t3IyUATcAbE /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLA8QW4FxJviimyOoDLmSbRD3g9-tw&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Despacito&#34;,&#34;videoId&#34;:&#34;t3IyUATcAbE&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /PXmGMkaOj09GwOg25CTAcctjhDW6AoufmBlykGN8ACK9llYlbReoBfyqqzTdkAwaXLwFlNv6q8U=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /channel /UCdR2fnIkKmDpAe7vDnVEBVQ&#34;,&#34;channelId&#34;:&#34;UCdR2fnIkKmDpAe7vDnVEBVQ&#34;,&#34;title&#34;:&#34;Fans Tiktok&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:null,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:14,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /_8NRJEAb4-s /mqdefault_6s.webp?du=3000&amp;sqp=CM76kpoG&amp;rs=AOn4CLDiQSri2-cfYZdIKoMgtLLtO5Bzmw&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 months ago&#34;,&#34;stats&#34;:{&#34;views&#34;:38965168},&#34;thumbnails&#34;:[{&#34;height&#34;:720,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /_8NRJEAb4-s /hq720_2.jpg?sqp=-oaymwEdCJYDENAFSFXyq4qpAw8IARUAAIhCcAHAAQbQAQE=&amp;rs=AOn4CLDNHzpzX_Is1LcknUd9-h5bymStmw&#34;,&#34;width&#34;:406}],&#34;title&#34;:&#34;(Despacito Magik Edit) New Chaljch Which one is more beautiful ud83e udd14 #tiktok&#34;,&#34;videoId&#34;:&#34;_8NRJEAb4-s&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /mEz4CxDP2HkZBDngPa9WDxVfYtcvBPgXPcT2efuF-iKdu2cCaNQmEFX7Q7KheT2TXUV5qF_H=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /taznetwork&#34;,&#34;channelId&#34;:&#34;UCJ6ERWrxZzb9Ua3oeRcIe0g&#34;,&#34;title&#34;:&#34;Taz Network&#34;},&#34;badges&#34;:[&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;Lyrics for Despacito - Justin Bieber [Intro: Justin Bieber] Come on over in my direction So thankful for that, it&#39;s such a blessin&#39;, yeah u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:231,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /whwe0KD_rGw /mqdefault_6s.webp?du=3000&amp;sqp=CNDzkpoG&amp;rs=AOn4CLB8AmM2nFDhaI4LmlK2-XxOvjtP_Q&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:348605411},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /whwe0KD_rGw /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAHpsL01E241DCvjgTvwUb2KlYvgQ&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /whwe0KD_rGw /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLB5VYQskPIpD-6g0uT7d1wYIhbVTg&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Justin Bieber u2013 Despacito (Lyrics) ud83c udfa4 ft. Luis Fonsi &amp; Daddy Yankee [Pop]&#34;,&#34;videoId&#34;:&#34;whwe0KD_rGw&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu-a8XFPIZ0-jBW6W8vSo22fMb3PgXQOT4rBlFPJFA=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /ThevoiceGlobal&#34;,&#34;channelId&#34;:&#34;UCJYtYkiGldqX6Ne938j-k2g&#34;,&#34;title&#34;:&#34;The Voice Global&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;The single &#34;Despacito &#34; has made history as the most frequently streamed song of all time. Therefore, we created a compilation u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:360,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /l6xuHunzqXk /mqdefault_6s.webp?du=3000&amp;sqp=CM2ck5oG&amp;rs=AOn4CLA1xa1vzLCsdkZdJCcYfDN7ZW5u3Q&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;3 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:5097354},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /l6xuHunzqXk /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBMaenQtNjDLaanEEA8VsqYc4SkFg&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /l6xuHunzqXk /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAWv0O4PFHKfZIlVQUg5gXKBQFmjQ&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;SURPRISING DESPACITO covers in The Voice&#34;,&#34;videoId&#34;:&#34;l6xuHunzqXk&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /VXVR9IKCRGRAtjdXcul8EcB2MoT1ZC7d8YMlkzVfB8Iuulf3WK5HA_h6BihPBe-OnpS4Fufrag=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCrDkAvwZum-UTjHmzDI2iIw&#34;,&#34;title&#34;:&#34;officialpsy&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;#PSY # uc2f8 uc774 #GANGNAMSTYLE # uac15 ub0a8 uc2a4 ud0c0 uc77c More about PSY@ http: / /www.youtube.com /officialpsy u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:253,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /9bZkp7q19f0 /mqdefault_6s.webp?du=3000&amp;sqp=CJr7kpoG&amp;rs=AOn4CLA6Tkr0my6OY1Bpm3vnD9q4h9Magg&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;10 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:4565812996},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /9bZkp7q19f0 /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC2ZQhOjkk_NTkfURgVv3PC9LljiA&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /9bZkp7q19f0 /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCcjOO401gtXMFAu0GngeIwZOkO-Q&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;PSY - GANGNAM STYLE( uac15 ub0a8 uc2a4 ud0c0 uc77c) M /V&#34;,&#34;videoId&#34;:&#34;9bZkp7q19f0&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ZDUwYCA5WCGX1H46N10v4-rtfQu7V-kCKDj1lqEA75Q1jtyc_3Ls3m_YO8vkWx6LjyCSpeZ4=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[],&#34;canonicalBaseUrl&#34;:&#34; /channel /UCgRHHDRlVfY7hWsCSaS7P4w&#34;,&#34;channelId&#34;:&#34;UCgRHHDRlVfY7hWsCSaS7P4w&#34;,&#34;title&#34;:&#34; u03c7 u03c1 u03b7 u03c3 u03c4 u03bf u03c2 u03b9 u03c9 u03b1 u03bd u03bd u03bf u03c5&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:null,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:508,&#34;movingThumbnails&#34;:null,&#34;publishedTimeText&#34;:&#34;2 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:9889097},&#34;thumbnails&#34;:[{&#34;height&#34;:270,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /dDtSsPRkxhE /hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD4r5EmI7EYxFTpeoiYt0ckycqZ8Q&#34;,&#34;width&#34;:480}],&#34;title&#34;:&#34;Despacito Dagostino Megamix Gigi Dag Modern Talking Cyndi Lauper Haddaway Luis Fonsi CyberBEATzz&#34;,&#34;videoId&#34;:&#34;dDtSsPRkxhE&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu_YL1E4Ki4V23BzH-J7qGBKDpI504KfrGukNoDqOg=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /Sermktena&#34;,&#34;channelId&#34;:&#34;UCN4XrI5xtgUlthdBsZE2Cjw&#34;,&#34;title&#34;:&#34;The Voice Legendary&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Names Contestants AND Songs: 1. Harrison Craig: &#34;Broken Vow &#34; 2. Ivan Stoyanov: &#34;Mercy &#34; 3. Naranchimeg.A: &#34;Piece by Piece &#34; 4.&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:1055,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /1Gv9uWFyuSI /mqdefault_6s.webp?du=3000&amp;sqp=CNDzkpoG&amp;rs=AOn4CLCFZCeSPVncsIuXxiCdC9mrqPpQYA&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;4 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:79457083},&#34;thumbnails&#34;:[{&#34;height&#34;:270,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /1Gv9uWFyuSI /hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDHMTf1fF_yZDf3y1ZrXzMhvP0w6A&#34;,&#34;width&#34;:480}],&#34;title&#34;:&#34;Top 10 performance Shocked coaches in The voice Audition 2018&#34;,&#34;videoId&#34;:&#34;1Gv9uWFyuSI&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu84cKgxyDPFJg6bB5-7-zHcDIrW01G7P66UzFJJLg=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /user /MusicTalentNow&#34;,&#34;channelId&#34;:&#34;UCDnEa2HC2eeT-cN3pAKnNTw&#34;,&#34;title&#34;:&#34;Top Viral Talent&#34;},&#34;badges&#34;:[&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;Holly Tandy - The X Factor UK 2017 - Full Audition Check out other auditions: u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:395,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /auf3-2wJacU /mqdefault_6s.webp?du=3000&amp;sqp=CIDYkpoG&amp;rs=AOn4CLA5ObLrdRY5kF1H16njMMXd1HxpOA&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;4 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:12001703},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /auf3-2wJacU /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBt041CWXgJFVGUlvDXTU6bUQoa3Q&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /auf3-2wJacU /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCx87o_jcMIGhaWj70PD-VBCQDFxQ&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;She Blows Everyone Away With DESPACITO Cover on X Factor | Live Show | The X Factor UK 2017&#34;,&#34;videoId&#34;:&#34;auf3-2wJacU&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /e64gAQf2QrACrdxA2FZEX0sDEwS7-17Wes8Fqdx8aLZeVySSTWRQRKTOHXNB0Q4jAO2-khvdqA=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UC-6czyMkxDi8E8akPl0c7_w&#34;,&#34;title&#34;:&#34;Enrique Iglesias&#34;},&#34;badges&#34;:[&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;Watch Enrique&#39;s new music video ME PASE: https: / /www.youtube.com /watch?v=JE9urbO7bNU On Tour with Ricky Martin and u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:287,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /NUsoVlDFqZg /mqdefault_6s.webp?du=3000&amp;sqp=CKDskpoG&amp;rs=AOn4CLDinGYgFx6bX0SESw51ml85t-3Ylw&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;8 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:3277518278},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /NUsoVlDFqZg /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC2DhAav-5VjyevId13lvNqMiX8Zg&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /NUsoVlDFqZg /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDcY66CwdRId3Prg6Wr6SB-cqxvRQ&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Enrique Iglesias - Bailando ft. Descemer Bueno, Gente De Zona (Espa u00f1ol)&#34;,&#34;videoId&#34;:&#34;NUsoVlDFqZg&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu8fFq2gGv13CF3cMp7x5ESBx-fJfWNwdczxbvpb=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[],&#34;canonicalBaseUrl&#34;:&#34; /channel /UCCUVtsfEANJxpqBxPpPK1Mw&#34;,&#34;channelId&#34;:&#34;UCCUVtsfEANJxpqBxPpPK1Mw&#34;,&#34;title&#34;:&#34;PICTURE NEWS&#34;},&#34;badges&#34;:[&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;Cristiano Ronaldo vs Lionel Messi Transformation 2018 More Videos: The Rock Transformation 2018 | From 1 To 46 Years Old u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:386,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /5xyy2m_r_GM /mqdefault_6s.webp?du=3000&amp;sqp=CMbykpoG&amp;rs=AOn4CLAhvPxsHNr14rTtrwzS0VdsIgulKg&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;3 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:23573740},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /5xyy2m_r_GM /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAG6VPhp_6Vix2zD299EwLTYWVntQ&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /5xyy2m_r_GM /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAHG76H6kdyhKamEgUFVmkr0thUNA&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Cristiano Ronaldo vs Lionel Messi Transformation 2018 | Who is better?&#34;,&#34;videoId&#34;:&#34;5xyy2m_r_GM&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /8Lwf4LCR2VmxD2JKiozRu7Lo2jGdnhRs42NawHmMN_xJ8TdW-30e3J9DhumEksivp1Esog4A=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCxoq-PAQeAdk_zyg8YS0JqA&#34;,&#34;title&#34;:&#34;Luis Fonsi&#34;},&#34;badges&#34;:[&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;Music video by Luis Fonsi, Demi Lovato performing u00c9chame La Culpa. (C) 2017 UMG Recordings, Inc. http: / /vevo.ly /FgY9ro u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:211,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /TyHvyGVs42U /mqdefault_6s.webp?du=3000&amp;sqp=CLjykpoG&amp;rs=AOn4CLDerXOazTUQJ36SvSGxvRFhOsd--w&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;4 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:2226663517},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /TyHvyGVs42U /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC3sLxZ9CZdlOjy6HeaSTIe_CitAg&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /TyHvyGVs42U /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDHJXDrIoAXY2vlOohhGHil9nq5Sw&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi, Demi Lovato - u00c9chame La Culpa (Video Oficial)&#34;,&#34;videoId&#34;:&#34;TyHvyGVs42U&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu-2aHsgCF1dxC_vcWzZmsBsKZF714FY6s0UFVAwJQ=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[],&#34;canonicalBaseUrl&#34;:&#34; /channel /UC6E6cSSQiC_bqaGoqauAVrg&#34;,&#34;channelId&#34;:&#34;UC6E6cSSQiC_bqaGoqauAVrg&#34;,&#34;title&#34;:&#34;jovy music&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;For those who kno hindi: Devnagri Luis Fonsi 1 = u0938 u093f u0938 u093e u092c u0947 u091c u0915 u0947 u092f u093e u092f u0947 u0935 u0942 u0928 u0930 u093e u0924 u094b u092e u093f u0930 u093e u0928 u094d u0926 u094b u0924 u0947 u0924 u0947 u0928 u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:263,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /B3_aSQWse1c /mqdefault_6s.webp?du=3000&amp;sqp=CMr7kpoG&amp;rs=AOn4CLBxvO9jLta5ajOTdaV-EUO4R21imw&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:4683804},&#34;thumbnails&#34;:[{&#34;height&#34;:270,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /B3_aSQWse1c /hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAfyc8hRAYg-VRGQW89d02ekgebjA&#34;,&#34;width&#34;:480}],&#34;title&#34;:&#34;Learn to Sing Despacito Slowed Down Boyce Avenue Version Spanish&#34;,&#34;videoId&#34;:&#34;B3_aSQWse1c&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /-kQJspgMMLTMI0EwBKBiystb-5ldWzDEZTkzS1ZRsU5d7lCzzFq8J_Jgp3VHK4Y9UOIA6lVV=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCfxLuDIVfwArsz5waYMMLDQ&#34;,&#34;title&#34;:&#34;Gerardo Ortiz&#34;},&#34;badges&#34;:[&#34;4K&#34;,&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;Music video by Gerardo Ortiz performing Tranquilito (Official Video). (P) 2021 Badsin Entertainment LLC http: / /vevo.ly /ZjQLDF.&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:189,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /bibIWBTD_tE /mqdefault_6s.webp?du=3000&amp;sqp=CN_mkpoG&amp;rs=AOn4CLBwIOQoM0EDCH03Wmz3IF7Jg4LLpw&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;1 year ago&#34;,&#34;stats&#34;:{&#34;views&#34;:73592155},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /bibIWBTD_tE /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDgHUUGofpYASvTPoxVmz2vN9dJxw&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /bibIWBTD_tE /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDSLmV2F0HHDQYRm0bVfBGTp2Baxg&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Gerardo Ortiz - Tranquilito (Official Video)&#34;,&#34;videoId&#34;:&#34;bibIWBTD_tE&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /8Lwf4LCR2VmxD2JKiozRu7Lo2jGdnhRs42NawHmMN_xJ8TdW-30e3J9DhumEksivp1Esog4A=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCxoq-PAQeAdk_zyg8YS0JqA&#34;,&#34;title&#34;:&#34;Luis Fonsi&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34; u00a9 2017 Universal Music Latin Entertainment under exclusive license to Republic Records (RBMG /Def Jam Recordings) Music u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:229,&#34;movingThumbnails&#34;:null,&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:673355591},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /72UO0v5ESUo /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD9eRVhsetOGUVsmlaEWQlqiC-jyQ&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /72UO0v5ESUo /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDXTg7KrSv3MFfoZNZyIhOYFglAMA&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi, Daddy Yankee - Despacito (Remix) (Official Audio) ft. Justin Bieber&#34;,&#34;videoId&#34;:&#34;72UO0v5ESUo&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /Lp9cu-xgKL0QYxdJ268CaZ63SrmODmZT2uRJjwPHvoeLOvd1LLNJWUd45tYR_VW9z5APPIPJpw=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /fallontonight&#34;,&#34;channelId&#34;:&#34;UC8-Th83bH_thdKZDJCrn88g&#34;,&#34;title&#34;:&#34;The Tonight Show Starring Jimmy Fallon&#34;},&#34;badges&#34;:[&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;Music guest Luis Fonsi performs &#34;Despacito &#34; for the Tonight Show audience. Subscribe NOW to The Tonight Show Starring Jimmy u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:247,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /zrJtFy51fRo /mqdefault_6s.webp?du=3000&amp;sqp=CMqjk5oG&amp;rs=AOn4CLAajJnXCeZzvgKsppW1UWppyDovkw&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:17671100},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /zrJtFy51fRo /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCUqrotW32dSX_hoaS0vlLqvcE4vQ&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /zrJtFy51fRo /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBk9q0iZfgPvsBUlwKWA4f88u7TDw&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi: Despacito&#34;,&#34;videoId&#34;:&#34;zrJtFy51fRo&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /MsIpNJXzivOLzOhiS8fQ7Erm-Lby630NXjdNWUUfvuyzdpnRKs_8v7Ry9DJZilYmgU6auOw2EA=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /channel /UCu39pJCWRVFUgR3tH50Vi6Q&#34;,&#34;channelId&#34;:&#34;UCu39pJCWRVFUgR3tH50Vi6Q&#34;,&#34;title&#34;:&#34;E Hits&#34;},&#34;badges&#34;:[&#34;4K&#34;],&#34;descriptionSnippet&#34;:&#34;Luis Fonsi - Despacito (Letra /Lyrics) ft. Daddy Yankee Activa las notificaciones para mantenerte actualizado con nuevos videos u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:390,&#34;movingThumbnails&#34;:null,&#34;publishedTimeText&#34;:&#34;2 months ago&#34;,&#34;stats&#34;:{&#34;views&#34;:294904},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /Vnngj_l_J6M /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLA40quCBXnDyD-AjP-_DdcCuZp7lw&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /Vnngj_l_J6M /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLB5TZN8KxvLSPwvG6pvGX6seSDs_w&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi - Despacito (Letra /Lyrics) ft. Daddy Yankee&#34;,&#34;videoId&#34;:&#34;Vnngj_l_J6M&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /Ulu-4FEJmArHTaXtIpT2L6mhGJZ6kkgQvYT0TiJ1TxzF5xExuyv_s2Db1JBq4_AOpDLUdigiug=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[],&#34;canonicalBaseUrl&#34;:&#34; /c /KIANO7HDi&#34;,&#34;channelId&#34;:&#34;UCX4Kvq7rjEvEeFG-DMRxrHw&#34;,&#34;title&#34;:&#34;KIANO7HD&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Cristiano Ronaldo (2013-14) u2022 Real Madrid u2022 Dribbling u2022 Showboating u2022 Free Kicks u2022 GOALS u00b7 u00b7 u00b7 u00b7 u00b7 u00b7 u00b7 SUBSCRIBE u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:259,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /KafZCpAp82Q /mqdefault_6s.webp?du=3000&amp;sqp=CKCLk5oG&amp;rs=AOn4CLAxk4bP-spnjQfU1S3heXIp51cADQ&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;4 months ago&#34;,&#34;stats&#34;:{&#34;views&#34;:117289},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /KafZCpAp82Q /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDmJ1BU4N0YFt7M1qNxOrXYcbV7KQ&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /KafZCpAp82Q /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCRDD2A8Villrp9Sq1TggBBi0_6hw&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Cristiano Ronaldo u25ba &#34;DESPACITO &#34; - Luis Fonsi u2022 Real Madrid Skills &amp; Goals 2014 | HD&#34;,&#34;videoId&#34;:&#34;KafZCpAp82Q&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /Az0dEsZTm3fSiPwHaMb2Beu3qMpQQrzg6WLmRUcxdg2PPlfk1OTEVC9y7HbVW6QHqY02WtdSsw=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[],&#34;canonicalBaseUrl&#34;:&#34; /channel /UCJfM6xL3ApakncwWEb3EW3Q&#34;,&#34;channelId&#34;:&#34;UCJfM6xL3ApakncwWEb3EW3Q&#34;,&#34;title&#34;:&#34;Good Vibes Only &#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Luis Fonsi - Despacito (Lyrics) Luis Fonsi - Despacito (Lyrics) Luis Fonsi - Despacito (Lyrics) Keep your vibes with this: u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:293,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /uVrG7KPmrQo /mqdefault_6s.webp?du=3000&amp;sqp=CLCGk5oG&amp;rs=AOn4CLBO0uJgmdsblOsUVDf-zQJZC5wY4g&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 months ago&#34;,&#34;stats&#34;:{&#34;views&#34;:372293},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /uVrG7KPmrQo /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBIhyentDZsJALG-4i6oyYhla5psA&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /uVrG7KPmrQo /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBfSMXwblhvaodOELWfbJsD8eVthQ&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi - Despacito (Lyrics)&#34;,&#34;videoId&#34;:&#34;uVrG7KPmrQo&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /hhTYkZ85XfQMrlB0F5WDws5SabkCDOZQMq07x9x4T2o0Fqxs5e2FLW1fXXT3IPEQ2N4RqSd7OB8=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /channel /UCoeu6do5WPyhKYkwGk83pVg&#34;,&#34;channelId&#34;:&#34;UCoeu6do5WPyhKYkwGk83pVg&#34;,&#34;title&#34;:&#34;Crusher 21&#34;},&#34;badges&#34;:[&#34;New&#34;],&#34;descriptionSnippet&#34;:&#34;In this video I made a clash royale song /diss track because I promised I would at 25k likes This is a mixed song, half of the song is u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:244,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /UL-aEOvkPaM /mqdefault_6s.webp?du=3000&amp;sqp=CMiFk5oG&amp;rs=AOn4CLAZ6xcA8PuiDPH2aGqheBGVEpZQQA&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;4 days ago&#34;,&#34;stats&#34;:{&#34;views&#34;:82226},&#34;thumbnails&#34;:[{&#34;height&#34;:270,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /UL-aEOvkPaM /hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDTbR__FcCBek_rP6mfZozintBmDw&#34;,&#34;width&#34;:480}],&#34;title&#34;:&#34;Clash royale diss track ud83d udd25 (Despacito parody)&#34;,&#34;videoId&#34;:&#34;UL-aEOvkPaM&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /0GVrTVuuFJtAdtlI8kgX4SizbhDgFfuLn7ibmBYbpaH3VD0GXNDIV66e_Ixi8ELZquPGTM5jsg=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[],&#34;canonicalBaseUrl&#34;:&#34; /channel /UCko63Qad8yL776pv820kmgg&#34;,&#34;channelId&#34;:&#34;UCko63Qad8yL776pv820kmgg&#34;,&#34;title&#34;:&#34;Fresh Vibes &#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;LuisFonsi, #Despacito, #lyricsDespacito, #Despacitolyrics, #LuisFonsiDespacito, #DespacitoLuisFonsi, u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:229,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /uCm2gedyaWw /mqdefault_6s.webp?du=3000&amp;sqp=CJCQk5oG&amp;rs=AOn4CLAtem8It37riXg6TsoJARs1HG66PQ&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;3 months ago&#34;,&#34;stats&#34;:{&#34;views&#34;:347},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /uCm2gedyaWw /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCET8mVbyL4lgor9iOx5LEHO2vTKA&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /uCm2gedyaWw /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBvFlJ1B9i2G-S3NPpoxgr2Lo4B3g&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi - Despacito (Lyrics)&#34;,&#34;videoId&#34;:&#34;uCm2gedyaWw&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /7oCPt7VmM7dyshmzKEOqNWkPufPQ6cB-jE-LqiVWnw92OGuVydAuvPqKPHMA3egK0gcRjJNk9w=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /RapazMalvado&#34;,&#34;channelId&#34;:&#34;UCwTt-re6KXUv6Qm425AqvIQ&#34;,&#34;title&#34;:&#34;Rapaz Malvado&#34;},&#34;badges&#34;:[&#34;New&#34;],&#34;descriptionSnippet&#34;:&#34;Benfica VS Paris Saint German, todos diziam que o Sport Lisboa e Benfica iria ser humilhado e afinal... DEMONSTROU FOR u00c7A !&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:157,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /sZ_vS3shFBE /mqdefault_6s.webp?du=3000&amp;sqp=CJHlkpoG&amp;rs=AOn4CLDYgbiPXu5t7n2PS3D957AB_w-ZiQ&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;4 days ago&#34;,&#34;stats&#34;:{&#34;views&#34;:68219},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /sZ_vS3shFBE /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAPcSUT6sWG8YHUf2uEuKv21haQgg&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /sZ_vS3shFBE /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCCxX9xrGuUtq8xz8K8P_dFJPMKjg&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34; u266b AH POIS u00c9| BENFICA VS PSG| PAR u00d3DIA- DESPACITO |&#34;,&#34;videoId&#34;:&#34;sZ_vS3shFBE&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /bPtiuuop9_2Y3JQ04C6LS16clDGE5Vp8870MROkYIcrNxzelqMVYRTu5Y4EPhon7DnkIkS7wBw=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCCVKuOs9Wr2JSLXhT2Z-j9Q&#34;,&#34;title&#34;:&#34;Feeling Off&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Luis Fonsi &amp; Despacito (Lyrics / Lyric Video) ft. Daddy Yankee Don&#39;t forget to subscribe and turn on notifications! You can see u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:283,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /9MeAh-GdYoA /mqdefault_6s.webp?du=3000&amp;sqp=COCOk5oG&amp;rs=AOn4CLD4WIpo9ryvep5vJ15_mof3zkhPlA&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 months ago&#34;,&#34;stats&#34;:{&#34;views&#34;:8080},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /9MeAh-GdYoA /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC81bA92EUK9xxWxan5ckRYV-P7OQ&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /9MeAh-GdYoA /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBOAdrSdYpuJbhiybuBj0LqEFh58g&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi &amp; Despacito (Lyrics / Lyric Video) ft. Daddy Yankee&#34;,&#34;videoId&#34;:&#34;9MeAh-GdYoA&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /Bom8nHy9dZWJYju5JKDFHmSM_0Gsg4H0T8MFa5PFnDxuQq4o7dBcfyYnSmyrUjamYoIKER6WIDQ=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCTpVFH82bEU1F7kpxZahw-g&#34;,&#34;title&#34;:&#34;David Michael Frank&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Provided to YouTube by DistroKid Despacito (Remix) u00b7 Future Sunsets u00b7 David Michael Frank DMF Archives: Covers Volume 2 u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:220,&#34;movingThumbnails&#34;:null,&#34;publishedTimeText&#34;:null,&#34;stats&#34;:{&#34;views&#34;:448},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /dku9Kd8ajf8 /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBAlcpSzmJ18lsJLQasLIIMh5U4LA&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /dku9Kd8ajf8 /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDVt3eE5IqNOjNAllVfv-82487ptA&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Despacito (Remix)&#34;,&#34;videoId&#34;:&#34;dku9Kd8ajf8&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /TIx2jmkZQs2XA1vR8jR3e1TBUXBTDXJ54v-9soRBc9lSExK6amBldttxdk8iknj0PB6ngVfwLw=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /MarlonAlvesMAs&#34;,&#34;channelId&#34;:&#34;UCkOfNQYegVUzsADNNZNOH2g&#34;,&#34;title&#34;:&#34;Marlon Alves&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Contrataciones: assessoriamas@outlook.com Instagram https: / /www.instagram.com /marlonalvs Fan Page u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:238,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /Q4a9uwV4nmo /mqdefault_6s.webp?du=3000&amp;sqp=CJqXk5oG&amp;rs=AOn4CLB2EOZt5kzQC7nfJKCz30UNyb4PVQ&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:108231070},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /Q4a9uwV4nmo /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDo0Pi5nzTR-dtpIxIkgLuPRoK-og&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /Q4a9uwV4nmo /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBPdtBeDKhrzgv2inbXdGA5dEUQVA&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Despacito - Luis Fonsi (ft. Daddy Yankee) - Marlon Alves Dance MAs&#34;,&#34;videoId&#34;:&#34;Q4a9uwV4nmo&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu-4mMgO8D6TmPTO2U-I-4YHH9wRiyNvNo_kgipteg=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UClkRzsdvg7_RKVhwDwiDZOA&#34;,&#34;title&#34;:&#34;JFlaMusic&#34;},&#34;badges&#34;:[&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;#loveyouguys #gardeners.&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:163,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /4bmUFRxNEIg /mqdefault_6s.webp?du=3000&amp;sqp=CMCFk5oG&amp;rs=AOn4CLDBfTqa17aW507ZNNDP_RoT0jsUEg&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:208235957},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /4bmUFRxNEIg /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBXMKL1vrjL0FjuctBDMZQ4mtFyvg&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /4bmUFRxNEIg /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAF17ZchQ7aTAFTzB-Kd-77peqJyQ&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi - Despacito ( cover by J.Fla )&#34;,&#34;videoId&#34;:&#34;4bmUFRxNEIg&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu8zVAWRkHkBKShhR270SKk0QqW3xyKG8KmUyfmyfg=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /royalmusicyt&#34;,&#34;channelId&#34;:&#34;UCrC_ZFYISEAUuCu00y52Evg&#34;,&#34;title&#34;:&#34;Royal Music&#34;},&#34;badges&#34;:[&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;........ Lyrics: Justin Bieber - Despacito ft. Luis Fonsi &amp; Daddy Yankee [Intro: Justin Bieber] Comin&#39; over in my direction So u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:252,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /mnvagBdO128 /mqdefault_6s.webp?du=3000&amp;sqp=CPn4kpoG&amp;rs=AOn4CLAJML-fj0qHQnNLV6pCvBLzKUIfgQ&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:51475741},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /mnvagBdO128 /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCn_6zWiV8YzvTEn-jZC5a-FrYD8Q&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /mnvagBdO128 /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDkjbzvpLvN8xLydCc9OfEz_beZ0w&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Justin Bieber - Despacito (Lyrics) ft. Luis Fonsi &amp; Daddy Yankee&#34;,&#34;videoId&#34;:&#34;mnvagBdO128&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu-ESGQ2BgH6zXSnJ6vIO7116cmkNBj9QCl_KhC8=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[],&#34;canonicalBaseUrl&#34;:&#34; /channel /UCii5lcmP8kpvRikHN1HDiAg&#34;,&#34;channelId&#34;:&#34;UCii5lcmP8kpvRikHN1HDiAg&#34;,&#34;title&#34;:&#34;Melodiam M u00f9sica&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Justin Bieber u2013 Despacito ft. Luis Fonsi &amp; Daddy Yankee (Letra /Lyrics) Subscribe and press ( ) to join the Notification Squad and u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:228,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /o18ToVy9Xsc /mqdefault_6s.webp?du=3000&amp;sqp=CKOZk5oG&amp;rs=AOn4CLAjgz-Ey9l9Va9q4eDLIdlj4okwPw&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;1 year ago&#34;,&#34;stats&#34;:{&#34;views&#34;:958365},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /o18ToVy9Xsc /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDk4VSOusRJy38iPxkhJ4QRa9wzzg&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /o18ToVy9Xsc /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAeNbG-QNNhbLmTaKipSD7sRX0YtA&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Justin Bieber u2013 Despacito ft. Luis Fonsi &amp; Daddy Yankee (Letra /Lyrics)&#34;,&#34;videoId&#34;:&#34;o18ToVy9Xsc&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /r6qbeU7L0vG6lM7CyLM6dcq6dDAvMone8ESASkELOd3r5cfsFSoIEp0pEMwytc0DEheb5d1V5V4=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[],&#34;canonicalBaseUrl&#34;:&#34; /user /adilkarmans&#34;,&#34;channelId&#34;:&#34;UCoJdSYoEIK7v0kIluVYdRpw&#34;,&#34;title&#34;:&#34;Mangesh Nyati&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Original Song By : Louis Fonsi, Daddy Yankke ft Justin Bieber Vocals : Farzee ft Safdar Hafiz Songs Arranged &amp; Video Edited By u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:314,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /5QvxV_-ufZc /mqdefault_6s.webp?du=3000&amp;sqp=CIGck5oG&amp;rs=AOn4CLCKPpiwgep5N0vKrAgrKIT1ysTMmQ&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:10866747},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /5QvxV_-ufZc /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAZ1-gAEl3_sAwfEEKErloJInIDIg&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /5QvxV_-ufZc /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAi31fYuVfUv4LPS4gNuoRRBwJjyw&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Despacito - Malayalam Mashup | Farzee ft Safdar Hafiz, Aadhi De Karmans | Kasaragod&#34;,&#34;videoId&#34;:&#34;5QvxV_-ufZc&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu9ecQyF0h3YRanSYjLbCpwSza35y--aGaDQY1muHg=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[],&#34;canonicalBaseUrl&#34;:&#34; /c /FredericBisson&#34;,&#34;channelId&#34;:&#34;UCKLajZenVgDyfQts99xJkPQ&#34;,&#34;title&#34;:&#34;Frederic Bisson&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Comin&#39; over in my direction So thankful for that, it&#39;s such a blessin&#39;, yeah Turn every situation into Heaven, yeah Oh, you are My u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:229,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /7YJCp6J9H8E /mqdefault_6s.webp?du=3000&amp;sqp=CIWlk5oG&amp;rs=AOn4CLDIWR5iw2-lxa5sobfco7i6rds5tg&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:1997858},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /7YJCp6J9H8E /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCFloc3KUievFryvEdaLZ0TZ1TDfA&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /7YJCp6J9H8E /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCvOe5v102bsVCMwxQ_s1P4I2e3fw&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Despacito (new video) feat. Justin Bieber (Luis Fonsi &amp; Daddy Yankee)&#34;,&#34;videoId&#34;:&#34;7YJCp6J9H8E&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /CTbRTtO9SFcTVr5KWWINYwi6TfirnN703Q4sc1agROV_lSEISSa-iSn0GDqWD4NnlqTcKQZeOw=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[],&#34;canonicalBaseUrl&#34;:&#34; /c /GRANDMUSIC1&#34;,&#34;channelId&#34;:&#34;UCO_YtwFEtYcOAcFdSccrwSw&#34;,&#34;title&#34;:&#34;Grand Music&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Luis Fonsi - Despacito ft. Daddy Yankee u2714 ufe0fSONIC 2 - Despacito (Best Music Video) u25c9 Follow GRAND MUSIC owner u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:249,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /NNrSpqCd3D4 /mqdefault_6s.webp?du=3000&amp;sqp=CKyXk5oG&amp;rs=AOn4CLCVRxNbFYYI0F-50jchkq-qe_C-kg&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;9 months ago&#34;,&#34;stats&#34;:{&#34;views&#34;:980504},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /NNrSpqCd3D4 /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCcWOtY7DmcfBjczupQOwKbYEvMzw&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /NNrSpqCd3D4 /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBevH218SUnfkdcfvEHxtLgi7lM7w&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;SONIC 2 - Despacito (Best Music Video)&#34;,&#34;videoId&#34;:&#34;NNrSpqCd3D4&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /kfw_1eOpjdYASmlAnSPa7XmXrYpaKjuW4k7_oB-hD5ljRSlT7yThew72ZxgW1UrAJ1e8vX1G=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UC_x8HoD18XJkILQBreVENUQ&#34;,&#34;title&#34;:&#34;DJ Snake&#34;},&#34;badges&#34;:[&#34;4K&#34;,&#34;CC&#34;],&#34;descriptionSnippet&#34;:&#34;Music video directed by Colin Tilley.&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:232,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /ixkoVwKQaJg /mqdefault_6s.webp?du=3000&amp;sqp=COiTk5oG&amp;rs=AOn4CLCQessgeIpPnU58w2SJ1xo6kMOXHw&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;4 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:2366038786},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /ixkoVwKQaJg /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDTjznmDml_d3RH-WGI5qOCv76R9w&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /ixkoVwKQaJg /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCmncEHE-KKiIgnUQHoeGaMiIu97A&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;DJ Snake - Taki Taki ft. Selena Gomez, Ozuna, Cardi B (Official Music Video)&#34;,&#34;videoId&#34;:&#34;ixkoVwKQaJg&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /e64gAQf2QrACrdxA2FZEX0sDEwS7-17Wes8Fqdx8aLZeVySSTWRQRKTOHXNB0Q4jAO2-khvdqA=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UC-6czyMkxDi8E8akPl0c7_w&#34;,&#34;title&#34;:&#34;Enrique Iglesias&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;Watch Enrique&#39;s new music video ME PASE: https: / /www.youtube.com /watch?v=JE9urbO7bNU On Tour with Ricky Martin and u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:233,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /9sg-A-eS6Ig /mqdefault_6s.webp?du=3000&amp;sqp=CNibk5oG&amp;rs=AOn4CLA5tCoWpOx1e-_JqxCCD4WswLp7pA&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:1431569192},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /9sg-A-eS6Ig /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDPjjrFIucTXtjO9tVUBnPtnMHWhQ&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /9sg-A-eS6Ig /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDnTLre1U2gom0MbOo2cmdDYSXR1w&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Enrique Iglesias - SUBEME LA RADIO (Official Video) ft. Descemer Bueno, Zion &amp; Lennox&#34;,&#34;videoId&#34;:&#34;9sg-A-eS6Ig&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu8zVAWRkHkBKShhR270SKk0QqW3xyKG8KmUyfmyfg=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /royalmusicyt&#34;,&#34;channelId&#34;:&#34;UCrC_ZFYISEAUuCu00y52Evg&#34;,&#34;title&#34;:&#34;Royal Music&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;......... Lyrics: Tones and I - Dance Monkey [Verse 1] They say, &#34;Oh my god, I see the way you shine Take your hand, my dear, u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:209,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /1__CAdTJ5JU /mqdefault_6s.webp?du=3000&amp;sqp=CPaek5oG&amp;rs=AOn4CLC408jsgOAgbbIWXTRl8-VrQzSngA&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;2 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:328412534},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /1__CAdTJ5JU /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD0r_9c6e32bZayU2p2rvnEyY7zTA&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /1__CAdTJ5JU /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC-rEXwJ6VQkEW8xgRdeyIGId0KNA&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Tones and I - Dance Monkey (Lyrics)&#34;,&#34;videoId&#34;:&#34;1__CAdTJ5JU&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /8Lwf4LCR2VmxD2JKiozRu7Lo2jGdnhRs42NawHmMN_xJ8TdW-30e3J9DhumEksivp1Esog4A=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCxoq-PAQeAdk_zyg8YS0JqA&#34;,&#34;title&#34;:&#34;Luis Fonsi&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;#LuisFonsi #NoMeDoyPorVencido #Remastered #OfficialMusicVideo Music video by Luis Fonsi performing No Me Doy Por u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:234,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /8hRGBcr_gJc /mqdefault_6s.webp?du=3000&amp;sqp=CLCLk5oG&amp;rs=AOn4CLCXSDu2Ezw3wBuAi-Cq05Nj4VlNCQ&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;12 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:266784886},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /8hRGBcr_gJc /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCu6YYNsK-skTLt99EnBV_kcE94WQ&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /8hRGBcr_gJc /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAX1-vVc1u3G_pBmWxrhNRaY0H1tg&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi - No Me Doy Por Vencido&#34;,&#34;videoId&#34;:&#34;8hRGBcr_gJc&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu9V7gXnpIUCJYKKY_KANCGKI-0lrr0VeoRXYVce6A=s88-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Official Artist Channel&#34;,&#34;type&#34;:&#34;OFFICIAL_ARTIST_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:null,&#34;channelId&#34;:&#34;UCyjuFsbclXyntSRMBAILzbw&#34;,&#34;title&#34;:&#34;2CELLOS&#34;},&#34;badges&#34;:[&#34;4K&#34;],&#34;descriptionSnippet&#34;:&#34;2CELLOS Luka Sulic and Hauser playing Despacito Video by Kristijan Burlovic, Medvid production Audio by Filip Vidovic, Morris u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:190,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /D9LrEXF3USs /mqdefault_6s.webp?du=3000&amp;sqp=CPufk5oG&amp;rs=AOn4CLBNuhiPvvoH5fdS7SUrctCypFR4iw&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:49296654},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /D9LrEXF3USs /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAowqvxizwyTGkfxxow1GeUCCr3iw&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /D9LrEXF3USs /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD30THNw1z7qbSJUZrcaupI5cMZVQ&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;2CELLOS - Despacito [OFFICIAL VIDEO]&#34;,&#34;videoId&#34;:&#34;D9LrEXF3USs&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /ytc /AMLnZu-a8XFPIZ0-jBW6W8vSo22fMb3PgXQOT4rBlFPJFA=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /ThevoiceGlobal&#34;,&#34;channelId&#34;:&#34;UCJYtYkiGldqX6Ne938j-k2g&#34;,&#34;title&#34;:&#34;The Voice Global&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;The single &#34;Despacito &#34; has made history as the most frequently streamed song of all time. Therefore, we created a compilation u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:457,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /PIOXABoz-34 /mqdefault_6s.webp?du=3000&amp;sqp=CNyHk5oG&amp;rs=AOn4CLAHdo1B91yzn8fqoAAF0p9IKp_Q6g&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;4 years ago&#34;,&#34;stats&#34;:{&#34;views&#34;:89599764},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /PIOXABoz-34 /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDpXixnvVKuM6_1ePREdxX0nA0clA&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /PIOXABoz-34 /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLB32CaAUKuU2FHfPfZ0SwJBLNpDUA&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;BEST DESPACITO covers in The Voice | The Voice Global&#34;,&#34;videoId&#34;:&#34;PIOXABoz-34&#34;}},{&#34;type&#34;:&#34;video&#34;,&#34;video&#34;:{&#34;author&#34;:{&#34;avatar&#34;:[{&#34;height&#34;:68,&#34;url&#34;:&#34;https: / /yt3.ggpht.com /H1MGSAOJp6N0tYUxq6jlLODjdB9JJmGpP5t_P0bJpTf7bTPSGh7LRUiuLR-9Pyv9GnI3hFrb=s68-c-k-c0x00ffffff-no-rj&#34;,&#34;width&#34;:68}],&#34;badges&#34;:[{&#34;text&#34;:&#34;Verified&#34;,&#34;type&#34;:&#34;VERIFIED_CHANNEL&#34;}],&#34;canonicalBaseUrl&#34;:&#34; /c /PolarRecords&#34;,&#34;channelId&#34;:&#34;UCPAWFYFx1K9fukU_YrofRBA&#34;,&#34;title&#34;:&#34;Polar Records&#34;},&#34;badges&#34;:[],&#34;descriptionSnippet&#34;:&#34;0:00 Luis Fonsi, Daddy Yankee, Justin Bieber - Despacito (Lyrics) 0:10 Intro (Justin Bieber) Comin&#39; over in my direction So u00a0...&#34;,&#34;isLiveNow&#34;:false,&#34;lengthSeconds&#34;:229,&#34;movingThumbnails&#34;:[{&#34;height&#34;:180,&#34;url&#34;:&#34;https: / /i.ytimg.com /an_webp /noA0Jwbzqlo /mqdefault_6s.webp?du=3000&amp;sqp=CN73kpoG&amp;rs=AOn4CLDy9SBpEBGTUW9oZpL89D1q1_b7Eg&#34;,&#34;width&#34;:320}],&#34;publishedTimeText&#34;:&#34;5 months ago&#34;,&#34;stats&#34;:{&#34;views&#34;:9019},&#34;thumbnails&#34;:[{&#34;height&#34;:202,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /noA0Jwbzqlo /hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC189L6QiFX4vbV_rfF0JQ2dJwx3Q&#34;,&#34;width&#34;:360},{&#34;height&#34;:404,&#34;url&#34;:&#34;https: / /i.ytimg.com /vi /noA0Jwbzqlo /hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCWZTL1xdwiEHH3EmMPLRkZA4M4-g&#34;,&#34;width&#34;:720}],&#34;title&#34;:&#34;Luis Fonsi, Daddy Yankee, Justin Bieber - Despacito (Lyrics)&#34;,&#34;videoId&#34;:&#34;noA0Jwbzqlo&#34;}}],&#34;cursorNext&#34;:&#34;EpgDEglkZXNwYWNpdG8aigNTQlNDQVF0clNsRlFOMnRwZHpWR2E0SUJDMmR0TXkxdE1rTkdWbGROZ2dFTFpISmZSMEZLV25acFVqQ0NBUXN5WWtoQ1ZYTXRhek5oWTRJQkMzUXpTWGxWUVZSalFXSkZnZ0VOVWtSclNsRlFOMnRwZHpWR2E0SUJDMTg0VGxKS1JVRmlOQzF6Z2dFTGQyaDNaVEJMUkY5eVIzZUNBUXMzTWxWUE1IWTFSVk5WYjRJQkMzcHlTblJHZVRVeFpsSnZnZ0VMVVRSaE9YVjNWalJ1YlctQ0FRczBZbTFWUmxKNFRrVkpaNElCQzIxdWRtRm5RbVJQTVRJNGdnRUxiekU0Vkc5V2VUbFljMk9DQVFzMVVYWjRWbDh0ZFdaYVk0SUJDemRaU2tOd05rbzVTRGhGZ2dFTFRrNXlVM0J4UTJRelJEU0NBUXRFT1V4eVJWaEdNMVZUYzRJQkMxQkpUMWhCUW05NkxUTTBnZ0VMYm05Qk1FcDNZbnB4YkcteUFRWUtCQWdZRUFJJTNEGIHg6BgiC3NlYXJjaC1mZWVk&#34;,&#34;didYouMean&#34;:null,&#34;estimatedResults&#34;:27445861,&#34;filterGroups&#34;:[{&#34;filters&#34;:[{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJSUFRJTNEJTNE&#34;,&#34;label&#34;:&#34;Last hour&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJSUFnJTNEJTNE&#34;,&#34;label&#34;:&#34;Today&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJSUF3JTNEJTNE&#34;,&#34;label&#34;:&#34;This week&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJSUJBJTNEJTNE&#34;,&#34;label&#34;:&#34;This month&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJSUJRJTNEJTNE&#34;,&#34;label&#34;:&#34;This year&#34;,&#34;selected&#34;:false}],&#34;title&#34;:&#34;Upload date&#34;},{&#34;filters&#34;:[{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJUUFRJTNEJTNE&#34;,&#34;label&#34;:&#34;Video&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJUUFnJTNEJTNE&#34;,&#34;label&#34;:&#34;Channel&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJUUF3JTNEJTNE&#34;,&#34;label&#34;:&#34;Playlist&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJUUJBJTNEJTNE&#34;,&#34;label&#34;:&#34;Movie&#34;,&#34;selected&#34;:false}],&#34;title&#34;:&#34;Type&#34;},{&#34;filters&#34;:[{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJWUFRJTNEJTNE&#34;,&#34;label&#34;:&#34;Under 4 minutes&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJWUF3JTNEJTNE&#34;,&#34;label&#34;:&#34;4 - 20 minutes&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJWUFnJTNEJTNE&#34;,&#34;label&#34;:&#34;Over 20 minutes&#34;,&#34;selected&#34;:false}],&#34;title&#34;:&#34;Duration&#34;},{&#34;filters&#34;:[{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdKQUFRJTNEJTNE&#34;,&#34;label&#34;:&#34;Live&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdKd0FRJTNEJTNE&#34;,&#34;label&#34;:&#34;4K&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJZ0FRJTNEJTNE&#34;,&#34;label&#34;:&#34;HD&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJb0FRJTNEJTNE&#34;,&#34;label&#34;:&#34;Subtitles /CC&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJd0FRJTNEJTNE&#34;,&#34;label&#34;:&#34;Creative Commons&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdKNEFRJTNEJTNE&#34;,&#34;label&#34;:&#34;360 u00b0&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdQUUFRRSUzRA==&#34;,&#34;label&#34;:&#34;VR180&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdJNEFRJTNEJTNE&#34;,&#34;label&#34;:&#34;3D&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdQSUFRRSUzRA==&#34;,&#34;label&#34;:&#34;HDR&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdPNEFRRSUzRA==&#34;,&#34;label&#34;:&#34;Location&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmRWdKSUFRJTNEJTNE&#34;,&#34;label&#34;:&#34;Purchased&#34;,&#34;selected&#34;:false}],&#34;title&#34;:&#34;Features&#34;},{&#34;filters&#34;:[{&#34;cursorSelect&#34;:null,&#34;label&#34;:&#34;Relevance&#34;,&#34;selected&#34;:true},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmQ0FJJTNE&#34;,&#34;label&#34;:&#34;Upload date&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmQ0FNJTNE&#34;,&#34;label&#34;:&#34;View count&#34;,&#34;selected&#34;:false},{&#34;cursorSelect&#34;:&#34;ZGVzcGFjaXRvJiYmQ0FFJTNE&#34;,&#34;label&#34;:&#34;Rating&#34;,&#34;selected&#34;:false}],&#34;title&#34;:&#34;Sort by&#34;}],&#34;refinements&#34;:[&#34;despacito 8d&#34;,&#34;despacito ringtone&#34;,&#34;despacito cover&#34;,&#34;despacito dance&#34;,&#34;daddy y yankee songs&#34;,&#34;luis fonsi songs&#34;,&#34;despacito slowed&#34;,&#34;despacito karaoke&#34;,&#34;despacito piano&#34;,&#34;despacito in hindi&#34;,&#34;despacito guitar&#34;,&#34;despacito justin bieber karaoke&#34;,&#34;#imposible&#34;,&#34;despacito flute&#34;]} . Formatting the API . The mess of outputs needs to be converted before it can be seen properly. This is done here with this code, which lists each search result by their author, thumbnail, title, views, and length . def print_result(v): print(&quot;Result Type: &quot;, v[&quot;type&quot;]) print(&quot;Author: &quot; + v[&quot;video&quot;][&quot;author&quot;][&quot;title&quot;]) print(&quot;Thumbnail: &quot; + v[&quot;video&quot;][&quot;thumbnails&quot;][0][&quot;url&quot;]) print(&quot;Title: &quot; + v[&quot;video&quot;][&quot;title&quot;]) views=v[&quot;video&quot;][&quot;stats&quot;][&quot;views&quot;] if views&gt;1000000000: print(&quot;Views: &quot;+str(views//1000000000)+&#39;B&#39;) elif views&gt;1000000: print(&quot;Views: &quot;+str(views//1000000)+&#39;M&#39;) elif views&gt;1000: print(&quot;Views: &quot;+str(views//100)+&#39;K&#39;) else: print(&quot;Views: &quot;+str(views)) length=v[&quot;video&quot;][&quot;lengthSeconds&quot;] if length%60&lt;10: print(&quot;Length: &quot;+str(length//60)+&#39;:0&#39;+str(length%60)) else: print(&quot;Length: &quot;+str(length//60)+&#39;:&#39;+str(length%60)) try: print(&quot;JSON data is Python type: &quot; + str(type(json))) # Test if json is processed successfully try: print(&#39;&#39;) # For each video in the json, view the results using print_results for video in json[&#39;contents&#39;]: print_result(video) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Result Type: video Author: Luis Fonsi Thumbnail: https://i.ytimg.com/vi/kJQP7kiw5Fk/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBCg9eudi8DoM9M-qjPgJBGGkuIgA Title: Luis Fonsi - Despacito ft. Daddy Yankee Views: 7B Length: 4:42 Result Type: video Author: Taz Network Thumbnail: https://i.ytimg.com/vi/gm3-m2CFVWM/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBdnMRJ4yJ6vHumS_nU46yxFLqRjQ Title: Luis Fonsi ‒ Despacito (Lyrics / Lyric Video) ft. Daddy Yankee Views: 25M Length: 4:01 Result Type: video Author: MasterDumb Thumbnail: https://i.ytimg.com/vi/dr_GAJZviR0/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD5YIkR5KbMQOxTcaRoIxBF9Vm_6w Title: Luis Fonsi, Daddy Yankee - Despacito ft. Justin Bieber Views: 25M Length: 4:11 Result Type: video Author: Luis Fonsi Thumbnail: https://i.ytimg.com/vi/2bHBUs-k3ac/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLA02SrTWMxpzWcz0nTBfWQPiUsKjQ Title: Luis Fonsi Despacito ft. Daddy Yankee (audio) Views: 1M Length: 3:49 Result Type: video Author: Luis Fonsi Thumbnail: https://i.ytimg.com/vi/t3IyUATcAbE/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLB8rLazbFNSKES97_IJvr6SM7ibsA Title: Despacito Views: 9637K Length: 3:49 Result Type: video Author: Fans Tiktok Thumbnail: https://i.ytimg.com/vi/_8NRJEAb4-s/hq720_2.jpg?sqp=-oaymwEdCJYDENAFSFXyq4qpAw8IARUAAIhCcAHAAQbQAQE=&amp;rs=AOn4CLDNHzpzX_Is1LcknUd9-h5bymStmw Title: (Despacito Magik Edit) New Chaljch Which one is more beautiful🤔 #tiktok Views: 38M Length: 0:14 Result Type: video Author: Taz Network Thumbnail: https://i.ytimg.com/vi/whwe0KD_rGw/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAHpsL01E241DCvjgTvwUb2KlYvgQ Title: Justin Bieber – Despacito (Lyrics) 🎤 ft. Luis Fonsi &amp; Daddy Yankee [Pop] Views: 348M Length: 3:51 Result Type: video Author: The Voice Global Thumbnail: https://i.ytimg.com/vi/l6xuHunzqXk/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBMaenQtNjDLaanEEA8VsqYc4SkFg Title: SURPRISING DESPACITO covers in The Voice Views: 5M Length: 6:00 Result Type: video Author: officialpsy Thumbnail: https://i.ytimg.com/vi/9bZkp7q19f0/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC2ZQhOjkk_NTkfURgVv3PC9LljiA Title: PSY - GANGNAM STYLE(강남스타일) M/V Views: 4B Length: 4:13 Result Type: video Author: χρηστος ιωαννου Thumbnail: https://i.ytimg.com/vi/dDtSsPRkxhE/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD4r5EmI7EYxFTpeoiYt0ckycqZ8Q Title: Despacito Dagostino Megamix Gigi Dag Modern Talking Cyndi Lauper Haddaway Luis Fonsi CyberBEATzz Views: 9M Length: 8:28 Result Type: video Author: The Voice Legendary Thumbnail: https://i.ytimg.com/vi/1Gv9uWFyuSI/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDHMTf1fF_yZDf3y1ZrXzMhvP0w6A Title: Top 10 performance Shocked coaches in The voice Audition 2018 Views: 79M Length: 17:35 Result Type: video Author: Top Viral Talent Thumbnail: https://i.ytimg.com/vi/auf3-2wJacU/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBt041CWXgJFVGUlvDXTU6bUQoa3Q Title: She Blows Everyone Away With DESPACITO Cover on X Factor | Live Show | The X Factor UK 2017 Views: 12M Length: 6:35 Result Type: video Author: Enrique Iglesias Thumbnail: https://i.ytimg.com/vi/NUsoVlDFqZg/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC2DhAav-5VjyevId13lvNqMiX8Zg Title: Enrique Iglesias - Bailando ft. Descemer Bueno, Gente De Zona (Español) Views: 3B Length: 4:47 Result Type: video Author: PICTURE NEWS Thumbnail: https://i.ytimg.com/vi/5xyy2m_r_GM/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAG6VPhp_6Vix2zD299EwLTYWVntQ Title: Cristiano Ronaldo vs Lionel Messi Transformation 2018 | Who is better? Views: 23M Length: 6:26 Result Type: video Author: Luis Fonsi Thumbnail: https://i.ytimg.com/vi/TyHvyGVs42U/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC3sLxZ9CZdlOjy6HeaSTIe_CitAg Title: Luis Fonsi, Demi Lovato - Échame La Culpa (Video Oficial) Views: 2B Length: 3:31 Result Type: video Author: jovy music Thumbnail: https://i.ytimg.com/vi/B3_aSQWse1c/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAfyc8hRAYg-VRGQW89d02ekgebjA Title: Learn to Sing Despacito Slowed Down Boyce Avenue Version Spanish Views: 4M Length: 4:23 Result Type: video Author: Gerardo Ortiz Thumbnail: https://i.ytimg.com/vi/bibIWBTD_tE/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDgHUUGofpYASvTPoxVmz2vN9dJxw Title: Gerardo Ortiz - Tranquilito (Official Video) Views: 73M Length: 3:09 Result Type: video Author: Luis Fonsi Thumbnail: https://i.ytimg.com/vi/72UO0v5ESUo/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD9eRVhsetOGUVsmlaEWQlqiC-jyQ Title: Luis Fonsi, Daddy Yankee - Despacito (Remix) (Official Audio) ft. Justin Bieber Views: 673M Length: 3:49 Result Type: video Author: The Tonight Show Starring Jimmy Fallon Thumbnail: https://i.ytimg.com/vi/zrJtFy51fRo/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCUqrotW32dSX_hoaS0vlLqvcE4vQ Title: Luis Fonsi: Despacito Views: 17M Length: 4:07 Result Type: video Author: E Hits Thumbnail: https://i.ytimg.com/vi/Vnngj_l_J6M/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLA40quCBXnDyD-AjP-_DdcCuZp7lw Title: Luis Fonsi - Despacito (Letra/Lyrics) ft. Daddy Yankee Views: 2949K Length: 6:30 Result Type: video Author: KIANO7HD Thumbnail: https://i.ytimg.com/vi/KafZCpAp82Q/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDmJ1BU4N0YFt7M1qNxOrXYcbV7KQ Title: Cristiano Ronaldo ► &#34;DESPACITO&#34; - Luis Fonsi • Real Madrid Skills &amp; Goals 2014 | HD Views: 1172K Length: 4:19 Result Type: video Author: Good Vibes Only Thumbnail: https://i.ytimg.com/vi/uVrG7KPmrQo/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBIhyentDZsJALG-4i6oyYhla5psA Title: Luis Fonsi - Despacito (Lyrics) Views: 3722K Length: 4:53 Result Type: video Author: Crusher 21 Thumbnail: https://i.ytimg.com/vi/UL-aEOvkPaM/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDTbR__FcCBek_rP6mfZozintBmDw Title: Clash royale diss track🔥 (Despacito parody) Views: 822K Length: 4:04 Result Type: video Author: Fresh Vibes Thumbnail: https://i.ytimg.com/vi/uCm2gedyaWw/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCET8mVbyL4lgor9iOx5LEHO2vTKA Title: Luis Fonsi - Despacito (Lyrics) Views: 347 Length: 3:49 Result Type: video Author: Rapaz Malvado Thumbnail: https://i.ytimg.com/vi/sZ_vS3shFBE/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAPcSUT6sWG8YHUf2uEuKv21haQgg Title: ♫ AH POIS É| BENFICA VS PSG| PARÓDIA- DESPACITO | Views: 682K Length: 2:37 Result Type: video Author: Feeling Off Thumbnail: https://i.ytimg.com/vi/9MeAh-GdYoA/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC81bA92EUK9xxWxan5ckRYV-P7OQ Title: Luis Fonsi &amp; Despacito (Lyrics / Lyric Video) ft. Daddy Yankee Views: 80K Length: 4:43 Result Type: video Author: David Michael Frank Thumbnail: https://i.ytimg.com/vi/dku9Kd8ajf8/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBAlcpSzmJ18lsJLQasLIIMh5U4LA Title: Despacito (Remix) Views: 448 Length: 3:40 Result Type: video Author: Marlon Alves Thumbnail: https://i.ytimg.com/vi/Q4a9uwV4nmo/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDo0Pi5nzTR-dtpIxIkgLuPRoK-og Title: Despacito - Luis Fonsi (ft. Daddy Yankee) - Marlon Alves Dance MAs Views: 108M Length: 3:58 Result Type: video Author: JFlaMusic Thumbnail: https://i.ytimg.com/vi/4bmUFRxNEIg/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBXMKL1vrjL0FjuctBDMZQ4mtFyvg Title: Luis Fonsi - Despacito ( cover by J.Fla ) Views: 208M Length: 2:43 Result Type: video Author: Royal Music Thumbnail: https://i.ytimg.com/vi/mnvagBdO128/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCn_6zWiV8YzvTEn-jZC5a-FrYD8Q Title: Justin Bieber - Despacito (Lyrics) ft. Luis Fonsi &amp; Daddy Yankee Views: 51M Length: 4:12 Result Type: video Author: Melodiam Mùsica Thumbnail: https://i.ytimg.com/vi/o18ToVy9Xsc/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDk4VSOusRJy38iPxkhJ4QRa9wzzg Title: Justin Bieber – Despacito ft. Luis Fonsi &amp; Daddy Yankee (Letra/Lyrics) Views: 9583K Length: 3:48 Result Type: video Author: Mangesh Nyati Thumbnail: https://i.ytimg.com/vi/5QvxV_-ufZc/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAZ1-gAEl3_sAwfEEKErloJInIDIg Title: Despacito - Malayalam Mashup | Farzee ft Safdar Hafiz, Aadhi De Karmans | Kasaragod Views: 10M Length: 5:14 Result Type: video Author: Frederic Bisson Thumbnail: https://i.ytimg.com/vi/7YJCp6J9H8E/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCFloc3KUievFryvEdaLZ0TZ1TDfA Title: Despacito (new video) feat. Justin Bieber (Luis Fonsi &amp; Daddy Yankee) Views: 1M Length: 3:49 Result Type: video Author: Grand Music Thumbnail: https://i.ytimg.com/vi/NNrSpqCd3D4/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCcWOtY7DmcfBjczupQOwKbYEvMzw Title: SONIC 2 - Despacito (Best Music Video) Views: 9805K Length: 4:09 Result Type: video Author: DJ Snake Thumbnail: https://i.ytimg.com/vi/ixkoVwKQaJg/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDTjznmDml_d3RH-WGI5qOCv76R9w Title: DJ Snake - Taki Taki ft. Selena Gomez, Ozuna, Cardi B (Official Music Video) Views: 2B Length: 3:52 Result Type: video Author: Enrique Iglesias Thumbnail: https://i.ytimg.com/vi/9sg-A-eS6Ig/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDPjjrFIucTXtjO9tVUBnPtnMHWhQ Title: Enrique Iglesias - SUBEME LA RADIO (Official Video) ft. Descemer Bueno, Zion &amp; Lennox Views: 1B Length: 3:53 Result Type: video Author: Royal Music Thumbnail: https://i.ytimg.com/vi/1__CAdTJ5JU/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD0r_9c6e32bZayU2p2rvnEyY7zTA Title: Tones and I - Dance Monkey (Lyrics) Views: 328M Length: 3:29 Result Type: video Author: Luis Fonsi Thumbnail: https://i.ytimg.com/vi/8hRGBcr_gJc/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCu6YYNsK-skTLt99EnBV_kcE94WQ Title: Luis Fonsi - No Me Doy Por Vencido Views: 266M Length: 3:54 Result Type: video Author: 2CELLOS Thumbnail: https://i.ytimg.com/vi/D9LrEXF3USs/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAowqvxizwyTGkfxxow1GeUCCr3iw Title: 2CELLOS - Despacito [OFFICIAL VIDEO] Views: 49M Length: 3:10 Result Type: video Author: The Voice Global Thumbnail: https://i.ytimg.com/vi/PIOXABoz-34/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDpXixnvVKuM6_1ePREdxX0nA0clA Title: BEST DESPACITO covers in The Voice | The Voice Global Views: 89M Length: 7:37 Result Type: video Author: Polar Records Thumbnail: https://i.ytimg.com/vi/noA0Jwbzqlo/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC189L6QiFX4vbV_rfF0JQ2dJwx3Q Title: Luis Fonsi, Daddy Yankee, Justin Bieber - Despacito (Lyrics) Views: 90K Length: 3:49 . Simplifying Data . Simplifying data from the json to what I needed from format. . def transfer(): global json return json_of_results(json) def json_of_results(j): results={} videos=[] for v in j[&quot;contents&quot;]: video={} video[&quot;thumburl&quot;] = v[&quot;video&quot;][&quot;thumbnails&quot;][0][&quot;url&quot;] video[&quot;title&quot;] = v[&quot;video&quot;][&quot;title&quot;] video[&quot;author&quot;] = v[&quot;video&quot;][&quot;author&quot;][&quot;title&quot;] views=v[&quot;video&quot;][&quot;stats&quot;][&quot;views&quot;] if views&gt;1000000000: viewString=str(views//1000000000)+&#39;B&#39; elif views&gt;1000000: viewString=str(views//1000000)+&#39;M&#39; elif views&gt;1000: viewString=str(views//1000)+&#39;K&#39; else: viewString=str(views) video[&quot;viewsString&quot;] = viewString length=v[&quot;video&quot;][&quot;lengthSeconds&quot;] if length%60&lt;10: lengthString = str(length//60)+&#39;:0&#39;+str(length%60) else: lengthString = str(length//60)+&#39;:&#39;+str(length%60) video[&quot;lengthString&quot;] = lengthString videos.append(video) results[&quot;videos&quot;]=videos return results try: print(&quot;Example Needed variables&quot;) print_result(json[&quot;contents&quot;][0]) # Test if json is processed successfully print(&#39;&#39;) video_dict=json_of_results(json) vid_json=json.dumps(video_dict) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . Example Needed variables Result Type: video Author: Luis Fonsi Thumbnail: https://i.ytimg.com/vi/kJQP7kiw5Fk/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBCg9eudi8DoM9M-qjPgJBGGkuIgA Title: Luis Fonsi - Despacito ft. Daddy Yankee Views: 7B Length: 4:42 {&#39;videos&#39;: [{&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/kJQP7kiw5Fk/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBCg9eudi8DoM9M-qjPgJBGGkuIgA&#39;, &#39;title&#39;: &#39;Luis Fonsi - Despacito ft. Daddy Yankee&#39;, &#39;author&#39;: &#39;Luis Fonsi&#39;, &#39;viewsString&#39;: &#39;7B&#39;, &#39;lengthString&#39;: &#39;4:42&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/gm3-m2CFVWM/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBdnMRJ4yJ6vHumS_nU46yxFLqRjQ&#39;, &#39;title&#39;: &#39;Luis Fonsi ‒ Despacito (Lyrics / Lyric Video) ft. Daddy Yankee&#39;, &#39;author&#39;: &#39;Taz Network&#39;, &#39;viewsString&#39;: &#39;25M&#39;, &#39;lengthString&#39;: &#39;4:01&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/dr_GAJZviR0/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD5YIkR5KbMQOxTcaRoIxBF9Vm_6w&#39;, &#39;title&#39;: &#39;Luis Fonsi, Daddy Yankee - Despacito ft. Justin Bieber&#39;, &#39;author&#39;: &#39;MasterDumb&#39;, &#39;viewsString&#39;: &#39;25M&#39;, &#39;lengthString&#39;: &#39;4:11&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/2bHBUs-k3ac/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLA02SrTWMxpzWcz0nTBfWQPiUsKjQ&#39;, &#39;title&#39;: &#39;Luis Fonsi Despacito ft. Daddy Yankee (audio)&#39;, &#39;author&#39;: &#39;Luis Fonsi&#39;, &#39;viewsString&#39;: &#39;1M&#39;, &#39;lengthString&#39;: &#39;3:49&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/t3IyUATcAbE/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLB8rLazbFNSKES97_IJvr6SM7ibsA&#39;, &#39;title&#39;: &#39;Despacito&#39;, &#39;author&#39;: &#39;Luis Fonsi&#39;, &#39;viewsString&#39;: &#39;963K&#39;, &#39;lengthString&#39;: &#39;3:49&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/Gl6ekgobG2k/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAua2KbkFRzR5vFXNIo4IwYYazJ1Q&#39;, &#39;title&#39;: &#39;Despacito 3 (Official Minecraft Parody)&#39;, &#39;author&#39;: &#39;ReptileLegitYT&#39;, &#39;viewsString&#39;: &#39;19M&#39;, &#39;lengthString&#39;: &#39;4:05&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/_8NRJEAb4-s/hq720_2.jpg?sqp=-oaymwEdCJYDENAFSFXyq4qpAw8IARUAAIhCcAHAAQbQAQE=&amp;rs=AOn4CLDNHzpzX_Is1LcknUd9-h5bymStmw&#39;, &#39;title&#39;: &#39;(Despacito Magik Edit) New Chaljch Which one is more beautiful🤔 #tiktok&#39;, &#39;author&#39;: &#39;Fans Tiktok&#39;, &#39;viewsString&#39;: &#39;38M&#39;, &#39;lengthString&#39;: &#39;0:14&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/l6xuHunzqXk/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBMaenQtNjDLaanEEA8VsqYc4SkFg&#39;, &#39;title&#39;: &#39;SURPRISING DESPACITO covers in The Voice&#39;, &#39;author&#39;: &#39;The Voice Global&#39;, &#39;viewsString&#39;: &#39;5M&#39;, &#39;lengthString&#39;: &#39;6:00&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/1Gv9uWFyuSI/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDHMTf1fF_yZDf3y1ZrXzMhvP0w6A&#39;, &#39;title&#39;: &#39;Top 10 performance Shocked coaches in The voice Audition 2018&#39;, &#39;author&#39;: &#39;The Voice Legendary&#39;, &#39;viewsString&#39;: &#39;79M&#39;, &#39;lengthString&#39;: &#39;17:35&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/7iT72MMoO28/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBkx_SJy0x_i3s2mEaIAnrRG-57Ug&#39;, &#39;title&#39;: &#39;Donald Trump Singing Despacito||Ft.Justin Bieber,Daddy yankee,Luis Fonsi&#39;, &#39;author&#39;: &#39;Work Smart&#39;, &#39;viewsString&#39;: &#39;3M&#39;, &#39;lengthString&#39;: &#39;1:28&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/5xyy2m_r_GM/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAG6VPhp_6Vix2zD299EwLTYWVntQ&#39;, &#39;title&#39;: &#39;Cristiano Ronaldo vs Lionel Messi Transformation 2018 | Who is better?&#39;, &#39;author&#39;: &#39;PICTURE NEWS&#39;, &#39;viewsString&#39;: &#39;23M&#39;, &#39;lengthString&#39;: &#39;6:26&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/dDtSsPRkxhE/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD4r5EmI7EYxFTpeoiYt0ckycqZ8Q&#39;, &#39;title&#39;: &#39;Despacito Dagostino Megamix Gigi Dag Modern Talking Cyndi Lauper Haddaway Luis Fonsi CyberBEATzz&#39;, &#39;author&#39;: &#39;χρηστος ιωαννου&#39;, &#39;viewsString&#39;: &#39;9M&#39;, &#39;lengthString&#39;: &#39;8:28&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/-bCoFRsKpww/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAdO8KGL4A81MNdS0p-TWlHPqlcyg&#39;, &#39;title&#39;: &#39;Erika Ender &amp; Roberto Carlos - Despacito (En Vivo)&#39;, &#39;author&#39;: &#39;Erika Ender&#39;, &#39;viewsString&#39;: &#39;74M&#39;, &#39;lengthString&#39;: &#39;4:48&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/TyHvyGVs42U/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC3sLxZ9CZdlOjy6HeaSTIe_CitAg&#39;, &#39;title&#39;: &#39;Luis Fonsi, Demi Lovato - Échame La Culpa (Video Oficial)&#39;, &#39;author&#39;: &#39;Luis Fonsi&#39;, &#39;viewsString&#39;: &#39;2B&#39;, &#39;lengthString&#39;: &#39;3:31&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/TfkP5ubz1z4/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBXxsS53YwcBoOez5OE4zgPu99KHQ&#39;, &#39;title&#39;: &#39;Justin Bieber - Despacito (Lyrics / Letra) ft. Luis Fonsi &amp; Daddy Yankee&#39;, &#39;author&#39;: &#39;7clouds&#39;, &#39;viewsString&#39;: &#39;35M&#39;, &#39;lengthString&#39;: &#39;3:51&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/h6vj8Ryu0LI/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAyZaPu5vu8jgDSlAF4B9UcT72PRw&#39;, &#39;title&#39;: &#39;Luis Fonsi - Despacito ft. Daddy Yankee &amp; Justin Bieber (SING OFF vs. Pixie Lott)&#39;, &#39;author&#39;: &#39;Conor Maynard&#39;, &#39;viewsString&#39;: &#39;226M&#39;, &#39;lengthString&#39;: &#39;5:23&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/zvKn2RiXVfc/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLChUmjA2327X5BOjTC9lS2FJB-3EA&#39;, &#39;title&#39;: &#39;TOP 10 | THE HARDEST GENDER identifications in The Voice&#39;, &#39;author&#39;: &#39;Best of The Voice&#39;, &#39;viewsString&#39;: &#39;21M&#39;, &#39;lengthString&#39;: &#39;17:36&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/whwe0KD_rGw/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAHpsL01E241DCvjgTvwUb2KlYvgQ&#39;, &#39;title&#39;: &#39;Justin Bieber – Despacito (Lyrics) 🎤 ft. Luis Fonsi &amp; Daddy Yankee [Pop]&#39;, &#39;author&#39;: &#39;Taz Network&#39;, &#39;viewsString&#39;: &#39;348M&#39;, &#39;lengthString&#39;: &#39;3:51&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/72UO0v5ESUo/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLD9eRVhsetOGUVsmlaEWQlqiC-jyQ&#39;, &#39;title&#39;: &#39;Luis Fonsi, Daddy Yankee - Despacito (Remix) (Official Audio) ft. Justin Bieber&#39;, &#39;author&#39;: &#39;Luis Fonsi&#39;, &#39;viewsString&#39;: &#39;673M&#39;, &#39;lengthString&#39;: &#39;3:49&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/Vnngj_l_J6M/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLA40quCBXnDyD-AjP-_DdcCuZp7lw&#39;, &#39;title&#39;: &#39;Luis Fonsi - Despacito (Letra/Lyrics) ft. Daddy Yankee&#39;, &#39;author&#39;: &#39;E Hits&#39;, &#39;viewsString&#39;: &#39;294K&#39;, &#39;lengthString&#39;: &#39;6:30&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/KafZCpAp82Q/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDmJ1BU4N0YFt7M1qNxOrXYcbV7KQ&#39;, &#39;title&#39;: &#39;Cristiano Ronaldo ► &#34;DESPACITO&#34; - Luis Fonsi • Real Madrid Skills &amp; Goals 2014 | HD&#39;, &#39;author&#39;: &#39;KIANO7HD&#39;, &#39;viewsString&#39;: &#39;117K&#39;, &#39;lengthString&#39;: &#39;4:19&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/uVrG7KPmrQo/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBIhyentDZsJALG-4i6oyYhla5psA&#39;, &#39;title&#39;: &#39;Luis Fonsi - Despacito (Lyrics)&#39;, &#39;author&#39;: &#39;Good Vibes Only &#39;, &#39;viewsString&#39;: &#39;372K&#39;, &#39;lengthString&#39;: &#39;4:53&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/UL-aEOvkPaM/hqdefault.jpg?sqp=-oaymwEcCOADEI4CSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDTbR__FcCBek_rP6mfZozintBmDw&#39;, &#39;title&#39;: &#39;Clash royale diss track🔥 (Despacito parody)&#39;, &#39;author&#39;: &#39;Crusher 21&#39;, &#39;viewsString&#39;: &#39;82K&#39;, &#39;lengthString&#39;: &#39;4:04&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/XkJKY72OOew/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCbGn4t33W0vsg2erF9-1EsqyU-dg&#39;, &#39;title&#39;: &#39;Despacito - Luis Fonsi (Lyrics)&#39;, &#39;author&#39;: &#39;Dandelion &#39;, &#39;viewsString&#39;: &#39;165&#39;, &#39;lengthString&#39;: &#39;4:51&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/sZ_vS3shFBE/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAPcSUT6sWG8YHUf2uEuKv21haQgg&#39;, &#39;title&#39;: &#39;♫ AH POIS É| BENFICA VS PSG| PARÓDIA- DESPACITO |&#39;, &#39;author&#39;: &#39;Rapaz Malvado&#39;, &#39;viewsString&#39;: &#39;68K&#39;, &#39;lengthString&#39;: &#39;2:37&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/9MeAh-GdYoA/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC81bA92EUK9xxWxan5ckRYV-P7OQ&#39;, &#39;title&#39;: &#39;Luis Fonsi &amp; Despacito (Lyrics / Lyric Video) ft. Daddy Yankee&#39;, &#39;author&#39;: &#39;Feeling Off&#39;, &#39;viewsString&#39;: &#39;8K&#39;, &#39;lengthString&#39;: &#39;4:43&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/dku9Kd8ajf8/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBAlcpSzmJ18lsJLQasLIIMh5U4LA&#39;, &#39;title&#39;: &#39;Despacito (Remix)&#39;, &#39;author&#39;: &#39;David Michael Frank&#39;, &#39;viewsString&#39;: &#39;448&#39;, &#39;lengthString&#39;: &#39;3:40&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/zrJtFy51fRo/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCUqrotW32dSX_hoaS0vlLqvcE4vQ&#39;, &#39;title&#39;: &#39;Luis Fonsi: Despacito&#39;, &#39;author&#39;: &#39;The Tonight Show Starring Jimmy Fallon&#39;, &#39;viewsString&#39;: &#39;17M&#39;, &#39;lengthString&#39;: &#39;4:07&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/Q4a9uwV4nmo/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDo0Pi5nzTR-dtpIxIkgLuPRoK-og&#39;, &#39;title&#39;: &#39;Despacito - Luis Fonsi (ft. Daddy Yankee) - Marlon Alves Dance MAs&#39;, &#39;author&#39;: &#39;Marlon Alves&#39;, &#39;viewsString&#39;: &#39;108M&#39;, &#39;lengthString&#39;: &#39;3:58&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/mnvagBdO128/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCn_6zWiV8YzvTEn-jZC5a-FrYD8Q&#39;, &#39;title&#39;: &#39;Justin Bieber - Despacito (Lyrics) ft. Luis Fonsi &amp; Daddy Yankee&#39;, &#39;author&#39;: &#39;Royal Music&#39;, &#39;viewsString&#39;: &#39;51M&#39;, &#39;lengthString&#39;: &#39;4:12&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/4bmUFRxNEIg/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBXMKL1vrjL0FjuctBDMZQ4mtFyvg&#39;, &#39;title&#39;: &#39;Luis Fonsi - Despacito ( cover by J.Fla )&#39;, &#39;author&#39;: &#39;JFlaMusic&#39;, &#39;viewsString&#39;: &#39;208M&#39;, &#39;lengthString&#39;: &#39;2:43&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/o18ToVy9Xsc/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDk4VSOusRJy38iPxkhJ4QRa9wzzg&#39;, &#39;title&#39;: &#39;Justin Bieber – Despacito ft. Luis Fonsi &amp; Daddy Yankee (Letra/Lyrics)&#39;, &#39;author&#39;: &#39;Melodiam Mùsica&#39;, &#39;viewsString&#39;: &#39;958K&#39;, &#39;lengthString&#39;: &#39;3:48&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/YItSoGdKSqI/hq720_2.jpg?sqp=-oaymwEdCJYDENAFSFXyq4qpAw8IARUAAIhCcAHAAQbQAQE=&amp;rs=AOn4CLBgNDf9WwNRNAmZqs9Tjol2spcgxQ&#39;, &#39;title&#39;: &#39;Ronaldo And Messi🔥🥶|Despacito (Now) (All time) 10 M + Views&#39;, &#39;author&#39;: &#39;Terminator Rono&#39;, &#39;viewsString&#39;: &#39;10M&#39;, &#39;lengthString&#39;: &#39;0:59&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/7YJCp6J9H8E/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCFloc3KUievFryvEdaLZ0TZ1TDfA&#39;, &#39;title&#39;: &#39;Despacito (new video) feat. Justin Bieber (Luis Fonsi &amp; Daddy Yankee)&#39;, &#39;author&#39;: &#39;Frederic Bisson&#39;, &#39;viewsString&#39;: &#39;1M&#39;, &#39;lengthString&#39;: &#39;3:49&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/TyHvyGVs42U/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLC3sLxZ9CZdlOjy6HeaSTIe_CitAg&#39;, &#39;title&#39;: &#39;Luis Fonsi, Demi Lovato - Échame La Culpa (Video Oficial)&#39;, &#39;author&#39;: &#39;Luis Fonsi&#39;, &#39;viewsString&#39;: &#39;2B&#39;, &#39;lengthString&#39;: &#39;3:31&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/ixkoVwKQaJg/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLDTjznmDml_d3RH-WGI5qOCv76R9w&#39;, &#39;title&#39;: &#39;DJ Snake - Taki Taki ft. Selena Gomez, Ozuna, Cardi B (Official Music Video)&#39;, &#39;author&#39;: &#39;DJ Snake&#39;, &#39;viewsString&#39;: &#39;2B&#39;, &#39;lengthString&#39;: &#39;3:52&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/q0hyYWKXF0Q/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLBM6Yht9a2IVk4AeL6whUm4s9ra8Q&#39;, &#39;title&#39;: &#39;TONES AND I - DANCE MONKEY (OFFICIAL VIDEO)&#39;, &#39;author&#39;: &#39;Tones And I&#39;, &#39;viewsString&#39;: &#39;1B&#39;, &#39;lengthString&#39;: &#39;3:57&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/8hRGBcr_gJc/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCu6YYNsK-skTLt99EnBV_kcE94WQ&#39;, &#39;title&#39;: &#39;Luis Fonsi - No Me Doy Por Vencido&#39;, &#39;author&#39;: &#39;Luis Fonsi&#39;, &#39;viewsString&#39;: &#39;266M&#39;, &#39;lengthString&#39;: &#39;3:54&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/NNrSpqCd3D4/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLCcWOtY7DmcfBjczupQOwKbYEvMzw&#39;, &#39;title&#39;: &#39;SONIC 2 - Despacito (Best Music Video)&#39;, &#39;author&#39;: &#39;Grand Music&#39;, &#39;viewsString&#39;: &#39;980K&#39;, &#39;lengthString&#39;: &#39;4:09&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/5QvxV_-ufZc/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAZ1-gAEl3_sAwfEEKErloJInIDIg&#39;, &#39;title&#39;: &#39;Despacito - Malayalam Mashup | Farzee ft Safdar Hafiz, Aadhi De Karmans | Kasaragod&#39;, &#39;author&#39;: &#39;Mangesh Nyati&#39;, &#39;viewsString&#39;: &#39;10M&#39;, &#39;lengthString&#39;: &#39;5:14&#39;}, {&#39;thumburl&#39;: &#39;https://i.ytimg.com/vi/D9LrEXF3USs/hq720.jpg?sqp=-oaymwEcCOgCEMoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&amp;rs=AOn4CLAowqvxizwyTGkfxxow1GeUCCr3iw&#39;, &#39;title&#39;: &#39;2CELLOS - Despacito [OFFICIAL VIDEO]&#39;, &#39;author&#39;: &#39;2CELLOS&#39;, &#39;viewsString&#39;: &#39;49M&#39;, &#39;lengthString&#39;: &#39;3:10&#39;}]} .",
            "url": "https://jasoxddd.github.io/FastProject2/youtubeapi",
            "relUrl": "/youtubeapi",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;6615470177msh2eb9d9776c82332p163317jsn65585d1a22d9&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1488,&#34;totalCoins&#34;:21256,&#34;totalMarkets&#34;:29445,&#34;totalExchanges&#34;:171,&#34;totalMarketCap&#34;:&#34;942500653145&#34;,&#34;total24hVolume&#34;:&#34;56470853554&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;365436919376&#34;,&#34;price&#34;:&#34;19057.280343776176&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.94&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;19488.1506450618&#34;,&#34;19512.288719015418&#34;,&#34;19491.89908856991&#34;,&#34;19460.76987970102&#34;,&#34;19465.456163058043&#34;,&#34;19434.89948882122&#34;,&#34;19424.768739053052&#34;,&#34;19381.495949060733&#34;,&#34;19255.508791978747&#34;,&#34;19304.796794285616&#34;,&#34;19320.029567506706&#34;,&#34;19342.555032513174&#34;,&#34;19393.206439966132&#34;,&#34;19353.356689246357&#34;,&#34;19295.4730157485&#34;,&#34;19277.110522578794&#34;,&#34;19205.507401280112&#34;,&#34;19230.513330824815&#34;,&#34;19269.20760106672&#34;,&#34;19226.28810639702&#34;,&#34;19233.1885342983&#34;,&#34;19245.24660168312&#34;,&#34;19194.126587054343&#34;,&#34;19166.758434710086&#34;,&#34;19115.42500868895&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;28792587963&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;156488062964&#34;,&#34;price&#34;:&#34;1278.7448565611858&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.37&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1331.5044546621384&#34;,&#34;1330.4653962139093&#34;,&#34;1325.955519830478&#34;,&#34;1323.9386642517868&#34;,&#34;1324.313403721748&#34;,&#34;1319.7955940519878&#34;,&#34;1317.963290856793&#34;,&#34;1315.2610947850062&#34;,&#34;1306.4389281042727&#34;,&#34;1310.8645857269105&#34;,&#34;1312.9170218694812&#34;,&#34;1315.0839615355765&#34;,&#34;1316.8018884207568&#34;,&#34;1312.9151771475322&#34;,&#34;1309.4402032235853&#34;,&#34;1308.7145413566764&#34;,&#34;1304.3906358981922&#34;,&#34;1305.8987603903568&#34;,&#34;1309.2574980594059&#34;,&#34;1308.3399813540152&#34;,&#34;1308.156914595738&#34;,&#34;1306.9719788418965&#34;,&#34;1299.4746424816135&#34;,&#34;1294.312920524021&#34;,&#34;1285.7931534436002&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;9402528857&#34;,&#34;btcPrice&#34;:&#34;0.0671000706026138&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68469359310&#34;,&#34;price&#34;:&#34;1.0006942257899014&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.06&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.00001000523563&#34;,&#34;1.0011034439527615&#34;,&#34;1.001161264197156&#34;,&#34;1.0010572266113555&#34;,&#34;1.0005697814658174&#34;,&#34;1.0010922851917061&#34;,&#34;1.0008441808312771&#34;,&#34;1.0017436449079997&#34;,&#34;1.0007027635542591&#34;,&#34;0.9996645367670199&#34;,&#34;0.9999390115468976&#34;,&#34;0.9999094436014718&#34;,&#34;0.9996875863868945&#34;,&#34;1.0006879906066195&#34;,&#34;1.000484422046895&#34;,&#34;1.0000893181295456&#34;,&#34;1.0009961139938581&#34;,&#34;0.998967652984781&#34;,&#34;1.0001297995181815&#34;,&#34;1.0001812711445561&#34;,&#34;0.9998776147234318&#34;,&#34;0.9999456923398682&#34;,&#34;1.0014649584038038&#34;,&#34;1.0003745939212896&#34;,&#34;1.0017869884406445&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;37713786549&#34;,&#34;btcPrice&#34;:&#34;0.000052509812929142&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46060009308&#34;,&#34;price&#34;:&#34;1.001516752958171&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.08&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;0.9999464672512742&#34;,&#34;1.0007495887701197&#34;,&#34;1.0008677225113292&#34;,&#34;1.0009310935906095&#34;,&#34;1.0004184750469038&#34;,&#34;1.000901250517255&#34;,&#34;1.0006467731338917&#34;,&#34;1.0014501628343724&#34;,&#34;1.0009318082864203&#34;,&#34;0.9997130987136762&#34;,&#34;1.0000317574011472&#34;,&#34;0.9998815120266752&#34;,&#34;0.9995940525470003&#34;,&#34;1.0006321859803207&#34;,&#34;1.0003801151930976&#34;,&#34;1.0000183858482248&#34;,&#34;1.001053890492374&#34;,&#34;0.9991512285146926&#34;,&#34;1.000108983581862&#34;,&#34;1.0002461692196565&#34;,&#34;0.9999650013436789&#34;,&#34;0.9999452655588404&#34;,&#34;1.0014286785732378&#34;,&#34;1.0003739370478704&#34;,&#34;1.0016810358315087&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3068036632&#34;,&#34;btcPrice&#34;:&#34;0.000052552973713547&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;39022636628&#34;,&#34;price&#34;:&#34;269.35239602160357&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.94&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;278.5119412738475&#34;,&#34;278.8500346304702&#34;,&#34;278.55481674988823&#34;,&#34;278.15563968131687&#34;,&#34;278.27056641644765&#34;,&#34;277.6476509793223&#34;,&#34;277.1886552863454&#34;,&#34;276.16881192663146&#34;,&#34;273.63316482987625&#34;,&#34;274.4101654979415&#34;,&#34;274.737145190874&#34;,&#34;275.07124030373643&#34;,&#34;275.68159210343777&#34;,&#34;275.0410443309801&#34;,&#34;274.73037199504836&#34;,&#34;274.8554163480047&#34;,&#34;274.10875888352996&#34;,&#34;273.8179893160553&#34;,&#34;274.4492817889739&#34;,&#34;274.298685475948&#34;,&#34;274.67159767911375&#34;,&#34;274.9198236369963&#34;,&#34;273.8718264000287&#34;,&#34;272.7249664678188&#34;,&#34;271.1536159389556&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;779280699&#34;,&#34;btcPrice&#34;:&#34;0.014133831856525636&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24617482897&#34;,&#34;price&#34;:&#34;0.49374621214983844&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-7.11&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.536001262965347&#34;,&#34;0.5331938666039274&#34;,&#34;0.5313677614997179&#34;,&#34;0.5321125340805518&#34;,&#34;0.5336003513686314&#34;,&#34;0.5289865890366551&#34;,&#34;0.5274128004730656&#34;,&#34;0.5219989218017307&#34;,&#34;0.5149385991747175&#34;,&#34;0.515854485381372&#34;,&#34;0.5167502267788407&#34;,&#34;0.5195469975711722&#34;,&#34;0.5202397696232272&#34;,&#34;0.5187425583816472&#34;,&#34;0.5183839704304823&#34;,&#34;0.5212630900119376&#34;,&#34;0.5199601816307717&#34;,&#34;0.5240089606534403&#34;,&#34;0.5255371203584706&#34;,&#34;0.5220263314887269&#34;,&#34;0.5221018096191841&#34;,&#34;0.5200142891397306&#34;,&#34;0.509361052693131&#34;,&#34;0.5013384770579202&#34;,&#34;0.4942989996608993&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;3324267632&#34;,&#34;btcPrice&#34;:&#34;0.000025908534861381&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21560959768&#34;,&#34;price&#34;:&#34;1.0011741265983014&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.03&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.0001030171416907&#34;,&#34;1.0010235858029901&#34;,&#34;1.0010528890095072&#34;,&#34;1.0009938666952272&#34;,&#34;1.000515128673911&#34;,&#34;1.0009273118659494&#34;,&#34;1.000611336250255&#34;,&#34;1.0014579970628081&#34;,&#34;1.000677349251088&#34;,&#34;0.9996807797683624&#34;,&#34;0.9998433930116546&#34;,&#34;0.9998522489705708&#34;,&#34;0.9996381055262161&#34;,&#34;1.0005974243549933&#34;,&#34;1.0004023284216412&#34;,&#34;1.000163659472327&#34;,&#34;1.0011862812978658&#34;,&#34;0.9990864256357932&#34;,&#34;1.0002355212738534&#34;,&#34;1.000269157695084&#34;,&#34;0.9999944965812787&#34;,&#34;1.0000100050682832&#34;,&#34;1.0016481968703868&#34;,&#34;1.000480327014256&#34;,&#34;1.0019087447403483&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6511001667&#34;,&#34;btcPrice&#34;:&#34;0.000052534994948808&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;12234133405&#34;,&#34;price&#34;:&#34;0.3932226405369482&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-7.00&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.4248395839110206&#34;,&#34;0.4248859870710071&#34;,&#34;0.42454957159336026&#34;,&#34;0.42404560267712815&#34;,&#34;0.4238259339792199&#34;,&#34;0.4224438148871179&#34;,&#34;0.42209194632395824&#34;,&#34;0.42035582181732495&#34;,&#34;0.41547852410275193&#34;,&#34;0.4163366130530005&#34;,&#34;0.41765797260465715&#34;,&#34;0.4166603341689174&#34;,&#34;0.4168702171759364&#34;,&#34;0.41686684548569847&#34;,&#34;0.41583769229358947&#34;,&#34;0.41579821380978654&#34;,&#34;0.4143870909718264&#34;,&#34;0.4142685976806404&#34;,&#34;0.41513707858303306&#34;,&#34;0.41453684658495676&#34;,&#34;0.41379894391748345&#34;,&#34;0.4123725462795601&#34;,&#34;0.4080055032169277&#34;,&#34;0.405883954412975&#34;,&#34;0.39798476436528485&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;651377338&#34;,&#34;btcPrice&#34;:&#34;0.000020633722831567&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11268218358&#34;,&#34;price&#34;:&#34;31.523242018327903&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.29&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.18789770753263&#34;,&#34;33.1927134280568&#34;,&#34;33.19781898483588&#34;,&#34;33.07642217617395&#34;,&#34;33.07172091668538&#34;,&#34;32.9266503861911&#34;,&#34;32.90455854621633&#34;,&#34;32.866187416403854&#34;,&#34;32.57602885895038&#34;,&#34;32.65354100721354&#34;,&#34;32.669857987515854&#34;,&#34;32.71817993307914&#34;,&#34;32.782767093985&#34;,&#34;32.63642525532733&#34;,&#34;32.572546699830895&#34;,&#34;32.6156230593697&#34;,&#34;32.51286713479698&#34;,&#34;32.43893950895768&#34;,&#34;32.463358235308455&#34;,&#34;32.521387492368184&#34;,&#34;32.48604760280608&#34;,&#34;32.4560223157472&#34;,&#34;32.26253486449203&#34;,&#34;32.150713790979786&#34;,&#34;31.78444656514117&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;790085096&#34;,&#34;btcPrice&#34;:&#34;0.001654131200763016&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;7998544130&#34;,&#34;price&#34;:&#34;0.05863166282740626&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.58&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.062287345702963244&#34;,&#34;0.06241885274946726&#34;,&#34;0.062432991553733636&#34;,&#34;0.06229428237013838&#34;,&#34;0.06231802722929127&#34;,&#34;0.06218238985620366&#34;,&#34;0.06199532843621824&#34;,&#34;0.061597915389598704&#34;,&#34;0.06055655313562343&#34;,&#34;0.06077028914052766&#34;,&#34;0.06084247892627089&#34;,&#34;0.06094204711090153&#34;,&#34;0.06096044184402653&#34;,&#34;0.060875339606219436&#34;,&#34;0.060666134063607935&#34;,&#34;0.060640941337122084&#34;,&#34;0.060400845558136254&#34;,&#34;0.060447501789056966&#34;,&#34;0.06061659164177599&#34;,&#34;0.060621170829840004&#34;,&#34;0.06057544989711385&#34;,&#34;0.06060266085866204&#34;,&#34;0.06008729508201146&#34;,&#34;0.05976915584680669&#34;,&#34;0.05900134807559886&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;364432574&#34;,&#34;btcPrice&#34;:&#34;0.000003076601790483&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7130690799&#34;,&#34;price&#34;:&#34;6.190998900134086&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.63&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;6.522414668255934&#34;,&#34;6.520203263943129&#34;,&#34;6.493546547021137&#34;,&#34;6.4578997776453795&#34;,&#34;6.461761001965112&#34;,&#34;6.433328310449588&#34;,&#34;6.416466404167233&#34;,&#34;6.395067921292741&#34;,&#34;6.321212748572312&#34;,&#34;6.347002042078148&#34;,&#34;6.352722958380046&#34;,&#34;6.356290684071334&#34;,&#34;6.377871401905183&#34;,&#34;6.365844008519976&#34;,&#34;6.349456462131741&#34;,&#34;6.345065195560296&#34;,&#34;6.330472921445338&#34;,&#34;6.341417794562836&#34;,&#34;6.347150210132025&#34;,&#34;6.354097666999308&#34;,&#34;6.35742194931169&#34;,&#34;6.352193159517849&#34;,&#34;6.322081551689837&#34;,&#34;6.305088908171669&#34;,&#34;6.2315585242715965&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;274965800&#34;,&#34;btcPrice&#34;:&#34;0.000324862666049617&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7045070277&#34;,&#34;price&#34;:&#34;0.8046293570356682&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.77&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;0.8355947783401839&#34;,&#34;0.8338055756126723&#34;,&#34;0.8324855038415062&#34;,&#34;0.8311784328288198&#34;,&#34;0.8320848378678446&#34;,&#34;0.8292640573568149&#34;,&#34;0.8292414803865568&#34;,&#34;0.8266214710142122&#34;,&#34;0.8185179143282095&#34;,&#34;0.8218278450071256&#34;,&#34;0.8225911804857766&#34;,&#34;0.8251238788232297&#34;,&#34;0.8362829959709097&#34;,&#34;0.8345234984931166&#34;,&#34;0.8338413152773577&#34;,&#34;0.8361717933703776&#34;,&#34;0.8355817885790918&#34;,&#34;0.8361330733155342&#34;,&#34;0.8379349680654332&#34;,&#34;0.8358692173695744&#34;,&#34;0.8361429404775895&#34;,&#34;0.837381294126906&#34;,&#34;0.8328412171573272&#34;,&#34;0.8241211720588503&#34;,&#34;0.811636490175781&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;341018405&#34;,&#34;btcPrice&#34;:&#34;0.000042221625673804&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6290473766&#34;,&#34;price&#34;:&#34;1.0016189326906015&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.12&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.9995952797984599&#34;,&#34;1.0005944275946466&#34;,&#34;1.0006989278642797&#34;,&#34;1.0006570846371072&#34;,&#34;1.00014172207927&#34;,&#34;1.000607221507067&#34;,&#34;1.0004256035942012&#34;,&#34;1.0010836396182805&#34;,&#34;1.0006642958554737&#34;,&#34;0.999512025173032&#34;,&#34;0.9998341824770189&#34;,&#34;0.999745222484189&#34;,&#34;0.9995131455916638&#34;,&#34;1.0003442549883552&#34;,&#34;1.000418137069989&#34;,&#34;0.9996749185659772&#34;,&#34;1.00033783566407&#34;,&#34;0.9998953811696848&#34;,&#34;0.9996573747638419&#34;,&#34;1.0000083273029405&#34;,&#34;0.9998671046404827&#34;,&#34;0.9999409906864343&#34;,&#34;1.0007177269282244&#34;,&#34;1.0009040784563923&#34;,&#34;1.0010582292761356&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;107751594&#34;,&#34;btcPrice&#34;:&#34;0.000052558335429941&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;5955829983&#34;,&#34;price&#34;:&#34;0.00001010227002507&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-8.58&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;0.000011085667477873&#34;,&#34;0.000011085427478335&#34;,&#34;0.000011057891826386&#34;,&#34;0.000011035159861281&#34;,&#34;0.000011034400237589&#34;,&#34;0.000011011657864712&#34;,&#34;0.000010995230528756&#34;,&#34;0.000010948690684111&#34;,&#34;0.000010847302094506&#34;,&#34;0.000010877766772867&#34;,&#34;0.000010874859587745&#34;,&#34;0.000010875576263496&#34;,&#34;0.000010880901926293&#34;,&#34;0.000010844023987075&#34;,&#34;0.000010804528806046&#34;,&#34;0.000010809603041135&#34;,&#34;0.000010745372617173&#34;,&#34;0.0000107213976394&#34;,&#34;0.000010741628745016&#34;,&#34;0.000010739063895767&#34;,&#34;0.000010742733707646&#34;,&#34;0.0000107364719857&#34;,&#34;0.000010507878122533&#34;,&#34;0.000010366535432926&#34;,&#34;0.000010158756516898&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;331561288&#34;,&#34;btcPrice&#34;:&#34;5.301003e-10&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5738503869&#34;,&#34;price&#34;:&#34;0.06215358754277865&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.72&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06247616120182798&#34;,&#34;0.06246937156935979&#34;,&#34;0.06253567388706331&#34;,&#34;0.06329507247095194&#34;,&#34;0.06386497553291684&#34;,&#34;0.06409887046474316&#34;,&#34;0.0644208178957639&#34;,&#34;0.06421192875139836&#34;,&#34;0.0640879476466854&#34;,&#34;0.06450582979819015&#34;,&#34;0.06418713281497941&#34;,&#34;0.06389192711997757&#34;,&#34;0.06385196700333104&#34;,&#34;0.06384764698414129&#34;,&#34;0.06370402395413473&#34;,&#34;0.06365255134176188&#34;,&#34;0.06345367803143843&#34;,&#34;0.06337662524119668&#34;,&#34;0.06348631048281347&#34;,&#34;0.06351012216233788&#34;,&#34;0.0635182991486947&#34;,&#34;0.06376266708708926&#34;,&#34;0.06370716120506523&#34;,&#34;0.06309971001866953&#34;,&#34;0.06264473407430877&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;582562592&#34;,&#34;btcPrice&#34;:&#34;0.000003261409100437&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5232991603&#34;,&#34;price&#34;:&#34;1283.4302597229096&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.23&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1326.8994579417572&#34;,&#34;1329.082588936404&#34;,&#34;1325.3806266699617&#34;,&#34;1327.9636361826838&#34;,&#34;1322.658292904248&#34;,&#34;1318.291837008896&#34;,&#34;1323.8570639083352&#34;,&#34;1318.2953627197976&#34;,&#34;1310.2980526689626&#34;,&#34;1312.270149865777&#34;,&#34;1312.8128282299035&#34;,&#34;1314.505568224447&#34;,&#34;1316.0722115717056&#34;,&#34;1313.86091043222&#34;,&#34;1314.5406743552123&#34;,&#34;1312.221165655094&#34;,&#34;1309.339952066803&#34;,&#34;1306.1936121052709&#34;,&#34;1311.789293601869&#34;,&#34;1310.0362605393268&#34;,&#34;1309.71409354287&#34;,&#34;1309.6868774391862&#34;,&#34;1303.9351604172366&#34;,&#34;1295.2887096839981&#34;,&#34;1290.963222894555&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;60622448&#34;,&#34;btcPrice&#34;:&#34;0.06734592956450153&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;4955985628&#34;,&#34;price&#34;:&#34;6.38200976407113&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.65&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.68493097315378&#34;,&#34;6.6508243591566645&#34;,&#34;6.619564394233391&#34;,&#34;6.588639754638839&#34;,&#34;6.564769806187757&#34;,&#34;6.525285033982343&#34;,&#34;6.509442090421682&#34;,&#34;6.465976702400582&#34;,&#34;6.359592112172924&#34;,&#34;6.38246396339638&#34;,&#34;6.391837237499858&#34;,&#34;6.4066385130391055&#34;,&#34;6.4294186545024115&#34;,&#34;6.401093874922428&#34;,&#34;6.369940033084528&#34;,&#34;6.385004723778107&#34;,&#34;6.338066446407772&#34;,&#34;6.339321320671483&#34;,&#34;6.379166316406551&#34;,&#34;6.366083651283065&#34;,&#34;6.356164240275081&#34;,&#34;6.355178188304351&#34;,&#34;6.333594981574734&#34;,&#34;6.3803920539256795&#34;,&#34;6.365829911021807&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;94892188&#34;,&#34;btcPrice&#34;:&#34;0.000334885652566653&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;4713530957&#34;,&#34;price&#34;:&#34;15.916309864882791&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.97&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.102172493689842&#34;,&#34;17.106125431403875&#34;,&#34;17.039032111565433&#34;,&#34;17.008332051978044&#34;,&#34;17.002924436167042&#34;,&#34;16.936349177621757&#34;,&#34;16.913126378328176&#34;,&#34;16.847601633714635&#34;,&#34;16.658660902198505&#34;,&#34;16.70403290401331&#34;,&#34;16.707324912529838&#34;,&#34;16.70727722123129&#34;,&#34;16.749850973650503&#34;,&#34;16.715137480599257&#34;,&#34;16.678524709275052&#34;,&#34;16.685648108045566&#34;,&#34;16.617456400020398&#34;,&#34;16.594059541623484&#34;,&#34;16.594896192785644&#34;,&#34;16.59463747940776&#34;,&#34;16.588924469841242&#34;,&#34;16.58785905301111&#34;,&#34;16.43613225433572&#34;,&#34;16.297278829294456&#34;,&#34;16.073755064596764&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;231370659&#34;,&#34;btcPrice&#34;:&#34;0.000835182648193598&#34;},{&#34;uuid&#34;:&#34;N2IgQ9Xme&#34;,&#34;symbol&#34;:&#34;BIT&#34;,&#34;name&#34;:&#34;BitDAO &#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/0ClFW1IpO/bitdao.png&#34;,&#34;marketCap&#34;:&#34;4372940450&#34;,&#34;price&#34;:&#34;0.4372940449727807&#34;,&#34;listedAt&#34;:1639033619,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.25&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;0.46219072056129445&#34;,&#34;0.46687259427130223&#34;,&#34;0.4692093158839787&#34;,&#34;0.46618234487860366&#34;,&#34;0.46986913457015855&#34;,&#34;0.469132056591609&#34;,&#34;0.47246686104851215&#34;,&#34;0.46690206949738644&#34;,&#34;0.4644340510926768&#34;,&#34;0.4694372404900944&#34;,&#34;0.4708098764137554&#34;,&#34;0.4645327591092195&#34;,&#34;0.4556222929795641&#34;,&#34;0.4770183163625606&#34;,&#34;0.45454390317353893&#34;,&#34;0.4443108288671447&#34;,&#34;0.4520873099391207&#34;,&#34;0.44801571799726564&#34;,&#34;0.4454577497382288&#34;,&#34;0.44055817469528386&#34;,&#34;0.4326108998559247&#34;,&#34;0.4320145274426853&#34;,&#34;0.4340533847260149&#34;,&#34;0.4333167581429271&#34;,&#34;0.4349762069503781&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/N2IgQ9Xme+bitdao-bit&#34;,&#34;24hVolume&#34;:&#34;5442752&#34;,&#34;btcPrice&#34;:&#34;0.000022946298584289&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;4172002580&#34;,&#34;price&#34;:&#34;4.452946301781518&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.86&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;4.541557235833156&#34;,&#34;4.553964309919697&#34;,&#34;4.573807506121347&#34;,&#34;4.583824533409134&#34;,&#34;4.58777083313669&#34;,&#34;4.578042042096431&#34;,&#34;4.56839051236663&#34;,&#34;4.556957243152516&#34;,&#34;4.514361093190037&#34;,&#34;4.51411826226915&#34;,&#34;4.515874263628293&#34;,&#34;4.521976084538046&#34;,&#34;4.532935644766504&#34;,&#34;4.521760014965639&#34;,&#34;4.520019289197111&#34;,&#34;4.517811278099297&#34;,&#34;4.511330848545448&#34;,&#34;4.505980821110556&#34;,&#34;4.522281220765949&#34;,&#34;4.520214786876497&#34;,&#34;4.535313546126254&#34;,&#34;4.5379942350086&#34;,&#34;4.5258396094226265&#34;,&#34;4.508058752658336&#34;,&#34;4.4841101289744385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;42421456&#34;,&#34;btcPrice&#34;:&#34;0.000233661163684134&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3939997447&#34;,&#34;price&#34;:&#34;15.658048903533913&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.62&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.591467798627574&#34;,&#34;15.581556794047126&#34;,&#34;15.605175449313528&#34;,&#34;15.615289675489006&#34;,&#34;15.625038128428859&#34;,&#34;15.604174085630548&#34;,&#34;15.574545856650806&#34;,&#34;15.572868875583644&#34;,&#34;15.542121912197215&#34;,&#34;16.134833115902538&#34;,&#34;15.899972098068528&#34;,&#34;15.765470392550053&#34;,&#34;15.81243740688281&#34;,&#34;15.777447467300988&#34;,&#34;15.713267957178454&#34;,&#34;15.962280261827383&#34;,&#34;15.902858045834567&#34;,&#34;15.909962681403238&#34;,&#34;15.98501056643548&#34;,&#34;16.078829507569637&#34;,&#34;16.132642151938278&#34;,&#34;16.164743630858517&#34;,&#34;16.079039642144338&#34;,&#34;15.867529576327358&#34;,&#34;15.72388505518818&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;31646834&#34;,&#34;btcPrice&#34;:&#34;0.000821630821453891&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;3838471982&#34;,&#34;price&#34;:&#34;12.310514152737007&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;-6.73&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;13.240493051122758&#34;,&#34;13.203524128662405&#34;,&#34;13.208534134223218&#34;,&#34;13.183274155293194&#34;,&#34;13.188652235304392&#34;,&#34;13.130616652861544&#34;,&#34;13.087202881216099&#34;,&#34;13.022583539133564&#34;,&#34;12.833791235932797&#34;,&#34;12.91152394466347&#34;,&#34;12.917631378513779&#34;,&#34;12.915336415870756&#34;,&#34;12.931095667137745&#34;,&#34;12.896974898580421&#34;,&#34;12.85128908107414&#34;,&#34;12.828121310377496&#34;,&#34;12.761155957427574&#34;,&#34;12.808555314335083&#34;,&#34;12.812478669821102&#34;,&#34;12.80338000836718&#34;,&#34;12.809523682571344&#34;,&#34;12.803819146764381&#34;,&#34;12.63499420421776&#34;,&#34;12.533045194692802&#34;,&#34;12.39494562316739&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;226978137&#34;,&#34;btcPrice&#34;:&#34;0.00064597434317313&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3671778271&#34;,&#34;price&#34;:&#34;51.813480569758035&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.66&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;54.1000851431424&#34;,&#34;54.27021929978684&#34;,&#34;54.125395630457135&#34;,&#34;54.132240684743294&#34;,&#34;54.23893338997876&#34;,&#34;54.07377284759855&#34;,&#34;54.1679566579363&#34;,&#34;53.84007221876719&#34;,&#34;53.12257151076325&#34;,&#34;53.170894312134216&#34;,&#34;53.18262913302431&#34;,&#34;53.24645665562231&#34;,&#34;53.404614642325456&#34;,&#34;53.30623803791401&#34;,&#34;53.265874313817235&#34;,&#34;53.346154348056324&#34;,&#34;53.13888824994733&#34;,&#34;53.159059442536595&#34;,&#34;53.39761367045488&#34;,&#34;53.29231429107475&#34;,&#34;53.223310947009615&#34;,&#34;53.23006885366571&#34;,&#34;53.00789818578906&#34;,&#34;52.87617307993683&#34;,&#34;52.435013585432024&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;815832184&#34;,&#34;btcPrice&#34;:&#34;0.002718828690930159&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3123792551&#34;,&#34;price&#34;:&#34;23.40123722292071&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.87&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;24.21015183147499&#34;,&#34;24.220054760344564&#34;,&#34;24.179767250800577&#34;,&#34;24.131283799723153&#34;,&#34;24.142356189331963&#34;,&#34;24.094101705934523&#34;,&#34;24.07183800573253&#34;,&#34;23.976425552458803&#34;,&#34;23.800239511827083&#34;,&#34;23.858823356389482&#34;,&#34;23.88382507874892&#34;,&#34;23.905857316326845&#34;,&#34;23.940131427563436&#34;,&#34;23.88929633497909&#34;,&#34;23.8192436326369&#34;,&#34;23.81105431094406&#34;,&#34;23.825282932239414&#34;,&#34;23.895411807834172&#34;,&#34;23.974143097182885&#34;,&#34;23.924216793892825&#34;,&#34;23.888623840601248&#34;,&#34;23.83839708625212&#34;,&#34;23.717141798027882&#34;,&#34;23.627292896923777&#34;,&#34;23.50122731707467&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;58047366&#34;,&#34;btcPrice&#34;:&#34;0.00122794211979797&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;2805290677&#34;,&#34;price&#34;:&#34;24.11840005360424&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-10.44&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;27.05917806652507&#34;,&#34;27.085146005847005&#34;,&#34;27.021522040375903&#34;,&#34;26.98432169078792&#34;,&#34;27.027122025302848&#34;,&#34;26.938055939992594&#34;,&#34;26.88692356088141&#34;,&#34;26.733372507855588&#34;,&#34;26.07984975346962&#34;,&#34;26.203893328703757&#34;,&#34;26.196034802120074&#34;,&#34;26.21066200473368&#34;,&#34;26.215036444445808&#34;,&#34;26.09554735934327&#34;,&#34;25.996745169147832&#34;,&#34;25.96014866288886&#34;,&#34;25.723681881869403&#34;,&#34;25.485556955797403&#34;,&#34;25.433836911692385&#34;,&#34;25.389227367676206&#34;,&#34;25.39415910507938&#34;,&#34;25.272615402797435&#34;,&#34;24.566226844483666&#34;,&#34;24.0133629050694&#34;,&#34;24.092033411493283&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;655495728&#34;,&#34;btcPrice&#34;:&#34;0.001265574080799045&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2560841125&#34;,&#34;price&#34;:&#34;140.8167083471278&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.06&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;146.00566200098044&#34;,&#34;146.00792262140632&#34;,&#34;146.02250460772956&#34;,&#34;145.5932155244998&#34;,&#34;145.69944844013193&#34;,&#34;145.9766522870928&#34;,&#34;146.32630032209514&#34;,&#34;146.77317212988203&#34;,&#34;146.52768877422028&#34;,&#34;146.50833060658488&#34;,&#34;146.69928240746736&#34;,&#34;147.24593046538627&#34;,&#34;146.27781177344886&#34;,&#34;145.69001097101844&#34;,&#34;144.7291481840076&#34;,&#34;144.54447840609456&#34;,&#34;144.68891252302785&#34;,&#34;144.73928335075118&#34;,&#34;145.45297214599893&#34;,&#34;145.6421522179348&#34;,&#34;145.95049062123445&#34;,&#34;145.23398099213773&#34;,&#34;143.7977100630252&#34;,&#34;142.84670552317044&#34;,&#34;141.83157545956604&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;87794579&#34;,&#34;btcPrice&#34;:&#34;0.007389129288488241&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2464228015&#34;,&#34;price&#34;:&#34;0.12195813717616484&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.54&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.12848425006001754&#34;,&#34;0.1283184926390934&#34;,&#34;0.12820990817867112&#34;,&#34;0.1277309687147149&#34;,&#34;0.12793994706722867&#34;,&#34;0.12779451373630296&#34;,&#34;0.1279981337959677&#34;,&#34;0.1275563491104387&#34;,&#34;0.12664330160790727&#34;,&#34;0.12611858328006822&#34;,&#34;0.1265770132845544&#34;,&#34;0.12713336834938954&#34;,&#34;0.12698191868487532&#34;,&#34;0.1265359451505847&#34;,&#34;0.1264093054866322&#34;,&#34;0.12682034105686052&#34;,&#34;0.1262686523687261&#34;,&#34;0.12625943495967626&#34;,&#34;0.12626773861063678&#34;,&#34;0.1256827128674751&#34;,&#34;0.12576799709600534&#34;,&#34;0.12590431001694352&#34;,&#34;0.12543067128417607&#34;,&#34;0.12468526520336248&#34;,&#34;0.12316388238292895&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;174287473&#34;,&#34;btcPrice&#34;:&#34;0.000006399556231327&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2198328406&#34;,&#34;price&#34;:&#34;0.31336193398363577&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;-7.13&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;0.3387279059107245&#34;,&#34;0.33960447654374765&#34;,&#34;0.3387528632782401&#34;,&#34;0.33728849659034166&#34;,&#34;0.3362320127566329&#34;,&#34;0.3353026876263522&#34;,&#34;0.33524720825683857&#34;,&#34;0.3334478138212442&#34;,&#34;0.32841029913086295&#34;,&#34;0.3298572823049579&#34;,&#34;0.3296470294960275&#34;,&#34;0.33019445864852315&#34;,&#34;0.33188733194567066&#34;,&#34;0.3306201386482936&#34;,&#34;0.32993652419443625&#34;,&#34;0.3297042437894816&#34;,&#34;0.3283348930494294&#34;,&#34;0.32910723981300416&#34;,&#34;0.33091333980253634&#34;,&#34;0.3301632231410812&#34;,&#34;0.3293750439520783&#34;,&#34;0.3293822678483606&#34;,&#34;0.3257250971984654&#34;,&#34;0.3222961123872611&#34;,&#34;0.3171107739403927&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;100656678&#34;,&#34;btcPrice&#34;:&#34;0.000016443161265977&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2148089723&#34;,&#34;price&#34;:&#34;19093.961144724017&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.08&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;19517.568192567353&#34;,&#34;19544.035967585016&#34;,&#34;19534.5324966652&#34;,&#34;19479.083337737316&#34;,&#34;19463.211729176997&#34;,&#34;19441.068605116212&#34;,&#34;19417.34589460331&#34;,&#34;19384.111502230724&#34;,&#34;19233.256635092377&#34;,&#34;19281.375796692217&#34;,&#34;19309.552774048192&#34;,&#34;19334.500781203707&#34;,&#34;19377.051756270946&#34;,&#34;19366.749202113468&#34;,&#34;19317.86326823132&#34;,&#34;19279.829000118752&#34;,&#34;19227.88086833714&#34;,&#34;19197.38183530521&#34;,&#34;19284.612388716956&#34;,&#34;19243.734456026377&#34;,&#34;19249.779948447147&#34;,&#34;19254.5926498183&#34;,&#34;19247.4558327948&#34;,&#34;19134.655143496842&#34;,&#34;19121.583876090168&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;22673489&#34;,&#34;btcPrice&#34;:&#34;1.0028180899287102&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2112568822&#34;,&#34;price&#34;:&#34;110.42416308022558&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.62&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;117.56005081000826&#34;,&#34;117.71237065782286&#34;,&#34;117.74616923896222&#34;,&#34;117.33547072740411&#34;,&#34;117.53342711096377&#34;,&#34;117.06945355266835&#34;,&#34;116.94540133803127&#34;,&#34;116.4724680750463&#34;,&#34;115.13020819984767&#34;,&#34;115.43795612386734&#34;,&#34;115.69034484071328&#34;,&#34;115.74316570226732&#34;,&#34;115.8483687203122&#34;,&#34;115.71294151287276&#34;,&#34;115.28646128796524&#34;,&#34;115.01379243160117&#34;,&#34;114.47565278620961&#34;,&#34;114.35480605566333&#34;,&#34;114.2646039187397&#34;,&#34;113.59487064922739&#34;,&#34;113.54382352115324&#34;,&#34;113.44392303873478&#34;,&#34;112.68765593140844&#34;,&#34;112.00547273113798&#34;,&#34;111.11220100132405&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;223029669&#34;,&#34;btcPrice&#34;:&#34;0.005794329573174825&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2058413599&#34;,&#34;price&#34;:&#34;0.10207680396962117&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.52&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;0.10748230279369461&#34;,&#34;0.10750938227871684&#34;,&#34;0.10776829107405585&#34;,&#34;0.1075306051725981&#34;,&#34;0.10796925406738075&#34;,&#34;0.10788907387494047&#34;,&#34;0.10785893214604376&#34;,&#34;0.10689834668953363&#34;,&#34;0.10587484287961471&#34;,&#34;0.10616196380785668&#34;,&#34;0.10615257015236526&#34;,&#34;0.10619077219395856&#34;,&#34;0.10624986878267631&#34;,&#34;0.10571793465137659&#34;,&#34;0.1054781831825434&#34;,&#34;0.10545453208501511&#34;,&#34;0.105183010893544&#34;,&#34;0.10506117337926245&#34;,&#34;0.10529779009754926&#34;,&#34;0.10529199846614694&#34;,&#34;0.10537718099274565&#34;,&#34;0.10544048393374315&#34;,&#34;0.10495535968461758&#34;,&#34;0.10452111617016623&#34;,&#34;0.10300524077820136&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;30487595&#34;,&#34;btcPrice&#34;:&#34;0.000005356315388568&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;1921838896&#34;,&#34;price&#34;:&#34;3.161728743925566&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-10.05&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;3.5365722048604558&#34;,&#34;3.535001548367229&#34;,&#34;3.528552930570017&#34;,&#34;3.5174678447812506&#34;,&#34;3.5198117298155362&#34;,&#34;3.5114170143872934&#34;,&#34;3.504589209738755&#34;,&#34;3.4914455824184447&#34;,&#34;3.455429141303092&#34;,&#34;3.462052946587881&#34;,&#34;3.466061316012953&#34;,&#34;3.4684962528351306&#34;,&#34;3.4718563219784317&#34;,&#34;3.4605307199270166&#34;,&#34;3.452890559665962&#34;,&#34;3.4514577960119355&#34;,&#34;3.434758326145947&#34;,&#34;3.4312320898841087&#34;,&#34;3.4402893640097143&#34;,&#34;3.445152665972188&#34;,&#34;3.442559966627565&#34;,&#34;3.4440253510842935&#34;,&#34;3.3649617172716804&#34;,&#34;3.2922768444781076&#34;,&#34;3.2057465977539925&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;204816973&#34;,&#34;btcPrice&#34;:&#34;0.000165906608230074&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1798378523&#34;,&#34;price&#34;:&#34;0.000272943653474552&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-9.95&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;0.000303620527811495&#34;,&#34;0.000304456713391152&#34;,&#34;0.000302025160201053&#34;,&#34;0.000300638650778887&#34;,&#34;0.000300924086464382&#34;,&#34;0.000301952015765244&#34;,&#34;0.000304709853913656&#34;,&#34;0.000311446868180849&#34;,&#34;0.00030872271885206&#34;,&#34;0.000306184589403001&#34;,&#34;0.00030369670986693&#34;,&#34;0.000305299648046549&#34;,&#34;0.000305782789440931&#34;,&#34;0.000304998714155324&#34;,&#34;0.00030516279374122&#34;,&#34;0.000302035124483433&#34;,&#34;0.000298902162386491&#34;,&#34;0.000294717990591123&#34;,&#34;0.000295679419516642&#34;,&#34;0.000294547685931327&#34;,&#34;0.000293631792042232&#34;,&#34;0.00029507954149248&#34;,&#34;0.000293978958480119&#34;,&#34;0.00028678162507754&#34;,&#34;0.000281691595645392&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;161213060&#34;,&#34;btcPrice&#34;:&#34;1.432227729e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1681548705&#34;,&#34;price&#34;:&#34;1.6815487049836193&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.35&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.7785519722561005&#34;,&#34;1.7858827078668005&#34;,&#34;1.7802645901879568&#34;,&#34;1.7764749674253342&#34;,&#34;1.7754939277589028&#34;,&#34;1.777827562747726&#34;,&#34;1.771367618664247&#34;,&#34;1.7676577036269447&#34;,&#34;1.7421153664608295&#34;,&#34;1.74018013648857&#34;,&#34;1.739447236595497&#34;,&#34;1.7467725516017982&#34;,&#34;1.7520953443350693&#34;,&#34;1.7497201629211947&#34;,&#34;1.7434300874832234&#34;,&#34;1.7410855467819677&#34;,&#34;1.7454145439804871&#34;,&#34;1.7381732777068986&#34;,&#34;1.7430858705433145&#34;,&#34;1.74422154979084&#34;,&#34;1.7416706732344704&#34;,&#34;1.7458348133550494&#34;,&#34;1.7410468949631808&#34;,&#34;1.726796062998524&#34;,&#34;1.709852670785355&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;14705306&#34;,&#34;btcPrice&#34;:&#34;0.000088236551840031&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1624271124&#34;,&#34;price&#34;:&#34;16.242711242778302&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;-9.62&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.886611128744736&#34;,&#34;17.98750167854358&#34;,&#34;17.89495459200179&#34;,&#34;17.945652772949337&#34;,&#34;17.961717330829398&#34;,&#34;17.68920864538644&#34;,&#34;17.587335784528257&#34;,&#34;17.46169325348126&#34;,&#34;17.478761771846223&#34;,&#34;17.55298689416666&#34;,&#34;17.474188627274106&#34;,&#34;17.493497716386933&#34;,&#34;17.415126957232957&#34;,&#34;17.1205273019632&#34;,&#34;16.746911333675556&#34;,&#34;16.682776901704162&#34;,&#34;16.65185204721645&#34;,&#34;16.59275573073735&#34;,&#34;16.586522851457904&#34;,&#34;16.599887206420323&#34;,&#34;16.562716013115207&#34;,&#34;16.571402638214735&#34;,&#34;16.400229974032907&#34;,&#34;16.209816101116832&#34;,&#34;16.17963770365993&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;21996645&#34;,&#34;btcPrice&#34;:&#34;0.000852310033214311&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1608551134&#34;,&#34;price&#34;:&#34;1.5523558519281844&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;-8.98&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;1.7126618274219394&#34;,&#34;1.7095554831546504&#34;,&#34;1.7074406085892582&#34;,&#34;1.7013640333391715&#34;,&#34;1.703657654228842&#34;,&#34;1.6971787183627416&#34;,&#34;1.6882451843348478&#34;,&#34;1.6802226754835359&#34;,&#34;1.652212266501822&#34;,&#34;1.6572776591145093&#34;,&#34;1.6617752743739627&#34;,&#34;1.6623334664099878&#34;,&#34;1.6696801648481165&#34;,&#34;1.663679626307038&#34;,&#34;1.6561015569342594&#34;,&#34;1.6522364242137182&#34;,&#34;1.646089924734656&#34;,&#34;1.6502065913720891&#34;,&#34;1.653127600011426&#34;,&#34;1.6563677492571192&#34;,&#34;1.646110384789078&#34;,&#34;1.6191443731879624&#34;,&#34;1.5945492504616587&#34;,&#34;1.578245729736617&#34;,&#34;1.563960546805218&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;42229915&#34;,&#34;btcPrice&#34;:&#34;0.000081457365580245&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1518147391&#34;,&#34;price&#34;:&#34;5.115300313250102&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.81&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;5.461410684977759&#34;,&#34;5.46016712399476&#34;,&#34;5.448496205563744&#34;,&#34;5.430424051396227&#34;,&#34;5.436227762446354&#34;,&#34;5.412940415458087&#34;,&#34;5.408096306573797&#34;,&#34;5.3882222908284&#34;,&#34;5.316018138527317&#34;,&#34;5.331797820466268&#34;,&#34;5.3352160591954165&#34;,&#34;5.340638778204145&#34;,&#34;5.344961442248481&#34;,&#34;5.331395641661262&#34;,&#34;5.319693554981338&#34;,&#34;5.312085583952354&#34;,&#34;5.271638769077867&#34;,&#34;5.271489997640401&#34;,&#34;5.284318748010338&#34;,&#34;5.291781543272634&#34;,&#34;5.295597400836922&#34;,&#34;5.291099316023448&#34;,&#34;5.229330588428677&#34;,&#34;5.188614564751749&#34;,&#34;5.126848037216384&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;139569409&#34;,&#34;btcPrice&#34;:&#34;0.000268417120437685&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1499355876&#34;,&#34;price&#34;:&#34;0.022458646313399416&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.92&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.023439477811355726&#34;,&#34;0.023452563107489582&#34;,&#34;0.023423961982248782&#34;,&#34;0.023396276306953928&#34;,&#34;0.023418888719649176&#34;,&#34;0.023412693821209155&#34;,&#34;0.023531680002954407&#34;,&#34;0.023456675269474373&#34;,&#34;0.023233628959632283&#34;,&#34;0.023300114567050882&#34;,&#34;0.023312483171922686&#34;,&#34;0.023331705609271232&#34;,&#34;0.02336371969795962&#34;,&#34;0.023395184759605444&#34;,&#34;0.02332101164595078&#34;,&#34;0.023285768692513822&#34;,&#34;0.023126616869325173&#34;,&#34;0.02313779685062715&#34;,&#34;0.02321996219989213&#34;,&#34;0.023203917856843965&#34;,&#34;0.023216388778476732&#34;,&#34;0.02321228562709743&#34;,&#34;0.02302805292414345&#34;,&#34;0.022877554590587566&#34;,&#34;0.022660003591013063&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;92065569&#34;,&#34;btcPrice&#34;:&#34;0.000001178481184527&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1464540277&#34;,&#34;price&#34;:&#34;149.7908281178745&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.17&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;157.0455387772848&#34;,&#34;154.40533995389038&#34;,&#34;153.49628345523342&#34;,&#34;153.755582164367&#34;,&#34;153.25217488581978&#34;,&#34;151.87898019349342&#34;,&#34;150.85221578616233&#34;,&#34;149.76886244644376&#34;,&#34;150.95739958263036&#34;,&#34;152.3018866867004&#34;,&#34;151.80292654893285&#34;,&#34;153.62573302969375&#34;,&#34;155.0195882167983&#34;,&#34;153.7412401330177&#34;,&#34;151.71696167021375&#34;,&#34;151.03045792339856&#34;,&#34;150.8616038853544&#34;,&#34;155.46158698130554&#34;,&#34;156.98432982407346&#34;,&#34;155.43105801262126&#34;,&#34;156.29628186364246&#34;,&#34;156.85367406322118&#34;,&#34;155.22391240579103&#34;,&#34;154.1573346245066&#34;,&#34;151.50396796957943&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;155994760&#34;,&#34;btcPrice&#34;:&#34;0.007860031726237051&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1436841945&#34;,&#34;price&#34;:&#34;0.6550466721541853&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.44&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.6968165657453727&#34;,&#34;0.6965946403343043&#34;,&#34;0.6955401780631536&#34;,&#34;0.6943656752832073&#34;,&#34;0.6946904400161661&#34;,&#34;0.6920694820553807&#34;,&#34;0.6906731344821271&#34;,&#34;0.6884699559084295&#34;,&#34;0.6815064270359984&#34;,&#34;0.6834525508878408&#34;,&#34;0.6847477021508117&#34;,&#34;0.6847235914154632&#34;,&#34;0.6852890363868837&#34;,&#34;0.6845155927854775&#34;,&#34;0.683817753015771&#34;,&#34;0.6840496505842923&#34;,&#34;0.6822651916313429&#34;,&#34;0.6820176225939646&#34;,&#34;0.6839712442166291&#34;,&#34;0.6842503028554356&#34;,&#34;0.6844446277256846&#34;,&#34;0.684307758133486&#34;,&#34;0.6789510676823067&#34;,&#34;0.6742846183801096&#34;,&#34;0.6610404699288367&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;101366965&#34;,&#34;btcPrice&#34;:&#34;0.000034372515927652&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1400935705&#34;,&#34;price&#34;:&#34;0.05754286243690513&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.23&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.06026228087146397&#34;,&#34;0.06033187793028589&#34;,&#34;0.06027561883323482&#34;,&#34;0.06010492186635602&#34;,&#34;0.06003836295600198&#34;,&#34;0.05978624776086806&#34;,&#34;0.05969695187791152&#34;,&#34;0.05958137022962623&#34;,&#34;0.058789415920620036&#34;,&#34;0.05915657952754252&#34;,&#34;0.0592676454127721&#34;,&#34;0.059672945709016476&#34;,&#34;0.0603459427699299&#34;,&#34;0.059938419986995055&#34;,&#34;0.059843043756257486&#34;,&#34;0.0597100141741486&#34;,&#34;0.059472242500280194&#34;,&#34;0.059567247105076014&#34;,&#34;0.05983792950971073&#34;,&#34;0.059876114833285005&#34;,&#34;0.059895971305400274&#34;,&#34;0.059986556288869675&#34;,&#34;0.05949966691547662&#34;,&#34;0.05879487051280811&#34;,&#34;0.05804114728365785&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;47169313&#34;,&#34;btcPrice&#34;:&#34;0.000003019468748892&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1394834906&#34;,&#34;price&#34;:&#34;5.23424273507317&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-10.60&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;5.885028940406694&#34;,&#34;5.8977558441432345&#34;,&#34;5.888637994977309&#34;,&#34;5.876190897957444&#34;,&#34;5.8222298464140465&#34;,&#34;5.803427790120461&#34;,&#34;5.789688838937986&#34;,&#34;5.7852249794365855&#34;,&#34;5.719450363443783&#34;,&#34;5.7496440651147305&#34;,&#34;5.755294808760236&#34;,&#34;5.749794727903299&#34;,&#34;5.762235632885068&#34;,&#34;5.745877673087344&#34;,&#34;5.690721800086487&#34;,&#34;5.654296523777942&#34;,&#34;5.65332263296135&#34;,&#34;5.614875784674768&#34;,&#34;5.627216943438124&#34;,&#34;5.630552413080166&#34;,&#34;5.623059660540579&#34;,&#34;5.617137362696555&#34;,&#34;5.51564065813155&#34;,&#34;5.380008089110393&#34;,&#34;5.304255859587679&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;88973019&#34;,&#34;btcPrice&#34;:&#34;0.000274658431877589&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1363607806&#34;,&#34;price&#34;:&#34;1.0022041695259896&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.23&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;0.9992664794249421&#34;,&#34;1.0002262738293723&#34;,&#34;1.000232302327043&#34;,&#34;1.0004305815641945&#34;,&#34;0.9997628688987996&#34;,&#34;1.0001542280862468&#34;,&#34;1.0000901813731709&#34;,&#34;1.0002726536482773&#34;,&#34;1.0004027241363154&#34;,&#34;0.9991681290039643&#34;,&#34;0.9999065715062573&#34;,&#34;0.9994459044714505&#34;,&#34;0.9989225556828486&#34;,&#34;1.0000021368171172&#34;,&#34;1.0000850899550087&#34;,&#34;0.9993757301700462&#34;,&#34;1.000001645463064&#34;,&#34;0.9986108407838368&#34;,&#34;0.9995979533832419&#34;,&#34;0.9999580952527024&#34;,&#34;0.9994610549866184&#34;,&#34;0.9994705501219832&#34;,&#34;1.0006918067028483&#34;,&#34;0.9997682453491867&#34;,&#34;1.0008650036041942&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;2007145&#34;,&#34;btcPrice&#34;:&#34;0.000052589044787458&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1356816211&#34;,&#34;price&#34;:&#34;0.6784081053439633&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-7.87&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;0.7385540764733416&#34;,&#34;0.7387892107909404&#34;,&#34;0.736843563088993&#34;,&#34;0.7355272480189233&#34;,&#34;0.7352643279786405&#34;,&#34;0.7308075850806669&#34;,&#34;0.7283303584016984&#34;,&#34;0.7238233054715673&#34;,&#34;0.7133871809715906&#34;,&#34;0.712512804820701&#34;,&#34;0.708489153222375&#34;,&#34;0.7107255456602884&#34;,&#34;0.7134397229127725&#34;,&#34;0.712346711941874&#34;,&#34;0.7122751076036671&#34;,&#34;0.7136631057536917&#34;,&#34;0.7083692013840003&#34;,&#34;0.7055383865246094&#34;,&#34;0.7055438616248912&#34;,&#34;0.706730052352362&#34;,&#34;0.708779938683232&#34;,&#34;0.7092020518897018&#34;,&#34;0.7019354883795684&#34;,&#34;0.6962978896490684&#34;,&#34;0.6852037197169683&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;35704153&#34;,&#34;btcPrice&#34;:&#34;0.000035598369395113&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1326807730&#34;,&#34;price&#34;:&#34;56.10098365117234&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.68&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;56.455542281647396&#34;,&#34;56.37269672595081&#34;,&#34;56.59506490012096&#34;,&#34;56.65755860848807&#34;,&#34;56.46317225403369&#34;,&#34;56.25042030082092&#34;,&#34;56.10646051365647&#34;,&#34;55.99373403445289&#34;,&#34;55.17579190312339&#34;,&#34;55.60488194774725&#34;,&#34;55.88874738983618&#34;,&#34;56.66768754640032&#34;,&#34;56.80821027855892&#34;,&#34;56.49869101825159&#34;,&#34;56.36999154412585&#34;,&#34;56.702814495523576&#34;,&#34;56.604511337062576&#34;,&#34;56.93403500717611&#34;,&#34;56.96287587606324&#34;,&#34;57.17233232257158&#34;,&#34;57.34969960951747&#34;,&#34;57.129882789838355&#34;,&#34;56.87098144117966&#34;,&#34;56.92621825878148&#34;,&#34;56.36991116030308&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;79642695&#34;,&#34;btcPrice&#34;:&#34;0.002943808488890393&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1222847444&#34;,&#34;price&#34;:&#34;1.3464716853331917&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.65&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.4358986631746915&#34;,&#34;1.4358190109653854&#34;,&#34;1.4346316657068616&#34;,&#34;1.4297195080813876&#34;,&#34;1.4295114026968183&#34;,&#34;1.4232982445478493&#34;,&#34;1.4208847961605975&#34;,&#34;1.416629388877603&#34;,&#34;1.3928396824392562&#34;,&#34;1.3982965147629787&#34;,&#34;1.4004435423654986&#34;,&#34;1.4018371801625011&#34;,&#34;1.404644313527332&#34;,&#34;1.399656275124715&#34;,&#34;1.397785064250421&#34;,&#34;1.3972126640240337&#34;,&#34;1.390336616800803&#34;,&#34;1.3920144310667881&#34;,&#34;1.3937870734971116&#34;,&#34;1.3970727985908602&#34;,&#34;1.3971721233632548&#34;,&#34;1.3957300374672263&#34;,&#34;1.3873062531302125&#34;,&#34;1.379944210745551&#34;,&#34;1.3594549983840765&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;21567765&#34;,&#34;btcPrice&#34;:&#34;0.000070653926533275&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1184610175&#34;,&#34;price&#34;:&#34;0.7878124927811557&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.67&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.8391252245057487&#34;,&#34;0.8398353991587618&#34;,&#34;0.839447858542598&#34;,&#34;0.836777642538831&#34;,&#34;0.8357826597915352&#34;,&#34;0.8337462213938087&#34;,&#34;0.8323150469457988&#34;,&#34;0.8298854974248494&#34;,&#34;0.8217950733820105&#34;,&#34;0.8243725426081188&#34;,&#34;0.8257783489139435&#34;,&#34;0.8269930349183021&#34;,&#34;0.82834027889644&#34;,&#34;0.8273023718052273&#34;,&#34;0.8252808204274694&#34;,&#34;0.8251924025273044&#34;,&#34;0.8224711654106814&#34;,&#34;0.8226061954661672&#34;,&#34;0.8237994288791948&#34;,&#34;0.8231112056261928&#34;,&#34;0.8232512574811699&#34;,&#34;0.8229654891785493&#34;,&#34;0.8182592249811548&#34;,&#34;0.8141572943440636&#34;,&#34;0.7984772451510834&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;67213948&#34;,&#34;btcPrice&#34;:&#34;0.000041339187888814&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1110124765&#34;,&#34;price&#34;:&#34;0.1868622362362506&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-13.59&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.21687217140550805&#34;,&#34;0.2166581444556987&#34;,&#34;0.21606106951117457&#34;,&#34;0.21558453990448492&#34;,&#34;0.2155917912662132&#34;,&#34;0.21460813457565675&#34;,&#34;0.2138407144130764&#34;,&#34;0.21119334291108852&#34;,&#34;0.20406711176396244&#34;,&#34;0.20385044186873064&#34;,&#34;0.20431643074193853&#34;,&#34;0.20443402008781883&#34;,&#34;0.20509518763794296&#34;,&#34;0.2040570389389804&#34;,&#34;0.20271370825502513&#34;,&#34;0.20230245034754588&#34;,&#34;0.20007494004115414&#34;,&#34;0.19980037641227813&#34;,&#34;0.20037524578135063&#34;,&#34;0.20052244757309365&#34;,&#34;0.20046233420877863&#34;,&#34;0.2004588031725169&#34;,&#34;0.19659869555852563&#34;,&#34;0.19096343731662402&#34;,&#34;0.1880300979166308&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;370876863&#34;,&#34;btcPrice&#34;:&#34;0.000009805293980328&#34;},{&#34;uuid&#34;:&#34;DXwP4wF9ksbBO&#34;,&#34;symbol&#34;:&#34;HT&#34;,&#34;name&#34;:&#34;Huobi Token&#34;,&#34;color&#34;:&#34;#2daadf&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryFpQe0c7/ht.svg&#34;,&#34;marketCap&#34;:&#34;1069290281&#34;,&#34;price&#34;:&#34;5.21855378165937&#34;,&#34;listedAt&#34;:1517702400,&#34;tier&#34;:1,&#34;change&#34;:&#34;25.47&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;4.2656490948475225&#34;,&#34;4.294349867609839&#34;,&#34;4.355386869302702&#34;,&#34;4.418410364414004&#34;,&#34;4.408943559093722&#34;,&#34;4.448953712936716&#34;,&#34;4.4132384268806595&#34;,&#34;4.374028634502124&#34;,&#34;4.597818695200795&#34;,&#34;5.0498599537676325&#34;,&#34;4.983095083388702&#34;,&#34;4.885459752599654&#34;,&#34;4.8819920983216285&#34;,&#34;4.9759472771240585&#34;,&#34;5.168650631763928&#34;,&#34;5.316597133508735&#34;,&#34;5.276754827428595&#34;,&#34;5.2989122312058266&#34;,&#34;5.242578842634648&#34;,&#34;5.219453685991482&#34;,&#34;5.20955615579291&#34;,&#34;5.116511352336516&#34;,&#34;5.1695972582634715&#34;,&#34;5.145985199783568&#34;,&#34;5.1614068498962515&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DXwP4wF9ksbBO+huobitoken-ht&#34;,&#34;24hVolume&#34;:&#34;85079725&#34;,&#34;btcPrice&#34;:&#34;0.000273835179391884&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1030089802&#34;,&#34;price&#34;:&#34;1.2806928309055696&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-11.74&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.45774415659554&#34;,&#34;1.461862720093767&#34;,&#34;1.459217427621416&#34;,&#34;1.4527143941446112&#34;,&#34;1.453258922823997&#34;,&#34;1.4489091517170558&#34;,&#34;1.447320561963645&#34;,&#34;1.4380087379834607&#34;,&#34;1.4051610733565734&#34;,&#34;1.4012499727629433&#34;,&#34;1.3952470870521374&#34;,&#34;1.399207810772896&#34;,&#34;1.3925478693378885&#34;,&#34;1.3818874151712748&#34;,&#34;1.367640009680698&#34;,&#34;1.3658142761855507&#34;,&#34;1.350615160377156&#34;,&#34;1.3416323940203634&#34;,&#34;1.342074404496167&#34;,&#34;1.3413397282632267&#34;,&#34;1.3463690012682163&#34;,&#34;1.3455511192372636&#34;,&#34;1.3302833848174163&#34;,&#34;1.320008326370752&#34;,&#34;1.3023846203462348&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;9099559&#34;,&#34;btcPrice&#34;:&#34;0.000067202287409485&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success BTC 19057.280343776176 Icon Url: https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg Rank Url: https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc ETH 1278.7448565611858 Icon Url: https://cdn.coinranking.com/rk4RKHOuW/eth.svg Rank Url: https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth USDT 1.0006942257899014 Icon Url: https://cdn.coinranking.com/mgHqwlCLj/usdt.svg Rank Url: https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt USDC 1.001516752958171 Icon Url: https://cdn.coinranking.com/jkDf8sQbY/usdc.svg Rank Url: https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc BNB 269.35239602160357 Icon Url: https://cdn.coinranking.com/B1N19L_dZ/bnb.svg Rank Url: https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb XRP 0.49374621214983844 Icon Url: https://cdn.coinranking.com/B1oPuTyfX/xrp.svg Rank Url: https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp BUSD 1.0011741265983014 Icon Url: https://cdn.coinranking.com/6SJHRfClq/busd.svg Rank Url: https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd ADA 0.3932226405369482 Icon Url: https://cdn.coinranking.com/ryY28nXhW/ada.svg Rank Url: https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada SOL 31.523242018327903 Icon Url: https://cdn.coinranking.com/yvUG4Qex5/solana.svg Rank Url: https://coinranking.com/coin/zNZHO_Sjf+solana-sol DOGE 0.05863166282740626 Icon Url: https://cdn.coinranking.com/H1arXIuOZ/doge.svg Rank Url: https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge DOT 6.190998900134086 Icon Url: https://cdn.coinranking.com/RsljYqnbu/polkadot.svg Rank Url: https://coinranking.com/coin/25W7FG7om+polkadot-dot MATIC 0.8046293570356682 Icon Url: https://cdn.coinranking.com/WulYRq14o/polygon.png Rank Url: https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic DAI 1.0016189326906015 Icon Url: https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg Rank Url: https://coinranking.com/coin/MoTuySvg7+dai-dai SHIB 0.00001010227002507 Icon Url: https://cdn.coinranking.com/D69LfI-tm/shib.png Rank Url: https://coinranking.com/coin/xz24e0BjL+shibainu-shib TRX 0.06215358754277865 Icon Url: https://cdn.coinranking.com/behejNqQs/trx.svg Rank Url: https://coinranking.com/coin/qUhEFk1I61atv+tron-trx WETH 1283.4302597229096 Icon Url: https://cdn.coinranking.com/KIviQyZlt/weth.svg Rank Url: https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth UNI 6.38200976407113 Icon Url: https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48 Rank Url: https://coinranking.com/coin/_H5FVG9iW+uniswap-uni AVAX 15.916309864882791 Icon Url: https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png Rank Url: https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax BIT 0.4372940449727807 Icon Url: https://cdn.coinranking.com/0ClFW1IpO/bitdao.png Rank Url: https://coinranking.com/coin/N2IgQ9Xme+bitdao-bit CAKE 4.452946301781518 Icon Url: https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png Rank Url: https://coinranking.com/coin/ncYFcP709+pancakeswap-cake OKB 15.658048903533913 Icon Url: https://cdn.coinranking.com/xcZdYtX6E/okx.png Rank Url: https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb ATOM 12.310514152737007 Icon Url: https://cdn.coinranking.com/HJzHboruM/atom.svg Rank Url: https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom LTC 51.813480569758035 Icon Url: https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg Rank Url: https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc FTT 23.40123722292071 Icon Url: https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg Rank Url: https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt ETC 24.11840005360424 Icon Url: https://cdn.coinranking.com/rJfyor__W/etc.svg Rank Url: https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc XMR 140.8167083471278 Icon Url: https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg Rank Url: https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr XLM 0.12195813717616484 Icon Url: https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg Rank Url: https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm ALGO 0.31336193398363577 Icon Url: https://cdn.coinranking.com/lzbmCkUGB/algo.svg Rank Url: https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo BTCB 19093.961144724017 Icon Url: https://cdn.coinranking.com/Swr_SeZio/4023.png Rank Url: https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb BCH 110.42416308022558 Icon Url: https://cdn.coinranking.com/By8ziihX7/bch.svg Rank Url: https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch CRO 0.10207680396962117 Icon Url: https://cdn.coinranking.com/2o91jm73M/cro.svg Rank Url: https://coinranking.com/coin/65PHZTpmE55b+cronos-cro NEAR 3.161728743925566 Icon Url: https://cdn.coinranking.com/Cth83dCnl/near.png Rank Url: https://coinranking.com/coin/DCrsaMv68+nearprotocol-near LUNC 0.000272943653474552 Icon Url: https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg Rank Url: https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc WEMIX 1.6815487049836193 Icon Url: https://cdn.coinranking.com/1N84MQsoO/7548.png Rank Url: https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix ENS 16.242711242778302 Icon Url: https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png Rank Url: https://coinranking.com/coin/SbWqqTui-+energyswap-ens FLOW 1.5523558519281844 Icon Url: https://cdn.coinranking.com/xh8X8QBss/flow.png Rank Url: https://coinranking.com/coin/QQ0NCmjVq+flow-flow FIL 5.115300313250102 Icon Url: https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48 Rank Url: https://coinranking.com/coin/ymQub4fuB+filecoin-fil VET 0.022458646313399416 Icon Url: https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg Rank Url: https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet QNT 149.7908281178745 Icon Url: https://cdn.coinranking.com/a-i9Dl392/quant.png Rank Url: https://coinranking.com/coin/bauj_21eYVwso+quant-qnt MANA 0.6550466721541853 Icon Url: https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg Rank Url: https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana HBAR 0.05754286243690513 Icon Url: https://cdn.coinranking.com/dSCnSLilQ/hedera.svg Rank Url: https://coinranking.com/coin/jad286TjB+hedera-hbar ICP 5.23424273507317 Icon Url: https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png Rank Url: https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp FRAX 1.0022041695259896 Icon Url: https://cdn.coinranking.com/BpVNCX-NM/frax.png Rank Url: https://coinranking.com/coin/KfWtaeV1W+frax-frax IMX 0.6784081053439633 Icon Url: https://cdn.coinranking.com/naRGT2Y_X/10603.png Rank Url: https://coinranking.com/coin/Z96jIvLU7+immutablex-imx EGLD 56.10098365117234 Icon Url: https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg Rank Url: https://coinranking.com/coin/omwkOTglq+elrond-egld XTZ 1.3464716853331917 Icon Url: https://cdn.coinranking.com/HkLUdilQ7/xtz.svg Rank Url: https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz SAND 0.7878124927811557 Icon Url: https://cdn.coinranking.com/kd_vwOcnI/sandbox.png Rank Url: https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand CHZ 0.1868622362362506 Icon Url: https://cdn.coinranking.com/gTsOlSnwR/4066.png Rank Url: https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz HT 5.21855378165937 Icon Url: https://cdn.coinranking.com/ryFpQe0c7/ht.svg Rank Url: https://coinranking.com/coin/DXwP4wF9ksbBO+huobitoken-ht LDO 1.2806928309055696 Icon Url: https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png Rank Url: https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://jasoxddd.github.io/FastProject2/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 1 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 1 while i &lt;= 100: numbers.append(i) i += 1 for i in range(len(numbers)): if numbers[i] % 5 == 0 or numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times ordering = True while ordering: item = input(&quot;Please select an item from the menu&quot;) item = item.lower() if item in menu: total+=menu[item] print(item+&quot; added&quot;) while True: order=input(&quot;Do you want anything else?&quot;).lower() if order==&#39;y&#39;or order==&#39;yes&#39;: break elif order==&#39;n&#39; or order==&#39;no&#39;: ordering = False break else: print(&quot;Sorry, I didn&#39;t understand what you said.&quot;) else: print(&quot;We don&#39;t have that here.&quot;) #code should add the price of the menu items selected by the user print(&quot;Your total is &quot;+str(round(total,2))) . Menu burger $3.99 fries $1.99 drink $0.99 burger added fries added Sorry, I didn&#39;t understand what you said. We don&#39;t have that here. drink added Your total is 6.97 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://jasoxddd.github.io/FastProject2/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Javascript Test",
            "content": "The First program . We all know what it is . console.log(&quot;hello world!&quot;) . hello world! . Javascript ft. variables . Javascript program showing use of variables. . var msg = &quot;How are you today?&quot;; console.log(msg); . How are you today? . Javascript functions . Javascript program showing use of functions. . function logMsg(output){ console.log(output); } logMsg(msg); logMsg(&quot;I&#39;m doing ok&quot;); logMsg(2020); . How are you today? I&#39;m doing ok 2020 . Javascript Types . Javascript program showing Javascript&#39;s dynamic types . function logItType(output){ console.log(typeof output+&quot;:&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string: hello number: 2020 object: [ 1, 2, 3 ] . Javascript Object/Class . Javascript program showing use of instances . function Item(name,atk,price,description){ this.name = name; this.atk=atk; this.price = price; this.description = description; this.equipped = false; } Item.prototype.toggleEquiped = function(){ this.equipped=true; } Item.prototype.toJSON = function(){ const obj = {name: this.name, atk: this.atk, price: this.price, description: this.description, equipped: this.equipped}; const json = JSON.stringify(obj); return json; } Item.prototype.logItem=function(){ console.log(this.name); console.log(&quot;Atk:&quot;,this.atk); console.log(&quot;Price:&quot;,this.price); console.log(&#39;&quot;&#39;+this.description+&#39;&quot;&#39;); if (this.selected=true){ console.log(&quot;This item is equipped!&quot;) } console.log(&quot; n&quot;); } var coolSword=new Item(&quot;Cool Sword&quot;,999,9999,&quot;A very cool sword&quot;); coolSword.toggleEquiped(); logItType(coolSword+&quot; n&quot;); logItType(coolSword.toJSON()+&quot; n&quot;); coolSword.logItem(); . string: [object Object] string: {&#34;name&#34;:&#34;Cool Sword&#34;,&#34;atk&#34;:999,&#34;price&#34;:9999,&#34;description&#34;:&#34;A very cool sword&#34;,&#34;equipped&#34;:true} Cool Sword Atk: 999 Price: 9999 &#34;A very cool sword&#34; This item is equipped! . Javascript Array of Objects . Javascript program that showcases use of arrays of objects . var Inventory = [ new Item(&quot;Beginner&#39;s Blade&quot;,10,5,&quot;A weapon fit for a beginner&quot;), new Item(&quot;Adventurer&#39;s Blade&quot;,20,10,&quot;A weapon that signifies experiences in adventure&quot;), new Item(&quot;The Frost Edge&quot;,50,150,&quot;The treasured sword of Frostpeak&quot;), coolSword ]; for (let i = 0; i &lt; Inventory.length; i++){ Inventory[i].logItem(); } . Beginner&#39;s Blade Atk: 10 Price: 5 &#34;A weapon fit for a beginner&#34; This item is equipped! Adventurer&#39;s Blade Atk: 20 Price: 10 &#34;A weapon that signifies experiences in adventure&#34; This item is equipped! The Frost Edge Atk: 50 Price: 150 &#34;The treasured sword of Frostpeak&#34; This item is equipped! Cool Sword Atk: 999 Price: 9999 &#34;A very cool sword&#34; This item is equipped! . Javascript Table . A program that displays array data in a table . var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Attack&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Price&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Description&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var item of Inventory) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + item.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + item.atk + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + item.price + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + item.description + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } htmlFrag=&quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; $$.html(htmlFrag); . NameAttackPriceDescription . Beginner&#39;s Blade | 10 | 5 | A weapon fit for a beginner | Adventurer&#39;s Blade | 20 | 10 | A weapon that signifies experiences in adventure | The Frost Edge | 50 | 150 | The treasured sword of Frostpeak | Cool Sword | 999 | 9999 | A very cool sword | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://jasoxddd.github.io/FastProject2/jupyter/2022/09/23/javascript.html",
            "relUrl": "/jupyter/2022/09/23/javascript.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "App Lab Log",
            "content": "Outline . Here is my outline: 3 Questions, with one right answers each . Getting questions right go to the correct page and 1 score, incorrect page if not right | End screen depending on score | Coins to show number of correct problems | Question #1: What is the 5th offical level in Geometry Dash? Answer is in format of image + text, click on the text | The Answer is Base to Base | Three other answers Stereo Madness | Can&#39;t Let Go (without apostrophe for memes) | Jumper (My first guess) | | . | Question #2: How many Gold Coins are in the game currently? Text only answer choices | 149 coins (why robtop) | Other answers: 63, 99, 168 | . | Question #3: Which of these parts belong in Clutterfunk? Image only answers | Correct answer is the one in bottom right | Other parts from Cycles, xStep, and Theory of Everything (ToE) | . | . Logs . The following are logs of my progress each day . Day 1 - 9/9/2022 . I made a remix of the example, Renamed it to Geometry Dash Quiz . I also created the title screen, replaced the image with the GD logo and wrote the title text . I made a score variable to track the questions I got correct. . I made the Question and Options for the questions Note: it turns out that the GD wiki uses .webm files, which can&#39;t be used, I had to use thumbnails instead . I made the Incorrect and Correct Screens, and linked the options on problem #1 to their options: correct options to the correct screen and incorrect to the incorrect screen, with the level complete screen and dying at the first spike in stereo madness screen respectively. . I ran into a problem, I don&#39;t want to make a separate screen after each problem, but I can&#39;t find a way to make it link to different screens. . Summary: Overall pretty good progress, but I need to do something about the screen problem. . Day 2 - 9/11/2022 . I had to do something else last day, so this is my second day doing the project. . I figured out the solution to the problem. All I had to do is to store the id for the screen in a list and make a variable for the question that I was on, then I can just go to the question by using the variable as an index for the lsit, which would go to the right screen. I have yet to test this but it should work in theory. . Alright, it worked, so I have to link the rest of the options now. . There has to be a faster way to do this . It turns out text mode is great for copying and pasting options that are basically the same, so I used that to make a OnClick event for every option. . I made the screens for each of the scores possible, and used the list of ids trick to link the continue button to the endscreen with the score variable as index when the question variable is not less than 3, which means the player had just finished the 3rd problem. . It&#39;s getting late, so I will do the debugging tomorrow. . Summary: Pretty much done with the project, only debugging left to go. . Day 3 - 9/12/2022 . I&#39;m technically supposed to be done already, but I can use the Office Hour time to debug . There is a bug where getting one problem correct would link to the 0 coins screen. . A quick check and I figured the problem was that the list for the end screens is wrong, I fixed and it seemed to work now . Another bug, getting the last question wrong returns an error. . I figured it out after some logging, I had to have the go to endscreen code for both of the continue buttons. . It seems to be all working now, so that&#39;s good. . Summary: Finished Debugging, hopefully this is good for the full score. . Day 4 - 9/13/2022 . I noticed I forgot to remove the stretched GD logo from title screen after a failed attempt at creating the title screen, I quickly removed that, this should be all good now . My log is not showing why . I found that my log is not showing because I put the first cell in this log as code, so I copied that over . Summary: One quick UI fix and logging fix before the end, that&#39;s good. .",
            "url": "https://jasoxddd.github.io/FastProject2/jupyter/2022/09/09/quiz_log.html",
            "relUrl": "/jupyter/2022/09/09/quiz_log.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Del Norte Bell Schedule",
            "content": "Below are the (really confusing) bell schedule for Del Norte . Monday, Tuesday, Thursday . The “normal” bell schedule . Period Start Time End Time . Period 1 | 8:35 | 9:44 | . Period 2 | 9:49 | 10:58 | . Break | 10:58 | 11:08 | . Period 3 | 11:13 | 12:22 | . Lunch | 12:22 | 12:52 | . Period 4 | 12:57 | 14:06 | . Office Hours | 14:06 | 14:31 | . Period 5 | 14:36 | 15:45 | . Wednesday . The late start bell schdule . Period Start Time End Time . Period 1 | 9:55 | 10:53 | . Period 2 | 10:58 | 11:56 | . Break | 11:56 | 12:06 | . Period 3 | 12:11 | 13:09 | . Lunch | 13:09 | 13:39 | . Period 4 | 13:44 | 14:42 | . Period 5 | 14:47 | 15:45 | . Friday . The day-without-office-hours bell schedule . Period Start Time End Time . Period 1 | 8:35 | 9:49 | . Period 2 | 9:54 | 11:08 | . Break | 11:08 | 11:18 | . Period 3 | 11:23 | 12:37 | . Lunch | 12:37 | 13:07 | . Period 4 | 13:12 | 14:26 | . Period 5 | 14:31 | 15:45 | .",
            "url": "https://jasoxddd.github.io/FastProject2/markdown/2022/09/04/del-norte-schedule.html",
            "relUrl": "/markdown/2022/09/04/del-norte-schedule.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review of variables in the introduction last week. String, Integer, Float, List and Dictionary are some of the types of variables. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) #string is a primitive # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) #int is a primitive # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) #float is a primitive print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) #list is a collection print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) #element in this list in a primitive print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) #dictionary is a collection print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) #string in dictionary is primitive . name John Doe &lt;class &#39;str&#39;&gt; age 18 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Haoxuan&quot;, &quot;LastName&quot;: &quot;Tong&quot;, &quot;DOB&quot;: &quot;July 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;haoxuantong8@gmail.com&quot;, &quot;Owns_Cars&quot;: [] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Haoxuan&#39;, &#39;LastName&#39;: &#39;Tong&#39;, &#39;DOB&#39;: &#39;July 9&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;haoxuantong8@gmail.com&#39;, &#39;Owns_Cars&#39;: []}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Haoxuan&quot;, &quot;LastName&quot;: &quot;Tong&quot;, &quot;DOB&quot;: &quot;July 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;haoxuantong8@gmail.com&quot;, &quot;Owns_Cars&quot;: [] }) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: . Calling a for loop with index . Instead of using elements, using the function range can create a list of indexes to output the data. . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for i in range(len(InfoDb)): #Using range(len(InfoDb)) to create an iterable of indices print_data(InfoDb[i]) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: . Outputting data in reverse . Using range(0,len(InfoDb),-1), we can output the date in reverse. . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb with indices def for_loop_indices(): print(&quot;Reverse with indices n&quot;) for i in range(len(InfoDb)-1,-1,-1): #Using range(len(InfoDb)-1,-1,-1) to create a reversed iterable of indices print_data(InfoDb[i]) for_loop_indices() . Reverse with indices Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac . Poping and Slicing from a List . Using pop() to pop values from selected indices . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for i in range(len(InfoDb)): #Using range(len(InfoDb)) to create an iterable of indices print_data(InfoDb[i]) print(&quot;pop&quot;) print(&quot;Original List n&quot;) for_loop()#printing the original list popped=InfoDb.pop(0)#popping the first element from list and storing it in a variable print(&quot;New List n&quot;) for_loop()#printing the new list print(&quot;Popped Variable n&quot;) print_data(popped)#printing the popped variable InfoDb.append(popped)#adding the popped element back into the list print(&quot;&quot;) print(&quot;slice&quot;) print(&quot;Original List n&quot;) for_loop()#printing the original list aSlice=InfoDb[1:3]#slicing the second element and third from list and storing it in a variable print(&quot;New List n&quot;) for_loop()#printing the new list, it should be the same print(&quot;Slice variables&quot;) print_data(aSlice[0])#printing the first and second variable in the slice print_data(aSlice[1]) print(&quot;&quot;) . pop Original List For loop output Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac New List For loop output Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Popped Variable Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner slice Original List For loop output Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner New List For loop output Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Slice variables John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Adding to a Dictionary with Inputs . Using input to add a value to a dictionary with the key and value. . aDict={ &#39;a&#39;:12, &#39;b&#39;:34 }#creating a dictionary print(&quot;Original Dictionary&quot;) print(aDict) key=input(&quot;Enter your key (str): &quot;)#get the key ele=int(input(&quot;Enter your element (int): &quot;))#get the element aDict[key]=ele#adding the element to the dictionary print(&quot;New Dictionary&quot;) print(aDict)#printing the dictionary . Original Dictionary {&#39;a&#39;: 12, &#39;b&#39;: 34} New Dictionary {&#39;a&#39;: 12, &#39;b&#39;: 34, &#39;c&#39;: 28} . Quiz using Dictionaries . Using Dictionaries to create a quiz . import getpass, sys def question_with_response(prompt): #function for asking and answering print(&quot;Question: &quot; + prompt) msg = input() return msg quizQnA={ &quot;What folder is used to create markdown posts?&quot;:&quot;posts&quot;, &quot;What folder is used to create notebook posts?&quot;:&quot;notebook&quot;, &quot;What is the term for submitting a change made in editor?&quot;:&quot;commit&quot;, &quot;What command is used to include other functions that are developed?&quot;:&quot;import&quot;, &quot;What command in this example is used to evaluate a response?&quot;:&quot;if&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;:&quot;expression&quot;, }#define the questions quizLength=len(quizQnA)#measures the length of question ans=0#add variable for answered correctly for question in quizQnA: resp=question_with_response(question) if resp==quizQnA[question]: print(resp+&quot; was correct!&quot;) ans+=1 else: print(resp+&quot; was incorrect.&quot;) print(&quot;The correct answer is &quot;+quizQnA[question]) print(getpass.getuser()+&quot;, you scored &quot;+str(ans)+&quot;/&quot;+str(quizLength)+&quot;, which is &quot;+str(format(ans/quizLength*100,&quot;.2f&quot;))+&quot;%&quot;) . Question: What folder is used to create markdown posts? posts was correct! Question: What folder is used to create notebook posts? notebook was correct! Question: What is the term for submitting a change made in editor? commit was correct! Question: What command is used to include other functions that are developed? commit was incorrect. The correct answer is import Question: What command in this example is used to evaluate a response? if was correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression was correct! haoxu, you scored 5/6, which is 83.33% . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://jasoxddd.github.io/FastProject2/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What folder is used to create markdown posts?&quot;) if rsp == &quot;posts&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What folder is used to create notebook posts?&quot;) if rsp == &quot;notebook&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the term for submitting a change made in editor?&quot;) if rsp == &quot;commit&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, haoxu running c: Users haoxu AppData Local Programs Python Python310 python.exe You will be asked 3 questions. Question: Are you ready to take a test? Answer: y Question: What folder is used to create markdown posts? posts is correct! Question: What folder is used to create notebook posts? notebook is correct! Question: What is the term for submitting a change made in editor? commit is correct! haoxu you scored 3/3 .",
            "url": "https://jasoxddd.github.io/FastProject2/jupyter/2022/08/27/quiz.html",
            "relUrl": "/jupyter/2022/08/27/quiz.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "An test Markdown Post",
            "content": "Test . Does this work? .",
            "url": "https://jasoxddd.github.io/FastProject2/markdown/2022/08/23/new-post.html",
            "relUrl": "/markdown/2022/08/23/new-post.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Test Notebook Post",
            "content": "print(&#39;hello world&#39;) . hello world . .",
            "url": "https://jasoxddd.github.io/FastProject2/jupyter/2022/08/23/new-notebook.html",
            "relUrl": "/jupyter/2022/08/23/new-notebook.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Bash Test",
            "content": "Prerequisites for Bash on Jupyter . Being able to find a Bash Reference. Here is a Bash Cheat Sheet Install the Bash Kernel for Jupyter notebooks. Expectations are pip3 and python3 are defined within the path. The bash shell allowed construction of this tutorial. . pip install bash_kernel | python -m bash_kernel.install | . Selecting a kernel in &quot;code --project--&quot; or &quot;jupyter notebook --file.ipynb--&quot; that have bash in options. . Prerequisites for Project Directory . Practice pulling code from git to your machine. This will create a project directory and add APCSP github project to the directory. There is conditional logic to make sure that directory and pull only happen if it does not (!) exist. . Hack:Change variables, make new directory, clone to that directory. | . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/haoxuan/vscode exists. Directory /home/haoxuan/vscode/APCSP exists. . Look inside Fastpages/Github page project . All computers contain files and directories. The clone brought more files from cloud to your machine. Using the bash shell you will see some commands that show and interact with files and directories. . &quot;ls&quot; lists computer files in Unix and Unix-like operating systems | &quot;cd&quot; offers way to navigate and change working directory | &quot;pwd&quot; print working directory | &quot;echo&quot; used to display line of text/string that are passed as an argument | . ls . Volume in drive C is Windows Volume Serial Number is A6D3-D43E Directory of c: AAA coding Visual Studio fastproject2 FastProject2 _notebooks 08/29/2022 02:53 PM &lt;DIR&gt; . 08/29/2022 12:08 AM &lt;DIR&gt; .. 08/23/2022 11:51 PM 3,162,569 2020-02-20-test.ipynb 08/30/2022 02:36 PM 9,754 2022-08-22-bash_test.ipynb 08/30/2022 02:36 PM 1,195 2022-08-23-new-notebook.ipynb 08/29/2022 02:47 PM 3,179 2022-08-27-quiz.ipynb 08/23/2022 11:41 PM &lt;DIR&gt; ghtop_images 08/23/2022 11:41 PM &lt;DIR&gt; my_icons 08/23/2022 11:41 PM 784 README.md 5 File(s) 3,177,481 bytes 4 Dir(s) 344,116,977,664 bytes free . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . Navigate to project, then navigate to area wwhere files were cloned /home/haoxuan list top level or root of files with project pulled from github anaconda3 vscode list again with hidden files pulled from github . .cache .local .vscode-server .. .conda .motd_shown .wget-hsts .aws .docker .node-gyp anaconda3 .azure .gitconfig .npm vscode .bash_history .ipython .profile .bash_logout .jupyter .sudo_as_admin_successful .bashrc .landscape .vscode-remote-containers list all files in long format total 96 drwxr-xr-x 15 haoxuan haoxuan 4096 Oct 10 15:19 . drwxr-xr-x 3 root root 4096 Aug 23 23:16 .. lrwxrwxrwx 1 haoxuan haoxuan 23 Sep 20 01:15 .aws -&gt; /mnt/c/Users/haoxu/.aws lrwxrwxrwx 1 haoxuan haoxuan 25 Sep 20 01:15 .azure -&gt; /mnt/c/Users/haoxu/.azure -rw- 1 haoxuan haoxuan 9611 Oct 13 19:01 .bash_history -rw-r--r-- 1 haoxuan haoxuan 220 Aug 23 23:16 .bash_logout -rw-r--r-- 1 haoxuan haoxuan 4254 Aug 30 14:47 .bashrc drwxr-xr-x 6 haoxuan haoxuan 4096 Sep 22 14:59 .cache drwxr-xr-x 2 haoxuan haoxuan 4096 Aug 30 14:46 .conda drwxr-xr-x 5 haoxuan haoxuan 4096 Sep 20 14:29 .docker -rw-r--r-- 1 haoxuan haoxuan 59 Sep 21 01:32 .gitconfig drwxr-xr-x 3 haoxuan haoxuan 4096 Aug 30 14:57 .ipython drwxr-xr-x 2 haoxuan haoxuan 4096 Aug 30 14:59 .jupyter drwxr-xr-x 2 haoxuan haoxuan 4096 Aug 23 23:16 .landscape drwxr-xr-x 5 haoxuan haoxuan 4096 Oct 3 14:45 .local -rw-r--r-- 1 haoxuan haoxuan 0 Oct 15 14:09 .motd_shown drwxr-xr-x 3 haoxuan haoxuan 4096 Sep 21 15:15 .node-gyp drwxr-xr-x 13 haoxuan haoxuan 4096 Sep 22 14:59 .npm -rw-r--r-- 1 haoxuan haoxuan 807 Aug 23 23:16 .profile -rw-r--r-- 1 haoxuan haoxuan 0 Sep 20 14:25 .sudo_as_admin_successful drwxr-xr-x 3 haoxuan haoxuan 4096 Oct 10 15:19 .vscode-remote-containers drwxr-xr-x 5 haoxuan haoxuan 4096 Aug 30 14:52 .vscode-server -rw-r--r-- 1 haoxuan haoxuan 183 Oct 12 15:29 .wget-hsts drwxr-xr-x 28 haoxuan haoxuan 4096 Aug 30 15:01 anaconda3 drwxr-xr-x 9 haoxuan haoxuan 4096 Oct 12 15:01 vscode . echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . Look for posts bash: cd: /_posts: No such file or directory /home/haoxuan total 8 drwxr-xr-x 28 haoxuan haoxuan 4096 Aug 30 15:01 anaconda3 drwxr-xr-x 9 haoxuan haoxuan 4096 Oct 12 15:01 vscode . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . Look for notebooks bash: cd: /_notebooks: No such file or directory /home/haoxuan total 8 drwxr-xr-x 28 haoxuan haoxuan 4096 Aug 30 15:01 anaconda3 drwxr-xr-x 9 haoxuan haoxuan 4096 Oct 12 15:01 vscode . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . Look for images in notebooks, print working directory, list files bash: cd: /_notebooks/images: No such file or directory /home/haoxuan total 8 drwxr-xr-x 28 haoxuan haoxuan 4096 Aug 30 15:01 anaconda3 drwxr-xr-x 9 haoxuan haoxuan 4096 Oct 12 15:01 vscode . Look inside a Markdown File . &quot;cat&quot; reads data from the file and gives its content as output . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . Navigate to project, then navigate to area wwhere files were cloned show the contents of README.md cat: README.md: No such file or directory end of README.md . Env, Git and GitHub . Env(ironment) is used to capture things like path to Code or Home directory. Git and GitHub is NOT Only used to exchange code between individuals, it is often used to exchange code through servers, in our case deployment for Website. All tools we use have a behind the scenes hav relationship with the system they run on (MacOS, Windows, Linus) or a relationship with servers which they are connected to (ie GitHub). There is an &quot;env&quot; command in bash. There are environment files and setting files (.git/config) for Git. They both use a key/value concept. . &quot;env&quot; show setting for your shell | &quot;git clone&quot; sets up a director of files | &quot;cd $project&quot; allows user to move inside that directory of files | &quot;.git&quot; is a hidden directory that is used by git to establish relationship between machine and the git server on GitHub. | . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . Show the shell environment variables, key on left of equal value on right SHELL=/bin/bash PYTHONUNBUFFERED=1 CONDA_EXE=/home/haoxuan/anaconda3/bin/conda _CE_M= APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL=1 WSL_DISTRO_NAME=Ubuntu ELECTRON_RUN_AS_NODE=1 VSCODE_AMD_ENTRYPOINT=vs/workbench/api/node/extensionHostProcess NAME=LAPTOP-V9GL5S0O PWD=/home/haoxuan LOGNAME=haoxuan CONDA_PREFIX=/home/haoxuan/anaconda3 MOTD_SHOWN=update-motd HOME=/home/haoxuan LANG=C.UTF-8 WSL_INTEROP=/run/WSL/11_interop LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36: WAYLAND_DISPLAY=wayland-0 CONDA_PROMPT_MODIFIER=(base) PYDEVD_USE_FRAME_EVAL=NO posts=/_posts LESSCLOSE=/usr/bin/lesspipe %s %s VSCODE_HANDLES_SIGPIPE=true TERM=xterm-256color _CE_CONDA= LESSOPEN=| /usr/bin/lesspipe %s USER=haoxuan PYTHONIOENCODING=utf-8 notebooks=/_notebooks CONDA_SHLVL=1 DISPLAY=:0 SHLVL=1 PAGER=cat VSCODE_CWD=/mnt/c/AAA/coding/Visual Studio/Microsoft VS Code CONDA_PYTHON_EXE=/home/haoxuan/anaconda3/bin/python XDG_RUNTIME_DIR=/mnt/wslg/runtime-dir PS1=[PEXP [ ]ECT_PROMPT&gt; CONDA_DEFAULT_ENV=base WSLENV=VSCODE_WSL_EXT_LOCATION/up VSCODE_WSL_EXT_LOCATION=/mnt/c/Users/haoxu/.vscode/extensions/ms-vscode-remote.remote-wsl-0.72.0 XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop PATH=/home/haoxuan/.vscode-server/bin/129500ee4c8ab7263461ffe327268ba56b9f210d/bin/remote-cli:/home/haoxuan/.local/bin:/home/haoxuan/anaconda3/bin:/home/haoxuan/anaconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/WINDOWS/system32:/mnt/c/WINDOWS:/mnt/c/WINDOWS/System32/Wbem:/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0:/mnt/c/WINDOWS/System32/OpenSSH:/mnt/c/Program Files/Intel/WiFi/bin:/mnt/c/Program Files/Common Files/Intel/WirelessCommon:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/ProgramData/DockerDesktop/version-bin:/mnt/c/Users/haoxu/AppData/Local/Programs/Python/Python310/Scripts:/mnt/c/Users/haoxu/AppData/Local/Programs/Python/Python310:/mnt/c/Users/haoxu/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/haoxu/AppData/Local/JetBrains/PyCharm Community Edition 2019.2.3/bin:/mnt/c/AAA/coding/Visual Studio/Microsoft VS Code/bin:/mnt/c/Users/haoxu/AppData/Local/Programs/Git/cmd:/snap/bin VSCODE_NLS_CONFIG={&#34;locale&#34;:&#34;en&#34;,&#34;availableLanguages&#34;:{}} HOSTTYPE=x86_64 PULSE_SERVER=/mnt/wslg/PulseServer VSCODE_HANDLES_UNCAUGHT_ERRORS=true OLDPWD=/home/haoxuan VSCODE_IPC_HOOK_CLI=/mnt/wslg/runtime-dir/vscode-ipc-c6bbfe09-49c2-4921-95fa-d98203437b83.sock _=/usr/bin/env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config . show the secrets of .git bash: cd: .git: No such file or directory total 8 drwxr-xr-x 28 haoxuan haoxuan 4096 Aug 30 15:01 anaconda3 drwxr-xr-x 9 haoxuan haoxuan 4096 Oct 12 15:01 vscode look at config file cat: config: No such file or directory . . Hacks . Go back to some of the deployment procedures and think about some thing you could verify through Bash notebook. . Is there anything we use to verify tools we install? Think about versions. | Is there anything we could verify with Anaconda? | How would you update a repository? | Really cool would be automating a procedure from installation. | .",
            "url": "https://jasoxddd.github.io/FastProject2/techtalk/bash",
            "relUrl": "/techtalk/bash",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Fastpages Notebook Blog Post",
            "content": "Markdown changes . About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jasoxddd.github.io/FastProject2/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post38": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jasoxddd.github.io/FastProject2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jasoxddd.github.io/FastProject2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "",
          "content": "Notebook using javascript: . Notebook",
          "url": "https://jasoxddd.github.io/FastProject2/javascript/",
          "relUrl": "/javascript/",
          "date": ""
      }
      
  

  
  

  

  
  

  
      ,"page7": {
          "title": "Submenu",
          "content": ".mytable{ width:50px; height:50px; } . Link Description . Link to API page Notebook | . Link to Identifying errors page Notebook | .",
          "url": "https://jasoxddd.github.io/FastProject2/submenu/",
          "relUrl": "/submenu/",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jasoxddd.github.io/FastProject2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}