{
  
    
        "post0": {
            "title": "Javascript Test",
            "content": "The First program . We all know what it is . console.log(&quot;hello world!&quot;) . hello world! . Javascript ft. variables . Javascript program showing use of variables. . var msg = &quot;How are you today?&quot;; console.log(msg); . How are you today? . Javascript functions . Javascript program showing use of functions. . function logMsg(output){ console.log(output); } logMsg(msg); logMsg(&quot;I&#39;m doing ok&quot;); logMsg(2020); . How are you today? I&#39;m doing ok 2020 . Javascript Types . Javascript program showing Javascript&#39;s dynamic types . function logItType(output){ console.log(typeof output+&quot;:&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string: hello number: 2020 object: [ 1, 2, 3 ] . Javascript Object/Class . Javascript program showing use of instances . function Item(name,atk,price,description){ this.name = name; this.atk=atk; this.price = price; this.description = description; this.equipped = false; } Item.prototype.toggleEquiped = function(){ this.equipped=true; } Item.prototype.toJSON = function(){ const obj = {name: this.name, atk: this.atk, price: this.price, description: this.description, equipped: this.equipped}; const json = JSON.stringify(obj); return json; } Item.prototype.logItem=function(){ console.log(this.name); console.log(&quot;Atk:&quot;,this.atk); console.log(&quot;Price:&quot;,this.price); console.log(&#39;&quot;&#39;+this.description+&#39;&quot;&#39;); if (this.selected=true){ console.log(&quot;This item is equipped!&quot;) } console.log(&quot; n&quot;); } var coolSword=new Item(&quot;Cool Sword&quot;,999,9999,&quot;A very cool sword&quot;); coolSword.toggleEquiped(); logItType(coolSword+&quot; n&quot;); logItType(coolSword.toJSON()+&quot; n&quot;); coolSword.logItem(); . string: [object Object] string: {&#34;name&#34;:&#34;Cool Sword&#34;,&#34;atk&#34;:999,&#34;price&#34;:9999,&#34;description&#34;:&#34;A very cool sword&#34;,&#34;equipped&#34;:true} Cool Sword Atk: 999 Price: 9999 &#34;A very cool sword&#34; This item is equipped! . Javascript Array of Objects . Javascript program that showcases use of arrays of objects . var Inventory = [ new Item(&quot;Beginner&#39;s Blade&quot;,10,5,&quot;A weapon fit for a beginner&quot;), new Item(&quot;Adventurer&#39;s Blade&quot;,20,10,&quot;A weapon that signifies experiences in adventure&quot;), new Item(&quot;The Frost Edge&quot;,50,150,&quot;The treasured sword of Frostpeak&quot;), coolSword ]; for (let i = 0; i &lt; Inventory.length; i++){ Inventory[i].logItem(); } . Beginner&#39;s Blade Atk: 10 Price: 5 &#34;A weapon fit for a beginner&#34; This item is equipped! Adventurer&#39;s Blade Atk: 20 Price: 10 &#34;A weapon that signifies experiences in adventure&#34; This item is equipped! The Frost Edge Atk: 50 Price: 150 &#34;The treasured sword of Frostpeak&#34; This item is equipped! Cool Sword Atk: 999 Price: 9999 &#34;A very cool sword&#34; This item is equipped! . Javascript Table . A program that displays array data in a table . var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Attack&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Price&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Description&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var item of Inventory) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + item.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + item.atk + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + item.price + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + item.description + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } htmlFrag=&quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; $$.html(htmlFrag); . NameAttackPriceDescription . Beginner&#39;s Blade | 10 | 5 | A weapon fit for a beginner | Adventurer&#39;s Blade | 20 | 10 | A weapon that signifies experiences in adventure | The Frost Edge | 50 | 150 | The treasured sword of Frostpeak | Cool Sword | 999 | 9999 | A very cool sword | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://jasoxddd.github.io/FastProject2/jupyter/2022/09/23/javascript.html",
            "relUrl": "/jupyter/2022/09/23/javascript.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "App Lab Log",
            "content": "Outline . Here is my outline: 3 Questions, with one right answers each . Getting questions right go to the correct page and 1 score, incorrect page if not right | End screen depending on score | Coins to show number of correct problems | Question #1: What is the 5th offical level in Geometry Dash? Answer is in format of image + text, click on the text | The Answer is Base to Base | Three other answers Stereo Madness | Can&#39;t Let Go (without apostrophe for memes) | Jumper (My first guess) | | . | Question #2: How many Gold Coins are in the game currently? Text only answer choices | 149 coins (why robtop) | Other answers: 63, 99, 168 | . | Question #3: Which of these parts belong in Clutterfunk? Image only answers | Correct answer is the one in bottom right | Other parts from Cycles, xStep, and Theory of Everything (ToE) | . | . Logs . The following are logs of my progress each day . Day 1 - 9/9/2022 . I made a remix of the example, Renamed it to Geometry Dash Quiz . I also created the title screen, replaced the image with the GD logo and wrote the title text . I made a score variable to track the questions I got correct. . I made the Question and Options for the questions Note: it turns out that the GD wiki uses .webm files, which can&#39;t be used, I had to use thumbnails instead . I made the Incorrect and Correct Screens, and linked the options on problem #1 to their options: correct options to the correct screen and incorrect to the incorrect screen, with the level complete screen and dying at the first spike in stereo madness screen respectively. . I ran into a problem, I don&#39;t want to make a separate screen after each problem, but I can&#39;t find a way to make it link to different screens. . Summary: Overall pretty good progress, but I need to do something about the screen problem. . Day 2 - 9/11/2022 . I had to do something else last day, so this is my second day doing the project. . I figured out the solution to the problem. All I had to do is to store the id for the screen in a list and make a variable for the question that I was on, then I can just go to the question by using the variable as an index for the lsit, which would go to the right screen. I have yet to test this but it should work in theory. . Alright, it worked, so I have to link the rest of the options now. . There has to be a faster way to do this . It turns out text mode is great for copying and pasting options that are basically the same, so I used that to make a OnClick event for every option. . I made the screens for each of the scores possible, and used the list of ids trick to link the continue button to the endscreen with the score variable as index when the question variable is not less than 3, which means the player had just finished the 3rd problem. . It&#39;s getting late, so I will do the debugging tomorrow. . Summary: Pretty much done with the project, only debugging left to go. . Day 3 - 9/12/2022 . I&#39;m technically supposed to be done already, but I can use the Office Hour time to debug . There is a bug where getting one problem correct would link to the 0 coins screen. . A quick check and I figured the problem was that the list for the end screens is wrong, I fixed and it seemed to work now . Another bug, getting the last question wrong returns an error. . I figured it out after some logging, I had to have the go to endscreen code for both of the continue buttons. . It seems to be all working now, so that&#39;s good. . Summary: Finished Debugging, hopefully this is good for the full score. . Day 4 - 9/13/2022 . I noticed I forgot to remove the stretched GD logo from title screen after a failed attempt at creating the title screen, I quickly removed that, this should be all good now . My log is not showing why . I found that my log is not showing because I put the first cell in this log as code, so I copied that over . Summary: One quick UI fix and logging fix before the end, that&#39;s good. .",
            "url": "https://jasoxddd.github.io/FastProject2/jupyter/2022/09/09/quiz_log.html",
            "relUrl": "/jupyter/2022/09/09/quiz_log.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Del Norte Bell Schedule",
            "content": "Below are the (really confusing) bell schedule for Del Norte . Monday, Tuesday, Thursday . The “normal” bell schedule . Period Start Time End Time . Period 1 | 8:35 | 9:44 | . Period 2 | 9:49 | 10:58 | . Break | 10:58 | 11:08 | . Period 3 | 11:13 | 12:22 | . Lunch | 12:22 | 12:52 | . Period 4 | 12:57 | 14:06 | . Office Hours | 14:06 | 14:31 | . Period 5 | 14:36 | 15:45 | . Wednesday . The late start bell schdule . Period Start Time End Time . Period 1 | 9:55 | 10:53 | . Period 2 | 10:58 | 11:56 | . Break | 11:56 | 12:06 | . Period 3 | 12:11 | 13:09 | . Lunch | 13:09 | 13:39 | . Period 4 | 13:44 | 14:42 | . Period 5 | 14:47 | 15:45 | . Friday . The day-without-office-hours bell schedule . Period Start Time End Time . Period 1 | 8:35 | 9:49 | . Period 2 | 9:54 | 11:08 | . Break | 11:08 | 11:18 | . Period 3 | 11:23 | 12:37 | . Lunch | 12:37 | 13:07 | . Period 4 | 13:12 | 14:26 | . Period 5 | 14:31 | 15:45 | .",
            "url": "https://jasoxddd.github.io/FastProject2/markdown/2022/09/04/del-norte-schedule.html",
            "relUrl": "/markdown/2022/09/04/del-norte-schedule.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review of variables in the introduction last week. String, Integer, Float, List and Dictionary are some of the types of variables. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) #string is a primitive # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) #int is a primitive # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) #float is a primitive print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) #list is a collection print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) #element in this list in a primitive print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) #dictionary is a collection print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) #string in dictionary is primitive . name John Doe &lt;class &#39;str&#39;&gt; age 18 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Haoxuan&quot;, &quot;LastName&quot;: &quot;Tong&quot;, &quot;DOB&quot;: &quot;July 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;haoxuantong8@gmail.com&quot;, &quot;Owns_Cars&quot;: [] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Haoxuan&#39;, &#39;LastName&#39;: &#39;Tong&#39;, &#39;DOB&#39;: &#39;July 9&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;haoxuantong8@gmail.com&#39;, &#39;Owns_Cars&#39;: []}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Haoxuan&quot;, &quot;LastName&quot;: &quot;Tong&quot;, &quot;DOB&quot;: &quot;July 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;haoxuantong8@gmail.com&quot;, &quot;Owns_Cars&quot;: [] }) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: . Calling a for loop with index . Instead of using elements, using the function range can create a list of indexes to output the data. . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for i in range(len(InfoDb)): #Using range(len(InfoDb)) to create an iterable of indices print_data(InfoDb[i]) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: . Outputting data in reverse . Using range(0,len(InfoDb),-1), we can output the date in reverse. . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb with indices def for_loop_indices(): print(&quot;Reverse with indices n&quot;) for i in range(len(InfoDb)-1,-1,-1): #Using range(len(InfoDb)-1,-1,-1) to create a reversed iterable of indices print_data(InfoDb[i]) for_loop_indices() . Reverse with indices Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac . Poping and Slicing from a List . Using pop() to pop values from selected indices . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for i in range(len(InfoDb)): #Using range(len(InfoDb)) to create an iterable of indices print_data(InfoDb[i]) print(&quot;pop&quot;) print(&quot;Original List n&quot;) for_loop()#printing the original list popped=InfoDb.pop(0)#popping the first element from list and storing it in a variable print(&quot;New List n&quot;) for_loop()#printing the new list print(&quot;Popped Variable n&quot;) print_data(popped)#printing the popped variable InfoDb.append(popped)#adding the popped element back into the list print(&quot;&quot;) print(&quot;slice&quot;) print(&quot;Original List n&quot;) for_loop()#printing the original list aSlice=InfoDb[1:3]#slicing the second element and third from list and storing it in a variable print(&quot;New List n&quot;) for_loop()#printing the new list, it should be the same print(&quot;Slice variables&quot;) print_data(aSlice[0])#printing the first and second variable in the slice print_data(aSlice[1]) print(&quot;&quot;) . pop Original List For loop output Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac New List For loop output Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Popped Variable Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner slice Original List For loop output Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner New List For loop output Haoxuan Tong Residence: San Diego Birth Day: July 9 Cars: John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Slice variables John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Adding to a Dictionary with Inputs . Using input to add a value to a dictionary with the key and value. . aDict={ &#39;a&#39;:12, &#39;b&#39;:34 }#creating a dictionary print(&quot;Original Dictionary&quot;) print(aDict) key=input(&quot;Enter your key (str): &quot;)#get the key ele=int(input(&quot;Enter your element (int): &quot;))#get the element aDict[key]=ele#adding the element to the dictionary print(&quot;New Dictionary&quot;) print(aDict)#printing the dictionary . Original Dictionary {&#39;a&#39;: 12, &#39;b&#39;: 34} New Dictionary {&#39;a&#39;: 12, &#39;b&#39;: 34, &#39;c&#39;: 28} . Quiz using Dictionaries . Using Dictionaries to create a quiz . import getpass, sys def question_with_response(prompt): #function for asking and answering print(&quot;Question: &quot; + prompt) msg = input() return msg quizQnA={ &quot;What folder is used to create markdown posts?&quot;:&quot;posts&quot;, &quot;What folder is used to create notebook posts?&quot;:&quot;notebook&quot;, &quot;What is the term for submitting a change made in editor?&quot;:&quot;commit&quot;, &quot;What command is used to include other functions that are developed?&quot;:&quot;import&quot;, &quot;What command in this example is used to evaluate a response?&quot;:&quot;if&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;:&quot;expression&quot;, }#define the questions quizLength=len(quizQnA)#measures the length of question ans=0#add variable for answered correctly for question in quizQnA: resp=question_with_response(question) if resp==quizQnA[question]: print(resp+&quot; was correct!&quot;) ans+=1 else: print(resp+&quot; was incorrect.&quot;) print(&quot;The correct answer is &quot;+quizQnA[question]) print(getpass.getuser()+&quot;, you scored &quot;+str(ans)+&quot;/&quot;+str(quizLength)+&quot;, which is &quot;+str(format(ans/quizLength*100,&quot;.2f&quot;))+&quot;%&quot;) . Question: What folder is used to create markdown posts? posts was correct! Question: What folder is used to create notebook posts? notebook was correct! Question: What is the term for submitting a change made in editor? commit was correct! Question: What command is used to include other functions that are developed? commit was incorrect. The correct answer is import Question: What command in this example is used to evaluate a response? if was correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression was correct! haoxu, you scored 5/6, which is 83.33% . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://jasoxddd.github.io/FastProject2/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What folder is used to create markdown posts?&quot;) if rsp == &quot;posts&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What folder is used to create notebook posts?&quot;) if rsp == &quot;notebook&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the term for submitting a change made in editor?&quot;) if rsp == &quot;commit&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, haoxu running c: Users haoxu AppData Local Programs Python Python310 python.exe You will be asked 3 questions. Question: Are you ready to take a test? Answer: y Question: What folder is used to create markdown posts? posts is correct! Question: What folder is used to create notebook posts? notebook is correct! Question: What is the term for submitting a change made in editor? commit is correct! haoxu you scored 3/3 .",
            "url": "https://jasoxddd.github.io/FastProject2/jupyter/2022/08/27/quiz.html",
            "relUrl": "/jupyter/2022/08/27/quiz.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "An test Markdown Post",
            "content": "Test . Does this work? .",
            "url": "https://jasoxddd.github.io/FastProject2/markdown/2022/08/23/new-post.html",
            "relUrl": "/markdown/2022/08/23/new-post.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Test Notebook Post",
            "content": "print(&#39;hello world&#39;) . hello world . .",
            "url": "https://jasoxddd.github.io/FastProject2/jupyter/2022/08/23/new-notebook.html",
            "relUrl": "/jupyter/2022/08/23/new-notebook.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Fastpages Notebook Blog Post",
            "content": "Markdown changes . About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jasoxddd.github.io/FastProject2/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jasoxddd.github.io/FastProject2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jasoxddd.github.io/FastProject2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jasoxddd.github.io/FastProject2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}